---
openapi: 3.0.2
info:
  title: ReRun API
  version: "0.1"
servers:
  - url: /v1
paths:
  /health:
    get:
      description: Returns whether the service is healthy or not.
      operationId: health
      tags:
        - health
      responses:
        "200":
          description: OK
  /projects:
    get:
      description: Returns the list of projects.
      operationId: listProjects
      security:
        - OAuth:
            - projects:read
      tags:
        - projects
      parameters:
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
        - $ref: "#/components/parameters/orderBy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listProjectsOutput"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
    post:
      description: Adds a project.
      operationId: createProject
      security:
        - OAuth:
            - projects:write
      tags:
        - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createProjectInput"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/project"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "409":
          $ref: "#/components/responses/alreadyExists"
  /projects/{projectID}:
    get:
      description: Returns a specific project.
      operationId: getProject
      security:
        - OAuth:
            - projects:read
      tags:
        - projects
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/project"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
    patch:
      description: Updates the project.
      operationId: updateProject
      security:
        - OAuth:
            - projects:write
      tags:
        - projects
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateProjectInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/project"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      description: Archives a project.
      operationId: archiveProject
      security:
        - OAuth:
            - projects:write
      tags:
        - projects
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
      responses:
        "204":
          description: OK
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/branches:
    get:
      description: Returns the list of branches for a project.
      operationId: listBranchesForProject
      security:
        - OAuth:
            - projects:read
      tags:
        - projects
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: name
          in: query
          description: Filter branches by name
          schema:
            type: string
        - name: branchType
          in: query
          description: Filter branches by branchType
          schema:
            $ref: "#/components/schemas/branchType"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
        - $ref: "#/components/parameters/orderBy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listBranchesOutput"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
    post:
      description: Adds a branch for a project.
      operationId: createBranchForProject
      security:
        - OAuth:
            - projects:write
      tags:
        - projects
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createBranchInput"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/branch"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "409":
          $ref: "#/components/responses/alreadyExists"
  /projects/{projectID}/branches/{branchID}:
    get:
      description: Returns a specific branch for a project.
      operationId: getBranchForProject
      security:
        - OAuth:
            - projects:read
      tags:
        - projects
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: branchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/branchID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/branch"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      description: Deletes a branch for a project.
      operationId: deleteBranchForProject
      security:
        - OAuth:
            - projects:write
      tags:
        - projects
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: branchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/branchID"
      responses:
        "204":
          description: OK
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/branches/{branchID}/builds:
    get:
      description: Returns the list of builds for a branch.
      operationId: listBuildsForBranches
      security:
        - OAuth:
            - builds:read
      tags:
        - builds
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: branchID
          in: path
          required: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/branchID"
            minItems: 1
          explode: false
          style: simple
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
        - $ref: "#/components/parameters/orderBy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listBuildsOutput"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
    post:
      description: Adds a build.
      operationId: createBuildForBranch
      security:
        - OAuth:
            - builds:write
      tags:
        - builds
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: branchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/branchID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createBuildForBranchInput"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/build"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
  /projects/{projectID}/branches/{branchID}/builds/{buildID}:
    get:
      description: Returns a specific build for a branch.
      operationId: getBuildForBranch
      security:
        - OAuth:
            - builds:read
      tags:
        - builds
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: branchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/branchID"
        - name: buildID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/buildID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/build"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      description: Delete a build.
      operationId: deleteBuildForBranch
      security:
        - OAuth:
            - builds:write
      tags:
        - builds
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: branchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/branchID"
        - name: buildID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/buildID"
      responses:
        "204":
          description: OK
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/branches/{branchID}/builds/{buildID}/batches:
    get:
      description: Returns the batches for a build.
      operationId: listBatchesForBuilds
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: branchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/branchID"
        - name: buildID
          in: path
          required: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/buildID"
            minItems: 1
          explode: false
          style: simple
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
        - $ref: "#/components/parameters/orderBy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listBatchesOutput"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
  /projects/{projectID}/builds:
    get:
      description: Returns the list of builds.
      operationId: listBuilds
      security:
        - OAuth:
            - builds:read
      tags:
        - builds
      parameters:
        - name: search
          in: query
          example: branch_id = "71b96a67-9990-426b-993e-0f3d9c6bbe48"
          description: A search query. Supports searching by branch_id, system_id
          schema:
            type: string
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: text
          in: query
          description: Filter builds by their name or description
          schema:
            type: string
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
        - $ref: "#/components/parameters/orderBy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listBuildsOutput"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
  /projects/{projectID}/builds/accounts:
    get:
      description: Get all the account names that have created builds in the given project. These usernames are collected automatically from CI systems.
      operationId: listBuildAccounts
      security:
        - OAuth:
            - builds:read
      tags:
        - builds
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listUsersOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/builds/{buildID}:
    get:
      description: Returns a specific build.
      operationId: getBuild
      security:
        - OAuth:
            - builds:read
      tags:
        - builds
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: buildID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/buildID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/build"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
    patch:
      description: Updates the build.
      operationId: updateBuild
      security:
        - OAuth:
            - builds:write
      tags:
        - builds
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: buildID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/buildID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateBuildInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/build"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/profiles:
    get:
      description: Returns the list of service profiles.
      operationId: listServiceProfiles
      security:
        - OAuth:
            - experiences:read
      tags:
        - experiences
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/systems:
    get:
      description: Returns the list of systems.
      operationId: listSystems
      security:
        - OAuth:
            - systems:read
      tags:
        - systems
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: name
          in: query
          description: Filter systems by name
          schema:
            type: string
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
        - $ref: "#/components/parameters/orderBy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listSystemsOutput"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
    post:
      description: Adds a system.
      operationId: createSystem
      security:
        - OAuth:
            - systems:write
      tags:
        - systems
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createSystemInput"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/system"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "409":
          $ref: "#/components/responses/alreadyExists"
  /projects/{projectID}/systems/{systemID}:
    get:
      description: Returns a specific system.
      operationId: getSystem
      security:
        - OAuth:
            - systems:read
      tags:
        - systems
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: systemID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/systemID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/system"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
    patch:
      description: Updates the system.
      operationId: updateSystem
      security:
        - OAuth:
            - systems:write
      tags:
        - systems
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: systemID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/systemID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateSystemInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/system"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      description: Archives a system.
      operationId: archiveSystem
      security:
        - OAuth:
            - systems:write
      tags:
        - systems
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: systemID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/systemID"
      responses:
        "204":
          description: OK
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/systems/{systemID}/builds:
    get:
      description: Returns the list of builds for a system.
      operationId: listBuildsForSystem
      security:
        - OAuth:
            - builds:read
      tags:
        - builds
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: systemID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/systemID"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
        - $ref: "#/components/parameters/orderBy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listBuildsOutput"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
    post:
      description: Adds a build.
      operationId: createBuildForSystem
      security:
        - OAuth:
            - builds:write
      tags:
        - builds
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: systemID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/systemID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createBuildForSystemInput"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/build"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
  /projects/{projectID}/systems/{systemID}/builds/{buildID}:
    get:
      description: Returns a specific build for a system.
      operationId: getBuildForSystem
      security:
        - OAuth:
            - builds:read
      tags:
        - builds
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: systemID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/systemID"
        - name: buildID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/buildID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/build"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/systems/{systemID}/experiences:
    get:
      description: Returns a list of all experiences applicable to the system.
      operationId: listExperiencesForSystem
      security:
        - OAuth:
            - systems:read
      tags:
        - systems
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: systemID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/systemID"
        - name: archived
          in: query
          description: Filter experiences by archived status
          schema:
            type: boolean
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listExperiencesOutput"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
  /projects/{projectID}/systems/addExperiences:
    post:
      description: Registers the given experiences as applicable for the systems
      operationId: addSystemsToExperiences
      security:
        - OAuth:
            - systems:write
      tags:
        - systems
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/mutateSystemsToExperienceInput"
      responses:
        "201":
          description: Created
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          $ref: "#/components/responses/alreadyExists"
  /projects/{projectID}/systems/removeExperiences:
    post:
      description: Removes the given experiences from association with the systems
      operationId: removeSystemsFromExperiences
      security:
        - OAuth:
            - systems:write
      tags:
        - systems
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/mutateSystemsToExperienceInput"
      responses:
        "201":
          description: OK
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          $ref: "#/components/responses/alreadyExists"
  /projects/{projectID}/systems/{systemID}/experiences/{experienceID}:
    post:
      description: Registers the given experience as applicable for the system
      operationId: addSystemToExperience
      security:
        - OAuth:
            - systems:write
      tags:
        - systems
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: systemID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/systemID"
        - name: experienceID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/experienceID"
      responses:
        "201":
          description: OK
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          $ref: "#/components/responses/alreadyExists"
    delete:
      description: Deregisters the given experience as applicable for the system
      operationId: removeSystemFromExperience
      security:
        - OAuth:
            - systems:write
      tags:
        - systems
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: systemID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/systemID"
        - name: experienceID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/experienceID"
      responses:
        "204":
          description: OK
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/systems/{systemID}/metricsBuilds/{metricsBuildID}:
    post:
      description: Registers the given metrics build as applicable for the system
      operationId: addSystemToMetricsBuild
      security:
        - OAuth:
            - systems:write
      tags:
        - systems
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: systemID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/systemID"
        - name: metricsBuildID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/metricsBuildID"
      responses:
        "201":
          description: OK
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          $ref: "#/components/responses/alreadyExists"
    delete:
      description: Deregisters the given metrics build as applicable for the system
      operationId: removeSystemFromMetricsBuild
      security:
        - OAuth:
            - systems:write
      tags:
        - systems
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: systemID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/systemID"
        - name: metricsBuildID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/metricsBuildID"
      responses:
        "204":
          description: OK
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/metricsBuilds:
    get:
      description: Returns the list of metrics builds.
      operationId: listMetricsBuilds
      security:
        - OAuth:
            - builds:read
      tags:
        - metricsBuilds
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: systemID
          in: query
          example: system_id = "71b96a67-9990-426b-993e-0f3d9c6bbe48"
          description: A search query. Supports searching by system_id
          schema:
            type: string
            format: uuid
        - name: text
          in: query
          description: Free text filter on the metrics build name.
          schema:
            type: string
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
        - $ref: "#/components/parameters/orderBy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listMetricsBuildOutput"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
    post:
      description: Adds a metrics build.
      operationId: createMetricsBuild
      security:
        - OAuth:
            - builds:write
      tags:
        - metricsBuilds
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createMetricsBuildInput"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/metricsBuild"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "409":
          $ref: "#/components/responses/alreadyExists"
  /projects/{projectID}/metricsBuilds/{metricsBuildID}:
    get:
      description: Returns a specific metrics build.
      operationId: getMetricsBuild
      security:
        - OAuth:
            - builds:read
      tags:
        - metricsBuilds
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: metricsBuildID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/metricsBuildID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/metricsBuild"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/metricsBuilds/{metricsBuildID}/systems:
    get:
      description: Returns the systems for a given metrics build
      operationId: getSystemsForMetricsBuild
      security:
        - OAuth:
            - builds:read
      tags:
        - metricsBuilds
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: metricsBuildID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/metricsBuildID"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listSystemsOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/suites:
    get:
      description: Returns the list of test suites at their latest revision
      operationId: listTestSuites
      security:
        - OAuth:
            - batches:read
      tags:
        - test_suites
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: experienceIDs
          description: Only return test suites that contain the given experience id(s)
          in: query
          style: form
          explode: false
          schema:
            type: array
            minItems: 1
            items:
              $ref: "#/components/schemas/experienceID"
        - name: systemID
          in: query
          description: Only return test suites that contain the given system id
          schema:
            type: string
            format: uuid
        - name: archived
          in: query
          schema:
            type: boolean
        - name: name
          in: query
          description: Filter test suites by name
          schema:
            type: string
        - name: text
          in: query
          description: Filter test suites by a text string on name and description
          schema:
            type: string
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
        - $ref: "#/components/parameters/orderBy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listTestSuiteOutput"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
    post:
      description: Adds a test suite for a project.
      operationId: createTestSuite
      security:
        - OAuth:
            - batches:write
      tags:
        - test_suites
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createTestSuiteInput"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/testSuite"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "409":
          $ref: "#/components/responses/alreadyExists"
  /projects/{projectID}/suites/addExperiences:
    post:
      description: Add experiences to test suites. This will generate a new test suite revision.
      operationId: addTestSuitesToExperiences
      security:
        - OAuth:
            - batches:write
      tags:
        - test_suites
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addSuitesToExperiencesInput"
      responses:
        "201":
          description: Created
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/suites/{testSuiteID}/restore:
    post:
      description: Restores a test suite.
      operationId: restoreTestSuite
      security:
        - OAuth:
            - batches:write
      tags:
        - test_suites
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: testSuiteID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/testSuiteID"
      responses:
        "204":
          description: OK
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/suites/summary:
    get:
      description: Returns an overview of test suites and high-level performance data. A test suite will only be returned if it has 1 or more reports on the main
        branch assocated to it.
      operationId: getTestSuiteSummary
      security:
        - OAuth:
            - batches:read
      tags:
        - test_suites
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/testSuiteSummaryOutput"
  /projects/{projectID}/suites/{testSuiteID}:
    get:
      description: Returns a specific test suite's latest revision.
      operationId: getTestSuite
      security:
        - OAuth:
            - batches:read
      tags:
        - test_suites
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: testSuiteID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/testSuiteID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/testSuite"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
    patch:
      description: Revise a test suite, generating a new revision. Supply a false value for ad-hoc to convert an existing ad hoc test suite to a full test suite.
      operationId: reviseTestSuite
      security:
        - OAuth:
            - batches:write
      tags:
        - test_suites
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: testSuiteID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/testSuiteID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/reviseTestSuiteInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/testSuite"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"

    delete:
      description: Archives a test suite.
      operationId: archiveTestSuite
      security:
        - OAuth:
            - batches:write
      tags:
        - test_suites
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: testSuiteID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/testSuiteID"
      responses:
        "204":
          description: OK
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/suites/{testSuiteID}/addExperiences:
    patch:
      description: Add experiences to a test suite. This will generate a new test suite revision.
      operationId: addExperiencesToTestSuite
      security:
        - OAuth:
            - batches:write
      tags:
        - test_suites
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: testSuiteID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/testSuiteID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/selectExperiencesInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/testSuite"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/suites/{testSuiteID}/removeExperiences:
    patch:
      description: Remove experiences from a test suite. This will generate a new test suite revision.
      operationId: removeExperiencesFromTestSuite
      security:
        - OAuth:
            - batches:write
      tags:
        - test_suites
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: testSuiteID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/testSuiteID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/selectExperiencesInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/testSuite"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/suites/{testSuiteID}/batches:
    post:
      description: Creates a batch for that test suite
      operationId: CreateBatchForTestSuite
      security:
        - OAuth:
            - batches:write
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: testSuiteID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/testSuiteID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/testSuiteBatchInput"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/batch"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "402":
          $ref: "#/components/responses/insufficientQuota"
    get:
      description: List the batches for a test suite (all revisions).
      operationId: listBatchesForTestSuite
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: testSuiteID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/testSuiteID"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
        - $ref: "#/components/parameters/orderBy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listBatchesOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
  /projects/{projectID}/suites/{testSuiteID}/revisions:
    get:
      description: Returns all the revisions of a specific test suite.
      operationId: listTestSuiteRevisions
      security:
        - OAuth:
            - batches:read
      tags:
        - test_suites
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: testSuiteID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/testSuiteID"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listTestSuiteRevisionsOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/suites/{testSuiteID}/revisions/{revision}:
    get:
      description: Returns a specified revision of a test suite.
      operationId: getTestSuiteRevision
      security:
        - OAuth:
            - batches:read
      tags:
        - test_suites
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: testSuiteID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/testSuiteID"
        - name: revision
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/testSuiteRevision"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/testSuite"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/suites/{testSuiteID}/revisions/{revision}/batches:
    post:
      description: Creates a batch for that test suite revision
      operationId: CreateBatchForTestSuiteRevision
      security:
        - OAuth:
            - batches:write
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: testSuiteID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/testSuiteID"
        - name: revision
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/testSuiteRevision"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/testSuiteBatchInput"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/batch"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "402":
          $ref: "#/components/responses/insufficientQuota"
    get:
      description: List the batches for a test suite revision
      operationId: listBatchesForTestSuiteRevision
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: testSuiteID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/testSuiteID"
        - name: revision
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/testSuiteRevision"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
        - $ref: "#/components/parameters/orderBy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listBatchesOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
  /projects/{projectID}/sweeps:
    get:
      description: Returns the list of parameter sweeps.
      operationId: listParameterSweeps
      security:
        - OAuth:
            - sweeps:read
      tags:
        - parameterSweeps
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
        - $ref: "#/components/parameters/orderBy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listParameterSweepsOutput"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
    post:
      description: Adds a parameter sweep.  ID should be omitted and will be returned in the response.
      operationId: createParameterSweep
      security:
        - OAuth:
            - sweeps:write
      tags:
        - parameterSweeps
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/parameterSweepInput"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/parameterSweep"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
  /projects/{projectID}/sweeps/accounts:
    get:
      description: Get all the account names that have triggered sweeps in the given project. These usernames are collected automatically from CI systems.
      operationId: listSweepAccounts
      security:
        - OAuth:
            - sweeps:read
      tags:
        - parameterSweeps
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listUsersOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/sweeps/{sweepID}:
    get:
      description: Returns a specific parameter sweep.
      operationId: getParameterSweep
      security:
        - OAuth:
            - sweeps:read
      tags:
        - parameterSweeps
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: sweepID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/parameterSweepID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/parameterSweep"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/sweeps/{sweepID}/:cancel:
    post:
      description: Cancels a parameter sweep.
      operationId: cancelParameterSweep
      security:
        - OAuth:
            - sweeps:write
      tags:
        - parameterSweeps
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: sweepID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/parameterSweepID"
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /validateExperienceLocation:
    post:
      description: Validates an experience location can be reached by ReSim.
      operationId: validateExperienceLocation
      security:
        - OAuth:
            - experiences:write
      tags:
        - experiences
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/experienceLocation"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/experienceLocationContents"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
  /projects/{projectID}/experiences:
    get:
      description: Returns the list of experiences.
      operationId: listExperiences
      security:
        - OAuth:
            - experiences:read
      tags:
        - experiences
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: name
          in: query
          description: Filter experiences by name
          schema:
            type: string
        - name: text
          in: query
          description: Filter experiences by a text string on experience name, experience description, or experience tag name
          schema:
            type: string
        - name: search
          in: query
          example: tag_id IN ("71b96a67-9990-426b-993e-0f3d9c6bbe48")
          description: A search query. Supports searching by tag_id, test_suite_id, archived, profile, and system_id
          schema:
            type: string
        - name: archived
          in: query
          schema:
            type: boolean
        - $ref: "#/components/parameters/pageSizeUnbounded"
        - $ref: "#/components/parameters/pageToken"
        - $ref: "#/components/parameters/orderBy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listExperiencesOutput"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
    post:
      description: Adds an experience.
      operationId: createExperience
      security:
        - OAuth:
            - experiences:write
      tags:
        - experiences
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createExperienceInput"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/experience"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "409":
          $ref: "#/components/responses/alreadyExists"
  /projects/{projectID}/experiences/{experienceID}:
    get:
      description: Returns a specific experience.
      operationId: getExperience
      security:
        - OAuth:
            - experiences:read
      tags:
        - experiences
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: experienceID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/experienceID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/experience"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
    patch:
      description: Updates the experience. When updating environment variables, the entire array is replaced.
      operationId: updateExperience
      security:
        - OAuth:
            - experiences:write
      tags:
        - experiences
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: experienceID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/experienceID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateExperienceInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/experience"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      description: Archives an experience.
      operationId: archiveExperience
      security:
        - OAuth:
            - experiences:write
      tags:
        - experiences
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: experienceID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/experienceID"
      responses:
        "204":
          description: OK
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/experiences/archive:
    post:
      description: Archives multiple experiences in bulk.
      operationId: bulkArchiveExperiences
      security:
        - OAuth:
            - experiences:write
      tags:
        - experiences
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bulkArchiveExperiencesInput"
      responses:
        "200":
          description: Number of experiences successfully archived
          content:
            application/json:
              schema:
                type: integer
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
  /projects/{projectID}/experiences/{experienceID}/debug:
    post:
      description: Reruns an experience in debug mode.
      operationId: debugExperience
      security:
        - OAuth:
            - batches:write
      tags:
        - experiences
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: experienceID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/experienceID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/debugExperienceInput"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/debugExperienceOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/experiences/{experienceID}/restore:
    post:
      description: Restores an experience.
      operationId: restoreExperience
      security:
        - OAuth:
            - experiences:write
      tags:
        - experiences
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: experienceID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/experienceID"
      responses:
        "204":
          description: OK
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/experiences/{experienceID}/systems:
    get:
      description: Returns the systems for a given experience
      operationId: getSystemsForExperience
      security:
        - OAuth:
            - experiences:read
      tags:
        - experiences
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: experienceID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/experienceID"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listSystemsOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/experiences/{experienceID}/experienceTags:
    get:
      description: Returns a list of experience tags associated with a given experience.
      operationId: listExperienceTagsForExperience
      security:
        - OAuth:
            - experiences:read
      tags:
        - experiences
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: experienceID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/experienceID"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listExperienceTagsOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/experienceTags:
    get:
      description: Returns a list of all experience tags.
      operationId: listExperienceTags
      security:
        - OAuth:
            - experienceTags:read
      tags:
        - experience tags
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: name
          in: query
          description: Filter experience tags by name. It is recommended to use orderBy=rank, so you get the most relevant results first.
          schema:
            type: string
        - name: orderBy
          in: query
          schema:
            type: string
            default: id
            enum:
              - id
              - timestamp
              - rank
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listExperienceTagsOutput"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
    post:
      description: Adds an experience tag.
      operationId: createExperienceTag
      security:
        - OAuth:
            - experienceTags:write
      tags:
        - experience tags
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createExperienceTagInput"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/experienceTag"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "409":
          $ref: "#/components/responses/alreadyExists"
  /projects/{projectID}/experienceTags/{experienceTagID}:
    get:
      description: Returns a specific experience tag.
      operationId: getExperienceTag
      security:
        - OAuth:
            - experienceTags:read
      tags:
        - experience tags
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: experienceTagID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/experienceTagID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/experienceTag"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
    patch:
      description: Updates the experience tag.  Experience membership cannot be changed with this method.
      operationId: updateExperienceTag
      security:
        - OAuth:
            - experienceTags:write
      tags:
        - experience tags
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: experienceTagID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/experienceTagID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateExperienceTagInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/experienceTag"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      description: Deletes an experience tag.
      operationId: deleteExperienceTag
      security:
        - OAuth:
            - experienceTags:write
      tags:
        - experience tags
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: experienceTagID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/experienceTagID"
      responses:
        "204":
          description: OK
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/experienceTags/{experienceTagID}/experiences:
    get:
      description: Returns a list of experiences with the given experience tag.
      operationId: listExperiencesWithExperienceTag
      security:
        - OAuth:
            - experienceTags:read
      tags:
        - experience tags
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: experienceTagID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/experienceTagID"
        - name: archived
          in: query
          required: false
          description: Filter by archived status.
          schema:
            type: boolean
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listExperiencesOutput"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
  /projects/{projectID}/experienceTags/addExperiences:
    post:
      description: Registers the given experiences as applicable for the experience tags
      operationId: addTagsToExperiences
      security:
        - OAuth:
            - experienceTags:write
      tags:
        - experience tags
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addTagsToExperiencesInput"
      responses:
        "201":
          description: OK
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          $ref: "#/components/responses/alreadyExists"
  /projects/{projectID}/experienceTags/{experienceTagID}/experiences/{experienceID}:
    post:
      description: Adds the given experience tag to the given experience.
      operationId: addExperienceTagToExperience
      security:
        - OAuth:
            - experienceTags:write
      tags:
        - experience tags
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: experienceTagID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/experienceTagID"
        - name: experienceID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/experienceID"
      responses:
        "201":
          description: OK
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          $ref: "#/components/responses/alreadyExists"
    delete:
      description: Removes the given experience tag from the given experience.
      operationId: removeExperienceTagFromExperience
      security:
        - OAuth:
            - experienceTags:write
      tags:
        - experience tags
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: experienceTagID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/experienceTagID"
        - name: experienceID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/experienceID"
      responses:
        "204":
          description: OK
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches:
    get:
      description: List the batches.
      operationId: listBatches
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: search
          in: query
          example: branch_id = "71b96a67-9990-426b-993e-0f3d9c6bbe48" AND created_at > "2024-01-01T00:00:00Z"
          description: Filter based on branch_id, build_id, system_id, created_at, status, metrics_status, batch_id
          schema:
            type: string
        - name: text
          in: query
          description: Filter batches by a text string on batch name and build version
          schema:
            type: string
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
        - $ref: "#/components/parameters/orderBy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listBatchesOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
    post:
      description: Adds a batch.  ID should be omitted and will be returned in the response.
      operationId: CreateBatch
      security:
        - OAuth:
            - batches:write
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/batchInput"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/batch"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "402":
          $ref: "#/components/responses/insufficientQuota"
  /projects/{projectID}/batches/{batchID}:
    get:
      description: Returns a batch.
      operationId: getBatch
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/batch"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
    patch:
      description: Updates the batch.
      operationId: updateBatch
      security:
        - OAuth:
            - batches:write
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateBatchInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/batch"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/runs/{runCounter}/tasksAndJobs:
    get:
      description: Returns a list of tasks and jobs for a given run counter
      operationId: ListTasksAndJobsForRunCounter
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: runCounter
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/runCounter"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listTasksAndJobsForRunCounterOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/suggestions:
    get:
      description: Returns a list of suggested batches to A/B compare against
      operationId: getBatchSuggestions
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/batchSuggestionsOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
  /projects/{projectID}/batches/{batchID}/:cancel:
    post:
      description: Cancels a batch.
      operationId: cancelBatch
      security:
        - OAuth:
            - batches:write
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/compare/{otherBatchID}:
    get:
      description: Get a summary describing how individual tests have changed between the two given batches.
                   A warning or a blocking failure is considered failing from the point of view of filters and ordering.
      operationId: compareBatches
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: otherBatchID
          description: the batch to compare to
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: status
          description: filter tests by their status
          in: query
          schema:
            $ref: "#/components/schemas/compareBatchesStatusFilter"
        - name: search
          description: filter tests by their name
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/compareBatchesOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/errors:
    get:
      description: Returns the errors associated with a given batch ID
      operationId: listBatchErrors
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
        - errors
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listBatchErrorsOutput"
        "204":
          description: No errors found for batch
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/metrics:
    get:
      description: Lists the (batch) metrics for a given batch. Does not return associated data.
      operationId: listBatchMetrics
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
        - metrics
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listBatchMetricsOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/metricsData:
    get:
      description: Returns the metrics data associated with a given batch ID
      operationId: listBatchMetricsData
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
        - metrics
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listBatchMetricsDataOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/metrics/{metricID}/metricsData:
    get:
      description: Returns the batch metrics data associated with given batch metric ID(s)
      operationId: listBatchMetricsDataForBatchMetricIDs
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
        - metrics
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: metricID
          in: path
          required: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/metricID"
            minItems: 1
          explode: false
          style: simple
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listBatchMetricsDataForBatchMetricIDsOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/metrics/{metricID}:
    get:
      description: Lists the batch metrics associated with given batch metric IDs
      operationId: listBatchMetricsForBatchMetricIDs
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
        - metrics
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: metricID
          in: path
          required: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/metricID"
            minItems: 1
          explode: false
          style: simple
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listBatchMetricsOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/metrics/{metricID}/tags:
    get:
      description: List the tags associated to the given metric id(s)
      operationId: listTagsForBatchMetrics
      security:
        - OAuth:
            - batches:read
      tags:
        - metrics
        - tags
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: metricID
          in: path
          required: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/metricID"
            minItems: 1
          explode: false
          style: simple
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listTagsForBatchMetricsOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/metricsData/{metricsDataID}:
    get:
      description: Lists the batch metrics data associated with given batch metrics data IDs
      operationId: listBatchMetricsDataForBatchMetricsDataIDs
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
        - metrics
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: metricsDataID
          in: path
          required: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/metricsDataID"
            minItems: 1
          explode: false
          style: simple
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listBatchMetricsDataOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/rerun:
    post:
      description: Rerun a batch
      operationId: rerunBatch
      security:
        - OAuth:
            - batches:write
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/rerunBatchInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rerunBatchOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          $ref: "#/components/responses/conflict"
  /projects/{projectID}/batches/-/jobs:
    get:
      description: List jobs across all batches in a project
      operationId: listAllJobs
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: search
          in: query
          example: metrics_build_name IN ("hello world") AND metrics_build_version IN ("1.0", "1.1")
          description: Filter based on attributes metrics_build_name and metrics_build_version
          schema:
            type: string
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
        - $ref: "#/components/parameters/orderBy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listAllJobsOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
  /projects/{projectID}/batches/{batchID}/jobs:
    get:
      description: List the jobs in the given batch.
      operationId: listJobs
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: status
          in: query
          description: Filter jobs by status
          schema:
            $ref: "#/components/schemas/jobStatus"
        - name: conflatedStatus
          in: query
          description: Filter jobs by their conflated status
          explode: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/conflatedJobStatus"
        - name: name
          in: query
          description: Filter experiences (in job) by name
          schema:
            type: string
        - name: text
          in: query
          description: Filter experiences (in job) by a text string on name and description
          schema:
            type: string
        - name: experienceTagIDs
          in: query
          description: Filter jobs by the tag id(s) attached to the experience
          explode: false
          schema:
            type: array
            items:
              type: string
              format: uuid
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
        - $ref: "#/components/parameters/orderBy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listJobsOutput"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}:
    get:
      description: Retrieve the given job.
      operationId: getJob
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: jobID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/jobID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/job"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
    patch:
      description: Updates the job.
      operationId: updateJob
      security:
        - OAuth:
            - batches:write
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: jobID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/jobID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateJobInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/job"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}/metrics/{metricID}/tags:
    get:
      description: List the tags associated to the given job metric id(s)
      operationId: listTagsForJobMetrics
      security:
        - OAuth:
            - batches:read
      tags:
        - metrics
        - tags
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: jobID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/jobID"
        - name: metricID
          in: path
          required: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/metricID"
            minItems: 1
          explode: false
          style: simple
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listTagsForJobMetricsOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}/metrics:
    get:
      description: Lists the metrics for a given job. Does not return associated data.
      operationId: listMetricsForJob
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
        - metrics
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: jobID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/jobID"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
        - $ref: "#/components/parameters/orderBy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listJobMetricsOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}/metricsData:
    get:
      description: Returns the metrics data associated with a given job ID
      operationId: listMetricsDataForJob
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
        - metrics
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: jobID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/jobID"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listJobMetricsDataOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}/metrics/{metricID}/metricsData:
    get:
      description: Returns the metrics data associated with given metric ID(s)
      operationId: listMetricsDataForMetricIDs
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
        - metrics
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: jobID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/jobID"
        - name: metricID
          in: path
          required: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/metricID"
            minItems: 1
          explode: false
          style: simple
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listMetricsDataAndMetricIDOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}/metrics/{metricID}:
    get:
      description: Lists the metrics associated with given metric IDs
      operationId: listMetricsForMetricIDs
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
        - metrics
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: jobID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/jobID"
        - name: metricID
          in: path
          required: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/metricID"
            minItems: 1
          explode: false
          style: simple
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listJobMetricsOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}/metricsData/{metricsDataID}:
    get:
      description: Lists the metrics data associated with given metrics data IDs
      operationId: listMetricsDataForMetricsDataIDs
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
        - metrics
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: jobID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/jobID"
        - name: metricsDataID
          in: path
          required: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/metricsDataID"
            minItems: 1
          explode: false
          style: simple
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listJobMetricsDataOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}/eventTags:
    get:
      description: Lists the event tags for a given job.
      operationId: listEventTagsForJob
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
        - metrics
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: jobID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/jobID"
        - name: name
          in: query
          description: Filter event tags by name
          schema:
            type: string
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listJobEventTagsOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}/events:
    get:
      description: Lists the events for a given job. Does not return associated data.
      operationId: listEventsForJob
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
        - metrics
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: jobID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/jobID"
        - name: eventTags
          in: query
          description: Tags on which to filter the events
          schema:
            $ref: "#/components/schemas/eventTags"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listJobEventsOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}/events/{eventID}:
    get:
      description: Retrieve a single event. Does not return associated data.
      operationId: getEventForJob
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
        - metrics
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: jobID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/jobID"
        - name: eventID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/eventID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/event"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
    patch:
      description: Updates the event.
      operationId: updateEvent
      security:
        - OAuth:
            - batches:write
      tags:
        - batches
        - metrics
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: jobID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/jobID"
        - name: eventID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/eventID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateEventInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/event"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}/logs:
    get:
      description: List the logs associated with a given job
      operationId: listJobLogsForJob
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: jobID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/jobID"
        - name: type
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/logType"
        - name: name
          in: query
          description: Filter logs by name
          schema:
            type: string
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listJobLogsOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}/logs/{logID}:
    get:
      description: Get an individual log file
      operationId: getJobLog
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: jobID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/jobID"
        - name: logID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/logID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/jobLog"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      description: Deletes a log.
      operationId: deleteJobLog
      security:
        - OAuth:
            - batches:write
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: jobID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/jobID"
        - name: logID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/logID"
      responses:
        "204":
          description: OK
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/logs:
    get:
      description: List the logs associated with a given batch
      operationId: listBatchLogsForBatch
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listBatchLogsOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/accounts:
    get:
      description: Get all the account names that have triggered batches in the given project. These usernames are collected automatically from CI systems.
      operationId: listBatchAccounts
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: name
          in: query
          description: Filter by the account name
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listUsersOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/batches/{batchID}/logs/{logID}:
    get:
      description: Get an individual log file
      operationId: getBatchLog
      security:
        - OAuth:
            - batches:read
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: logID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/logID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/batchLog"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      description: Deletes a log.
      operationId: deleteBatchLog
      security:
        - OAuth:
            - batches:write
      tags:
        - batches
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: batchID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/batchID"
        - name: logID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/logID"
      responses:
        "204":
          description: OK
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/reports:
    get:
      description: List the reports.
      operationId: listReports
      security:
        - OAuth:
            - reports:read
      tags:
        - reports
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: search
          in: query
          example: branch_id = "71b96a67-9990-426b-993e-0f3d9c6bbe48" AND created_at > "2024-01-01T00:00:00Z"
          description: Filter based on branch_id, test_suite_id, created_at, status, associated_account
          schema:
            type: string
        - name: text
          in: query
          description: Filter reports by a text string (only supports batch id as of 3/21/2025)
          schema:
            type: string
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
        - $ref: "#/components/parameters/orderBy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listReportsOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
    post:
      description: Adds a report. If the user supplies a name parameter, that name will be used, otherwise a name will be generated. The end timestamp is optional
        and will default to now(). The respectRevisionBoundary field enables strict report generation from only the defined testSuiteRevision.
      operationId: CreateReport
      security:
        - OAuth:
            - reports:write
      tags:
        - reports
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/reportInput"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/report"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "402":
          $ref: "#/components/responses/insufficientQuota"
  /projects/{projectID}/reports/{reportID}:
    get:
      description: Returns a report.
      operationId: getReport
      security:
        - OAuth:
            - reports:read
      tags:
        - reports
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: reportID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/reportID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/report"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/reports/{reportID}/logs:
    get:
      description: List the logs associated with a given report
      operationId: listLogsForReport
      security:
        - OAuth:
            - reports:read
      tags:
        - reports
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: reportID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/reportID"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listReportLogsOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/reports/{reportID}/logs/{logID}:
    get:
      description: Get an individual log file
      operationId: getReportLog
      security:
        - OAuth:
            - reports:read
      tags:
        - reports
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: reportID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/reportID"
        - name: logID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/logID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/reportLog"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/reports/accounts:
    get:
      description: Get all the account names that have triggered reports in the given project. These usernames are collected automatically from CI systems.
      operationId: listReportAccounts
      security:
        - OAuth:
            - reports:read
      tags:
        - reports
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listUsersOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/reports/{reportID}/metrics:
    get:
      description: Lists the metrics for a given report. Does not return associated data.
      operationId: listReportMetrics
      security:
        - OAuth:
            - reports:read
      tags:
        - reports
        - metrics
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: reportID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/reportID"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listReportMetricsOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/reports/{reportID}/metricsData:
    get:
      description: Returns the metrics data associated with a given report ID
      operationId: listReportMetricsData
      security:
        - OAuth:
            - reports:read
      tags:
        - reports
        - metrics
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: reportID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/reportID"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listReportMetricsDataOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/reports/{reportID}/metrics/{metricID}/metricsData:
    get:
      description: Returns the report metrics data associated with given report metric ID(s)
      operationId: listReportMetricsDataForReportMetricIDs
      security:
        - OAuth:
            - reports:read
      tags:
        - reports
        - metrics
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: reportID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/reportID"
        - name: metricID
          in: path
          required: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/metricID"
            minItems: 1
          explode: false
          style: simple
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listReportMetricsDataForReportMetricIDsOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/reports/{reportID}/metrics/{metricID}:
    get:
      description: Lists the report metrics associated with given report metric IDs
      operationId: listReportMetricsForReportMetricIDs
      security:
        - OAuth:
            - reports:read
      tags:
        - reports
        - metrics
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: reportID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/reportID"
        - name: metricID
          in: path
          required: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/metricID"
            minItems: 1
          explode: false
          style: simple
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listReportMetricsOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/reports/{reportID}/metrics/{metricID}/tags:
    get:
      description: Lists the tags associated with given report metric IDs
      operationId: listTagsForReportMetrics
      security:
        - OAuth:
            - reports:read
      tags:
        - reports
        - metrics
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: reportID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/reportID"
        - name: metricID
          in: path
          required: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/metricID"
            minItems: 1
          explode: false
          style: simple
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listTagsForReportMetricsOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/reports/{reportID}/metricsData/{metricsDataID}:
    get:
      description: Lists the report metrics data associated with given report metrics data IDs
      operationId: listReportMetricsDataForReportMetricsDataIDs
      security:
        - OAuth:
            - reports:read
      tags:
        - reports
        - metrics
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: reportID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/reportID"
        - name: metricsDataID
          in: path
          required: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/metricsDataID"
            minItems: 1
          explode: false
          style: simple
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listReportMetricsDataOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/workflows:
    get:
      description: Lists the workflows for a project.
      operationId: listWorkflows
      security:
        - OAuth:
            - workflows:read
      tags:
        - workflows
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: name
          in: query
          description: Filter branches by name
          schema:
            type: string
        - name: text
          in: query
          description: Filter test suites by a text string on name and description
          schema:
            type: string
        - name: archived
          in: query
          schema:
            type: boolean
        - name: testSuiteID
          in: query
          description: Filter workflows by test suite ID
          schema:
            $ref: "#/components/schemas/testSuiteID"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
        - $ref: "#/components/parameters/orderBy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listWorkflowsOutput"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
    post:
      description: Creates a new workflow.
      operationId: createWorkflow
      security:
        - OAuth:
            - workflows:write
      tags:
        - workflows
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createWorkflowInput"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/workflow"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "409":
          $ref: "#/components/responses/alreadyExists"
  /projects/{projectID}/workflows/{workflowID}:
    get:
      description: Gets a workflow by ID.
      operationId: getWorkflow
      security:
        - OAuth:
            - workflows:read
      tags:
        - workflows
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: workflowID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/workflowID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/workflow"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
    patch:
      description: Updates a workflow.
      operationId: updateWorkflow
      security:
        - OAuth:
            - workflows:write
      tags:
        - workflows
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: workflowID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/workflowID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateWorkflowInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/workflow"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/workflows/{workflowID}/test_suites:
    get:
      description: Lists the suites for a workflow.
      operationId: listWorkflowSuites
      security:
        - OAuth:
            - workflows:read
      tags:
        - workflows
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: workflowID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/workflowID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listWorkflowSuitesOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
    post:
      description: Adds test suites to a workflow.
      operationId: createWorkflowSuites
      security:
        - OAuth:
            - workflows:write
      tags:
        - workflows
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: workflowID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/workflowID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createWorkflowSuitesInput"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createWorkflowSuitesOutput"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          $ref: "#/components/responses/conflict"
    patch:
      description: Updates workflow test suites.
      operationId: updateWorkflowSuites
      security:
        - OAuth:
            - workflows:write
      tags:
        - workflows
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: workflowID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/workflowID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateWorkflowSuitesInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateWorkflowSuitesOutput"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      description: Removes test suites from a workflow.
      operationId: deleteWorkflowSuites
      security:
        - OAuth:
            - workflows:write
      tags:
        - workflows
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: workflowID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/workflowID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/deleteWorkflowSuitesInput"
      responses:
        "204":
          description: OK
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/workflows/{workflowID}/test_suites/{testSuiteID}:
    get:
      description: Gets a specific workflow test suite.
      operationId: getWorkflowSuite
      security:
        - OAuth:
            - workflows:read
      tags:
        - workflows
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: workflowID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/workflowID"
        - name: testSuiteID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/testSuiteID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/workflowSuiteOutput"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/workflows/{workflowID}/runs:
    get:
      description: Lists the runs for a workflow.
      operationId: listWorkflowRuns
      security:
        - OAuth:
            - workflows:read
      tags:
        - workflows
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: workflowID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/workflowID"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
        - $ref: "#/components/parameters/orderBy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listWorkflowRunsOutput"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
    post:
      description: Creates a new workflow run.
      operationId: createWorkflowRun
      security:
        - OAuth:
            - workflows:write
      tags:
        - workflows
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: workflowID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/workflowID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createWorkflowRunInput"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/workflowRun"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /projects/{projectID}/workflows/{workflowID}/runs/{workflowRunID}:
    get:
      description: Gets a workflow run by ID.
      operationId: getWorkflowRun
      security:
        - OAuth:
            - workflows:read
      tags:
        - workflows
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/projectID"
        - name: workflowID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/workflowID"
        - name: workflowRunID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/workflowRunID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/workflowRun"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "404":
          $ref: "#/components/responses/notFound"
  /quota:
    get:
      description: Get current quota usage and limits
      operationId: getQuota
      security:
        - OAuth:
            - batches:read
            - reports:read
      responses:
        "200":
          description: quota
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getQuotaOutput"
  /view/sessions:
    get:
      description: Lists all View sessions.
      operationId: listViewSessions
      security:
        - OAuth:
            - view:read
      tags:
        - view
      parameters:
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageToken"
        - $ref: "#/components/parameters/orderBy"
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listViewObjectsOutput"
    post:
      description: Creates a new View session.
      operationId: createViewSession
      security:
        - OAuth:
            - view:write
      tags:
        - view
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/viewSessionID"
        "401":
          $ref: "#/components/responses/unauthenticated"
  /view/sessions/{viewSessionID}:
    get:
      description: Lists the view object and metadata associated with a specific view.
      operationId: getViewSession
      security:
        - OAuth:
            - view:read
      tags:
        - view
      parameters:
        - name: viewSessionID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/viewSessionID"
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/viewObjectAndMetadata"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
  /view/sessions/{viewSessionID}/updates/{viewUpdateID}:
    post:
      description: Adds an update to the View session.  Updates will be serialized sequentially by ID.
      operationId: createViewUpdate
      security:
        - OAuth:
            - view:write
      tags:
        - view
      parameters:
        - name: viewSessionID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/viewSessionID"
        - name: viewUpdateID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/viewUpdateID"
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/viewSessionUpdate"
        "401":
          $ref: "#/components/responses/unauthenticated"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
  /task/{taskID}/update:
    post:
      description: Update task status from customer
      operationId: updateTask
      tags:
        - batches
      parameters:
        - name: taskID
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/taskID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateTaskInput"
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/unauthenticated"
      security:
        - OAuth:
            - batches:write
components:
  securitySchemes:
    OAuth:
      type: oauth2
      description: This API uses OAuth 2
      flows:
        authorizationCode:
          authorizationUrl: https://resim.us.auth0.com/authorize
          tokenUrl: https://resim.us.auth0.com/oauth/token
          refreshUrl: https://resim.us.auth0.com/oauth/token
          scopes:
            experiences:read: Read experience data.
            experiences:write: Write experience data.
            experienceTags:read: Read experience tag data.
            experienceTags:write: Write experience tag data.
            batches:read: Read batch data.
            batches:write: Write batch data.
            projects:read: Read project data.
            projects:write: Write project data.
            builds:read: Read build data.
            builds:write: Write build data.
            view:read: Read view data.
            view:write: Write view data.
            systems:read: Read system data.
            systems:write: Write system data.
            sweeps:read: Read sweep data.
            sweeps:write: Write sweep data.
            reports:read: Read report data.
            reports:write: Write report data.
            workflows:read: Read workflow data.
            workflows:write: Write workflow data.
        implicit:
          authorizationUrl: https://resim.us.auth0.com/authorize
          scopes:
            experiences:read: Read experience data.
            experiences:write: Write experience data.
            experienceTags:read: Read experience tag data.
            experienceTags:write: Write experience tag data.
            batches:read: Read batch data.
            batches:write: Write batch data.
            projects:read: Read project data.
            projects:write: Write project data.
            builds:read: Read build data.
            builds:write: Write build data.
            view:read: Read view data.
            view:write: Write view data.
            systems:read: Read system data.
            systems:write: Write system data.
            sweeps:read: Read sweep data.
            sweeps:write: Write sweep data.
            reports:read: Read report data.
            reports:write: Write report data.
            workflows:read: Read workflow data.
            workflows:write: Write workflow data.
        clientCredentials:
          tokenUrl: https://resim.us.auth0.com/oauth/token
          scopes:
            experiences:read: Read experience data.
            experiences:write: Write experience data.
            experienceTags:read: Read experience tag data.
            experienceTags:write: Write experience tag data.
            batches:read: Read batch data.
            batches:write: Write batch data.
            projects:read: Read project data.
            projects:write: Write project data.
            builds:read: Read build data.
            builds:write: Write build data.
            view:read: Read view data.
            view:write: Write view data.
            systems:read: Read system data.
            systems:write: Write system data.
            sweeps:read: Read sweep data.
            sweeps:write: Write sweep data.
            reports:read: Read report data.
            reports:write: Write report data.
            workflows:read: Read workflow data.
            workflows:write: Write workflow data.
  schemas:
    excludedExperienceID:
      type: string
      format: uuid
    experienceID:
      type: string
      format: uuid
    experienceName:
      type: string
      minLength: 1
    createExperienceInput:
      type: object
      required:
        - name
        - description
      properties:
        name:
          $ref: "#/components/schemas/experienceName"
        description:
          type: string
        location:
          type: string
          minLength: 1
          deprecated: true
          description: "[DEPRECATED] This field was previously used to define an experience's location. Experiences can now be defined with multiple locations, using the locations field. This field will be removed in a later release."
        locations:
          type: array
          items:
            type: string
            minLength: 1
        containerTimeoutSeconds: # optional
          type: integer
          format: int32
        profile:
          $ref: "#/components/schemas/profile"
        environmentVariables:
          type: array
          items:
            $ref: "#/components/schemas/environmentVariable"
        systemIDs:
          type: array
          items:
            $ref: "#/components/schemas/systemID"
        experienceTagIDs:
          type: array
          items:
            $ref: "#/components/schemas/experienceTagID"
        cacheExempt:
          type: boolean
          description: If true, the experience will not be cached.
    profile:
      type: string
    environmentVariable:
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
        value:
          type: string
    experience:
      type: object
      required:
        - archived
        - experienceID
        - projectID
        - name
        - description
        - location
        - locations
        - containerTimeoutSeconds
        - profile
        - environmentVariables
        - creationTimestamp
        - userID
        - orgID
        - cacheExempt
      properties:
        experienceID:
          $ref: "#/components/schemas/experienceID"
        projectID:
          $ref: "#/components/schemas/projectID"
        name:
          $ref: "#/components/schemas/experienceName"
        description:
          type: string
        location:
          type: string
          deprecated: true
          description: "[DEPRECATED] This field was previously used to report an experience's location. Experiences can now be defined with multiple locations, this field will display the first location; this field will be removed in a future version."
        locations:
          type: array
          items:
            type: string
        containerTimeoutSeconds:
          type: integer
          format: int32
        profile:
          $ref: "#/components/schemas/profile"
        environmentVariables:
          type: array
          items:
            $ref: "#/components/schemas/environmentVariable"
        creationTimestamp:
          $ref: "#/components/schemas/timestamp"
        userID:
          $ref: "#/components/schemas/userID"
        orgID:
          $ref: "#/components/schemas/orgID"
        archived:
          type: boolean
        cacheExempt:
          type: boolean
    tagID:
      type: string
      format: uuid
      readOnly: true
    metricTag:
      type: object
      required:
        - tagID
        - name
        - value
        - creationTimestamp
      properties:
        tagID:
          $ref: "#/components/schemas/tagID"
        metricID:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        value:
          type: string
        creationTimestamp:
          type: string
          format: date-time
          readOnly: true
    experienceFilterInput:
      type: object
      properties:
        name:
          type: string
          description: Filter experiences by name
        text:
          type: string
          description: Filter experiences by a text string on name and description
        search:
          type: string
          description: A search query. Supports searching by tag_id
          example: tag_id IN ("71b96a67-9990-426b-993e-0f3d9c6bbe48")
    selectExperiencesInput:
      type: object
      properties:
        experiences:
          type: array
          items:
            $ref: "#/components/schemas/experienceID"
        allExperiences:
          type: boolean
        filters:
          $ref: "#/components/schemas/experienceFilterInput"
    bulkArchiveExperiencesInput:
      allOf:
        - $ref: "#/components/schemas/selectExperiencesInput"
        - required:
          - experienceIDs
        - type: object
          properties:
            experienceIDs:
              type: array
              items:
                $ref: "#/components/schemas/experienceID"
    mutateSystemsToExperienceInput:
      allOf:
        - $ref: "#/components/schemas/selectExperiencesInput"
        - required:
          - systemIDs
        - type: object
          properties:
            systemIDs:
              type: array
              items:
                $ref: "#/components/schemas/systemID"
    addTagsToExperiencesInput:
      allOf:
        - $ref: "#/components/schemas/selectExperiencesInput"
        - required:
            - experienceTagIDs
        - type: object
          properties:
            experienceTagIDs:
              type: array
              items:
                $ref: "#/components/schemas/experienceTagID"
    addSuitesToExperiencesInput:
      allOf:
        - $ref: "#/components/schemas/selectExperiencesInput"
        - required:
            - testSuiteIDs
        - type: object
          properties:
            testSuiteIDs:
              type: array
              items:
                $ref: "#/components/schemas/testSuiteID"
    listExperiencesOutput:
      type: object
      properties:
        experiences:
          type: array
          items:
            $ref: "#/components/schemas/experience"
        nextPageToken:
          type: string
        total:
          type: integer
    updateExperienceInput:
      type: object
      properties:
        updateMask:
          $ref: "#/components/schemas/updateMask"
        experience:
          $ref: "#/components/schemas/updateExperienceFields"
    updateExperienceFields:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/experienceName"
        description:
          type: string
        location:
          type: string
          minLength: 1
          deprecated: true
          description: "[DEPRECATED] This field was previously used to define an experience's location. Experiences can now be defined with multiple locations, using the locations field. This field will be removed in a future version."
        locations:
          type: array
          items:
            type: string
            minLength: 1
        containerTimeoutSeconds:
          type: integer
          format: int32
        profile:
          $ref: "#/components/schemas/profile"
        environmentVariables:
          type: array
          items:
            $ref: "#/components/schemas/environmentVariable"
        systemIDs:
          type: array
          items:
            $ref: "#/components/schemas/systemID"
        experienceTagIDs:
          type: array
          items:
            $ref: "#/components/schemas/experienceTagID"
        cacheExempt:
          type: boolean
          description: If true, the experience will not be cached.
    experienceTagID:
      type: string
      format: uuid
    experienceTagName:
      type: string
    createExperienceTagInput:
      type: object
      required:
        - name
        - description
      properties:
        name:
          $ref: "#/components/schemas/experienceTagName"
        description:
          type: string
    experienceTag:
      type: object
      required:
        - experienceTagID
        - projectID
        - name
        - description
        - creationTimestamp
        - userID
        - orgID
      properties:
        experienceTagID:
          $ref: "#/components/schemas/experienceTagID"
        projectID:
          $ref: "#/components/schemas/projectID"
        name:
          $ref: "#/components/schemas/experienceTagName"
        description:
          type: string
        creationTimestamp:
          $ref: "#/components/schemas/timestamp"
        userID:
          $ref: "#/components/schemas/userID"
        orgID:
          $ref: "#/components/schemas/orgID"
    listExperienceTagsOutput:
      type: object
      properties:
        experienceTags:
          type: array
          items:
            $ref: "#/components/schemas/experienceTag"
        nextPageToken:
          type: string
    updateExperienceTagFields:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/experienceTagName"
        description:
          type: string
    updateExperienceTagInput:
      type: object
      properties:
        updateMask:
          $ref: "#/components/schemas/updateMask"
        experienceTag:
          $ref: "#/components/schemas/updateExperienceTagFields"
    experienceLocation:
      type: object
      properties:
        location:
          type: string
          format: uri
    experienceLocationContents:
      type: object
      properties:
        isCloud:
          type: boolean
        objects:
          type: array
          items:
            type: string
        objectCount:
          type: integer
    testSuiteID:
      type: string
      format: uuid
    testSuiteRevision:
      type: integer
      format: int32
    testSuiteName:
      type: string
      minLength: 1
    testSuiteDescription:
      type: string
    testSuite:
      type: object
      required:
        - archived
        - testSuiteID
        - testSuiteRevision
        - name
        - description
        - projectID
        - systemID
        - experiences
        - userID
        - orgID
        - creationTimestamp
        - showOnSummary
      properties:
        archived:
          type: boolean
        testSuiteID:
          $ref: "#/components/schemas/testSuiteID"
        testSuiteRevision:
          $ref: "#/components/schemas/testSuiteRevision"
        name:
          $ref: "#/components/schemas/testSuiteName"
        description:
          $ref: "#/components/schemas/testSuiteDescription"
        projectID:
          $ref: "#/components/schemas/projectID"
        systemID:
          $ref: "#/components/schemas/systemID"
        metricsBuildID:
          nullable: true
          $ref: "#/components/schemas/metricsBuildID"
        metricsSetName:
          $ref: "#/components/schemas/metricsSetName"
        experiences:
          type: array
          items:
            $ref: "#/components/schemas/experienceID"
        userID:
          $ref: "#/components/schemas/userID"
        orgID:
          $ref: "#/components/schemas/orgID"
        creationTimestamp:
          $ref: "#/components/schemas/timestamp"
        showOnSummary:
          type: boolean
        summaryReferenceDate:
          $ref: "#/components/schemas/timestamp"
    testSuiteSummaryOutput:
      type: object
      required:
        - testSuites
        - nextPageToken
      properties:
        testSuites:
          type: array
          items:
            $ref: "#/components/schemas/testSuiteSummary"
        nextPageToken:
          type: string
    testSuiteSummary:
      type: object
      required:
        - name
        - testSuiteID
        - testSuiteRevision
        - testSuiteDescription
        - projectID
        - systemID
        - branchID
        - reportID
        - keyMetric
        - referenceBatchSummary
        - summary
        - batches
      properties:
        name:
          $ref: "#/components/schemas/testSuiteName"
        testSuiteID:
          $ref: "#/components/schemas/testSuiteID"
        testSuiteRevision:
          $ref: "#/components/schemas/testSuiteRevision"
        testSuiteDescription:
          $ref: "#/components/schemas/testSuiteDescription"
        projectID:
          $ref: "#/components/schemas/projectID"
        systemID:
          $ref: "#/components/schemas/systemID"
        branchID:
          $ref: "#/components/schemas/branchID"
        reportID:
          $ref: "#/components/schemas/reportID"
        keyMetric:
          $ref: "#/components/schemas/keyMetric"
        referenceBatch:
          $ref: "#/components/schemas/testSuiteBatchSummaryJobResults"
        referenceBatchSummary:
          $ref: "#/components/schemas/referenceBatchSummary"
        summary:
          type: object
          required:
            - fixedTests
            - newTests
            - newIssues
          properties:
            fixedTests:
              type: integer
              format: int64
            newTests:
              type: integer
              format: int64
            newIssues:
              type: integer
              format: int64
        batches:
          type: array
          items:
            $ref: "#/components/schemas/testSuiteBatchSummaryJobResults"
    referenceBatchSummary:
      type: object
      nullable: true
      required:
        - fixedTests
        - newTests
        - newIssues
      properties:
        fixedTests:
          type: integer
          format: int64
        newTests:
          type: integer
          format: int64
        newIssues:
          type: integer
          format: int64
    keyMetric:
      type: object
      nullable: true
      required:
        - name
        - target
        - firstBuildMetric
        - latestValue
        - unit
        - performance
      properties:
        name:
          type: string
          example: Meal Planning Time
        target:
          $ref: "#/components/schemas/keyMetricTarget"
        firstBuildMetric:
          $ref: "#/components/schemas/firstBuildMetric"
        latestValue:
          example: 150
          type: number
          format: double
        unit:
          type: string
          nullable: true
          example: Seconds
        performance:
          type: array
          items:
            $ref: "#/components/schemas/keyMetricPerformancePoint"
    firstBuildMetric:
      type: object
      nullable: true
      description: The first batch metric in the sequence, and some info about how it has changed
      required:
        - time
        - value
        - delta
      properties:
        time:
          $ref: "#/components/schemas/timestamp"
        value:
          type: number
          format: double
          example: -120.234
        delta:
          type: number
          format: double
    keyMetricTarget:
      type: object
      description: The optional desired target for this metric
      nullable: true
      required:
        - operator
        - value
      properties:
        operator:
          type: string
          example: <
        value:
          type: number
          format: double
          example: 150.1
    keyMetricPerformancePoint:
      type: object
      required:
        - time
        - value
      properties:
        time:
          $ref: "#/components/schemas/timestamp"
        value:
          type: number
          format: double
    customMetric:
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
          example: Planning time
        value:
          type: number
          format: double
          example: 0.01253
        unit:
          type: string
          example: Seconds
    testSuiteBatchSummaryJobResults:
      required:
        - batchID
        - batchCreationTimestamp
        - buildID
        - buildCreationTimestamp
        - metrics
        - total
        - queued
        - running
        - error
        - cancelled
        - blocker
        - warning
        - passed
      properties:
        batchID:
          $ref: "#/components/schemas/batchID"
        batchCreationTimestamp:
          $ref: "#/components/schemas/timestamp"
        buildID:
          $ref: "#/components/schemas/buildID"
        buildCreationTimestamp:
          $ref: "#/components/schemas/timestamp"
        metrics:
          type: array
          items:
            $ref: "#/components/schemas/customMetric"
        total:
          type: integer
          format: int64
        queued:
          type: integer
          format: int64
        running:
          type: integer
          format: int64
        error:
          type: integer
          format: int64
        cancelled:
          type: integer
          format: int64
        blocker:
          type: integer
          format: int64
        warning:
          type: integer
          format: int64
        passed:
          type: integer
          format: int64
    listTestSuiteRevisionsOutput:
      type: object
      properties:
        testSuites:
          type: array
          items:
            $ref: "#/components/schemas/testSuite"
        nextPageToken:
          type: string
    listTestSuiteOutput:
      type: object
      required:
        - testSuites
        - nextPageToken
        - total
      properties:
        testSuites:
          type: array
          items:
            $ref: "#/components/schemas/testSuite"
        nextPageToken:
          type: string
        total:
          type: integer
    createTestSuiteInput:
      type: object
      required:
        - name
        - description
        - systemID
        - experiences
      properties:
        name:
          $ref: "#/components/schemas/testSuiteName"
        description:
          $ref: "#/components/schemas/testSuiteDescription"
        systemID:
          $ref: "#/components/schemas/systemID"
        metricsBuildID:
          nullable: true
          $ref: "#/components/schemas/metricsBuildID"
        metricsSetName:
          $ref: "#/components/schemas/metricsSetName"
        allExperiences:
          type: boolean
        experiences:
          type: array
          items:
            $ref: "#/components/schemas/experienceID"
        excludedExperienceIDs:
          type: array
          items:
            $ref: "#/components/schemas/excludedExperienceID"
        filters:
          $ref: "#/components/schemas/experienceFilterInput"
        showOnSummary:
          type: boolean
        summaryReferenceDate:
          $ref: "#/components/schemas/timestamp"
    reviseTestSuiteInput:
      type: object
      required:
        - updateMetricsBuild
      properties:
        name:
          $ref: "#/components/schemas/testSuiteName"
        description:
          $ref: "#/components/schemas/testSuiteDescription"
        systemID:
          $ref: "#/components/schemas/systemID"
        metricsBuildID:
          nullable: true
          $ref: "#/components/schemas/metricsBuildID"
        metricsSetName:
          $ref: "#/components/schemas/metricsSetName"
        updateMetricsBuild:
          type: boolean
        allExperiences:
          type: boolean
        experiences:
          type: array
          items:
            $ref: "#/components/schemas/experienceID"
        excludedExperienceIDs:
          type: array
          items:
            $ref: "#/components/schemas/excludedExperienceID"
        filters:
          $ref: "#/components/schemas/experienceFilterInput"
        # And, if we wish to migrate a test suite from ad-hoc to full. this is set to false:
        adhoc:
          type: boolean
        show_on_summary:
          type: boolean
    testSuiteBatchInput:
      type: object
      required:
        - buildID
      properties:
        buildID:
          $ref: "#/components/schemas/buildID"
        batchName:
          nullable: true
          $ref: "#/components/schemas/name"
        parameters:
          nullable: true
          $ref: "#/components/schemas/batchParameters"
        associatedAccount:
          nullable: true
          $ref: "#/components/schemas/associatedAccount"
        triggeredVia:
          nullable: true
          $ref: "#/components/schemas/triggeredVia"
        poolLabels:
          nullable: true
          $ref: "#/components/schemas/poolLabels"
        allowableFailurePercent:
          nullable: true
          type: integer
    batchID:
      type: string
      format: uuid
    listTasksAndJobsForRunCounterOutput:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/jobAndTask"
    jobAndTask:
      type: object
      properties:
        job:
          $ref: "#/components/schemas/jobID"
        task:
          $ref: "#/components/schemas/taskID"
    taskID:
      type: string
      format: uuid
    batch:
      type: object
      required:
        - associatedAccount
      properties:
        adhocTestSuite:
          type: boolean
        allowable_failure_percent:
          type: integer
        associatedAccount:
          $ref: "#/components/schemas/associatedAccount"
        batchID:
          $ref: "#/components/schemas/batchID"
        batchMetricsStatus:
          $ref: "#/components/schemas/metricStatus"
        batchType:
          $ref: "#/components/schemas/batchType"
        branchID:
          $ref: "#/components/schemas/branchID"
        buildID:
          $ref: "#/components/schemas/buildID"
        creationTimestamp:
          $ref: "#/components/schemas/timestamp"
        description:
          type: string
        executionError:
          nullable: true
          $ref: "#/components/schemas/executionError"
        executionErrors:
          nullable: true
          type: array
          items:
            $ref: "#/components/schemas/executionError"
        friendlyName:
          $ref: "#/components/schemas/friendlyName"
        jobMetricsStatusCounts:
          $ref: "#/components/schemas/jobMetricsStatusCounts"
        jobStatusCounts:
          $ref: "#/components/schemas/batchJobStatusCounts"
        jobsMetricsStatus:
          $ref: "#/components/schemas/metricStatus"
        lastUpdatedTimestamp:
          $ref: "#/components/schemas/timestamp"
        lastRunTimestamp:
          nullable: true
          $ref: "#/components/schemas/timestamp"
        metricsBuildID:
          nullable: true
          $ref: "#/components/schemas/metricsBuildID"
        metricsSetName:
          $ref: "#/components/schemas/metricsSetName"
        orgID:
          $ref: "#/components/schemas/orgID"
        overallMetricsStatus:
          $ref: "#/components/schemas/metricStatus"
        parameters:
          $ref: "#/components/schemas/batchParameters"
        poolLabels:
          nullable: true
          $ref: "#/components/schemas/poolLabels"
        projectID:
          $ref: "#/components/schemas/projectID"
        status:
          $ref: "#/components/schemas/batchStatus"
        statusHistory:
          $ref: "#/components/schemas/batchStatusHistory"
        systemID:
          $ref: "#/components/schemas/systemID"
        testSuiteID:
          $ref: "#/components/schemas/testSuiteID"
        testSuiteRevision:
          $ref: "#/components/schemas/testSuiteRevision"
        totalJobs:
          $ref: "#/components/schemas/batchTotalJobs"
        userID:
          $ref: "#/components/schemas/userID"
        runCounter:
          $ref: "#/components/schemas/runCounter"
    listBatchesOutput:
      type: object
      properties:
        batches:
          type: array
          items:
            $ref: "#/components/schemas/batch"
        nextPageToken:
          type: string
        total:
          type: integer
    batchSuggestionsOutput:
      type: object
      required:
        - lastPassingOnMain
        - latestOnMain
        - lastPassingOnBranch
        - latestOnBranch
      properties:
        lastPassingOnMain:
          allOf:
            - $ref: "#/components/schemas/batch"
          nullable: true
        latestOnMain:
          allOf:
            - $ref: "#/components/schemas/batch"
          nullable: true
        lastPassingOnBranch:
          allOf:
            - $ref: "#/components/schemas/batch"
          nullable: true
        latestOnBranch:
          allOf:
            - $ref: "#/components/schemas/batch"
          nullable: true
    compareBatchesOutput:
      type: object
      required:
        - total
        - nextPageToken
        - tests
      properties:
        total:
          type: integer
        nextPageToken:
          type: string
        tests:
          type: array
          items:
            $ref: "#/components/schemas/compareBatchTest"
    compareBatchTest:
      type: object
      required:
        - experienceID
        - experienceName
        - fromTest
        - toTest
      properties:
        experienceID:
          $ref: "#/components/schemas/experienceID"
        experienceName:
          $ref: "#/components/schemas/experienceName"
        fromTest:
          $ref: "#/components/schemas/compareBatchTestDetails"
        toTest:
          $ref: "#/components/schemas/compareBatchTestDetails"
    compareBatchTestDetails:
      type: object
      nullable: true
      required:
        - jobID
        - status
        - numMetrics
      properties:
        jobID:
          $ref: "#/components/schemas/jobID"
        status:
          $ref: "#/components/schemas/conflatedJobStatus"
        numMetrics:
          type: integer
          nullable: true
          description: The number of failblock/failwarn/passing metrics (based on job's status). Otherwise this will be null
    compareBatchesStatusFilter:
      type: string
      enum:
        - BOTH_PASSING
        - BOTH_FAILING
        - ONE_FAILING
    batchInput:
      type: object
      properties:
        excludedExperienceIDs:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/excludedExperienceID"
        filters:
          $ref: "#/components/schemas/experienceFilterInput"
        experienceIDs:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/experienceID"
        experienceTagIDs:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/experienceTagID"
        experienceNames:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/experienceName"
        experienceTagNames:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/experienceTagName"
        buildID:
          $ref: "#/components/schemas/buildID"
        metricsBuildID:
          nullable: true
          $ref: "#/components/schemas/metricsBuildID"
        metricsSetName:
          $ref: "#/components/schemas/metricsSetName"
        parameters:
          nullable: true
          $ref: "#/components/schemas/batchParameters"
        associatedAccount:
          nullable: true
          $ref: "#/components/schemas/associatedAccount"
        triggeredVia:
          nullable: true
          $ref: "#/components/schemas/triggeredVia"
        poolLabels:
          nullable: true
          $ref: "#/components/schemas/poolLabels"
        batchName:
          nullable: true
          $ref: "#/components/schemas/name"
        allowableFailurePercent:
          nullable: true
          type: integer
    batchStatus:
      type: string
      enum:
        - SUBMITTED
        - EXPERIENCES_RUNNING
        - BATCH_METRICS_QUEUED
        - BATCH_METRICS_RUNNING
        - ERROR
        - SUCCEEDED
        - CANCELLED
    jobID:
      type: string
      format: uuid
    job:
      type: object
      properties:
        jobID:
          $ref: "#/components/schemas/jobID"
        projectID:
          $ref: "#/components/schemas/projectID"
        batchID:
          $ref: "#/components/schemas/batchID"
        systemID:
          $ref: "#/components/schemas/systemID"
        branchID:
          $ref: "#/components/schemas/branchID"
        conflatedStatus:
          $ref: "#/components/schemas/conflatedJobStatus"
        description:
          type: string
        jobStatus:
          $ref: "#/components/schemas/jobStatus"
        jobMetricsStatus:
          $ref: "#/components/schemas/metricStatus"
        lastRunTimestamp:
          $ref: "#/components/schemas/timestamp"
        statusHistory:
          $ref: "#/components/schemas/jobStatusHistory"
        lastUpdatedTimestamp:
          $ref: "#/components/schemas/timestamp"
        outputLocation:
          type: string
        executionError:
          nullable: true
          $ref: "#/components/schemas/executionError"
        executionErrors:
          nullable: true
          type: array
          items:
            $ref: "#/components/schemas/executionError"
        experienceID:
          $ref: "#/components/schemas/experienceID"
        experienceName:
          $ref: "#/components/schemas/experienceName"
        experienceProfile:
          type: string
        experienceEnvironmentVariables:
          type: array
          items:
            $ref: "#/components/schemas/environmentVariable"
        buildID:
          $ref: "#/components/schemas/buildID"
        creationTimestamp:
          $ref: "#/components/schemas/timestamp"
        parameters:
          $ref: "#/components/schemas/batchParameters"
        userID:
          $ref: "#/components/schemas/userID"
        orgID:
          $ref: "#/components/schemas/orgID"
        runCounter:
          $ref: "#/components/schemas/runCounter"
        workerID:
          type: string
    listAllJobsOutput:
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: "#/components/schemas/job"
        nextPageToken:
          type: string
        total:
          type: integer
    listJobsOutput:
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: "#/components/schemas/job"
        nextPageToken:
          type: string
        total:
          type: integer
    jobStatus:
      type: string
      enum:
        - SUBMITTED
        - EXPERIENCE_RUNNING
        - METRICS_QUEUED
        - METRICS_RUNNING
        - ERROR
        - SUCCEEDED
        - CANCELLED
    conflatedJobStatus:
      type: string
      enum:
        - QUEUED
        - RUNNING
        - ERROR
        - CANCELLED
        - BLOCKER
        - WARNING
        - PASSED
    executionStep:
      type: string
      enum:
        - EXPERIENCE
        - METRICS
        - BATCH_METRICS
        - REPORT
    taskStatus:
      type: string
      enum:
        - ASSIGNED
        - CREATED
        - DOWNLOADING
        - PENDING
        - SUBMITTED
        - STARTING
        - RUNNING
        - POSTPROCESSING
        - COMPLETED
        - ERROR
        - CANCELED
    runError:
      type: object
      nullable: true
      properties:
        source:
          $ref: "#/components/schemas/runErrorSource"
        code:
          type: integer
        reason:
          type: string
          nullable: true
          default: No exit reason provided
        type:
          $ref: "#/components/schemas/runErrorType"
        executionStep:
          $ref: "#/components/schemas/executionStep"
    runErrorSource:
      type: string
      enum:
        - container_exit
        - error_txt
      x-enum-varnames:
        - RunErrorSourceContainerExit
        - RunErrorSourceErrorTxt
    runErrorType:
      type: string
      nullable: true
      enum:
        - CUSTOMER_CONTAINER_TIMED_OUT
        - CUSTOMER_WORKLOAD_ERROR
        - NONZERO_EXIT_CODE
        - UNKNOWN_ERROR
    logType:
      type: string
      enum:
        - OTHER_LOG
        - METRICS_OUTPUT_LOG
        - CONTAINER_LOG
        - EXECUTION_LOG
        - MCAP_LOG
        - MP4_LOG
        - ARCHIVE_LOG
        - FOXGLOVE_MCAP_LOG
        - RERUN_IO_LOG
        - ERROR_LOG
        - SERVICE_LOG
        - EMISSIONS_LOG
    logID:
      type: string
      format: uuid
    log:
      type: object
      properties:
        logID:
          $ref: "#/components/schemas/logID"
        fileName:
          $ref: "#/components/schemas/fileName"
        fileSize:
          $ref: "#/components/schemas/fileSize"
        checksum:
          $ref: "#/components/schemas/checksum"
        creationTimestamp:
          $ref: "#/components/schemas/timestamp"
        location:
          $ref: "#/components/schemas/logLocation"
        logOutputLocation:
          type: string
          format: uri
        executionStep:
          $ref: "#/components/schemas/executionStep"
        logType:
          $ref: "#/components/schemas/logType"
        userID:
          $ref: "#/components/schemas/userID"
        orgID:
          $ref: "#/components/schemas/orgID"
    jobLog:
      allOf:
        - $ref: "#/components/schemas/log"
        - type: object
          properties:
            jobID:
              $ref: "#/components/schemas/jobID"
    listJobLogsOutput:
      type: object
      properties:
        logs:
          type: array
          items:
            $ref: "#/components/schemas/jobLog"
        nextPageToken:
          type: string
        total:
          type: integer
    batchLog:
      allOf:
        - $ref: "#/components/schemas/log"
        - type: object
          properties:
            batchID:
              $ref: "#/components/schemas/batchID"
    listBatchLogsOutput:
      type: object
      properties:
        logs:
          type: array
          items:
            $ref: "#/components/schemas/batchLog"
        nextPageToken:
          type: string
    batchParameters:
      type: object
      additionalProperties:
        type: string
    fileSize:
      type: integer
      format: int64
    checksum:
      type: string
    logLocation:
      type: string
      format: uri
    timestamp:
      type: string
      format: date-time
    eventID:
      type: string
      format: uuid
    eventTimestampType:
      type: string
      enum:
        - ABSOLUTE
        - RELATIVE
    eventTags:
      type: array
      items:
        type: string
      example:
        - tag1
        - tag2
    event:
      type: object
      required:
        - eventID
        - name
        - description
        - creationTimestamp
        - timestampType
        - timestamp
        - tags
        - status
        - metricsIDs
      properties:
        eventID:
          $ref: "#/components/schemas/eventID"
        name:
          type: string
        description:
          type: string
        creationTimestamp:
          $ref: "#/components/schemas/timestamp"
        timestampType:
          $ref: "#/components/schemas/eventTimestampType"
        timestamp:
          $ref: "#/components/schemas/timestamp"
        tags:
          $ref: "#/components/schemas/eventTags"
        status:
          $ref: "#/components/schemas/metricStatus"
        metricsIDs:
          type: array
          items:
            $ref: "#/components/schemas/metricID"
    updateEventInput:
      type: object
      required:
        - description
      properties:
        description:
          type: string
    updateBatchInput:
      type: object
      required:
        - description
      properties:
        description:
          type: string
    updateJobInput:
      type: object
      required:
        - description
      properties:
        description:
          type: string
    metric:
      type: object
      properties:
        metricID:
          $ref: "#/components/schemas/metricID"
        name:
          $ref: "#/components/schemas/metricName"
        creationTimestamp:
          $ref: "#/components/schemas/timestamp"
        fileLocation:
          $ref: "#/components/schemas/metricLocation"
        userID:
          $ref: "#/components/schemas/userID"
        orgID:
          $ref: "#/components/schemas/orgID"
        status:
          $ref: "#/components/schemas/metricStatus"
        type:
          $ref: "#/components/schemas/metricType"
        dataIDs:
          type: array
          items:
            $ref: "#/components/schemas/metricsDataID"
        value:
          $ref: "#/components/schemas/metricValue"
        unit:
          type: string
          nullable: true
        eventMetric:
          description: true if this metric is for an event
          type: boolean
        projectID:
          $ref: "#/components/schemas/projectID"
        metricURL:
          $ref: "#/components/schemas/metricURL"
    jobMetric:
      allOf:
        - $ref: "#/components/schemas/metric"
        - type: object
          properties:
            batchID:
              $ref: "#/components/schemas/batchID"
            jobID:
              $ref: "#/components/schemas/jobID"
    listJobMetricsOutput:
      type: object
      properties:
        metrics:
          type: array
          items:
            $ref: "#/components/schemas/jobMetric"
        nextPageToken:
          type: string
    listJobEventTagsOutput:
      type: object
      properties:
        eventTags:
          type: array
          items:
            type: string
        nextPageToken:
          type: string
    listJobEventsOutput:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/event"
        nextPageToken:
          type: string
    listTagsForJobMetricsOutput:
      type: object
      properties:
        tags:
          type: array
          items:
            $ref: "#/components/schemas/metricTag"
        nextPageToken:
          type: string
    listTagsForReportMetricsOutput:
      type: object
      properties:
        tags:
          type: array
          items:
            $ref: "#/components/schemas/metricTag"
        nextPageToken:
          type: string
    listTagsForBatchMetricsOutput:
      type: object
      properties:
        tags:
          type: array
          items:
            $ref: "#/components/schemas/metricTag"
        nextPageToken:
          type: string
    batchMetric:
      allOf:
        - $ref: "#/components/schemas/metric"
        - type: object
          properties:
            batchID:
              $ref: "#/components/schemas/batchID"
    listBatchMetricsOutput:
      type: object
      properties:
        batchMetrics:
          type: array
          items:
            $ref: "#/components/schemas/batchMetric"
        nextPageToken:
          type: string
    listReportMetricsOutput:
      type: object
      properties:
        reportMetrics:
          type: array
          items:
            $ref: "#/components/schemas/metric"
        nextPageToken:
          type: string
    metricsDataAndMetricID:
      type: object
      properties:
        metricID:
          $ref: "#/components/schemas/metricID"
        metricsData:
          $ref: "#/components/schemas/jobMetricsData"
    listMetricsDataAndMetricIDOutput:
      type: object
      properties:
        metricsDataAndIDs:
          type: array
          items:
            $ref: "#/components/schemas/metricsDataAndMetricID"
        nextPageToken:
          type: string
    metricsData:
      type: object
      properties:
        dataID:
          $ref: "#/components/schemas/metricsDataID"
        fileLocation:
          $ref: "#/components/schemas/metricsDataLocation"
        name:
          type: string
        metricsDataType:
          $ref: "#/components/schemas/metricsDataType"
        filename:
          nullable: true
          type: string
        orgID:
          $ref: "#/components/schemas/orgID"
        userID:
          $ref: "#/components/schemas/userID"
        metricsDataURL:
          $ref: "#/components/schemas/metricsDataURL"
        creationTimestamp:
          $ref: "#/components/schemas/timestamp"
    jobMetricsData:
      allOf:
        - $ref: "#/components/schemas/metricsData"
        - type: object
          properties:
            jobID:
              $ref: "#/components/schemas/jobID"
    listJobMetricsDataOutput:
      type: object
      properties:
        metricsData:
          type: array
          items:
            $ref: "#/components/schemas/jobMetricsData"
        nextPageToken:
          type: string
    batchMetricsData:
      allOf:
        - $ref: "#/components/schemas/metricsData"
        - type: object
          properties:
            batchID:
              $ref: "#/components/schemas/batchID"
    listBatchMetricsDataOutput:
      type: object
      properties:
        batchMetricsData:
          type: array
          items:
            $ref: "#/components/schemas/batchMetricsData"
        nextPageToken:
          type: string
    batchMetricsDataAndIDs:
      type: object
      properties:
        batchMetricID:
          $ref: "#/components/schemas/metricID"
        batchMetricsData:
          $ref: "#/components/schemas/batchMetricsData"
    listBatchMetricsDataForBatchMetricIDsOutput:
      type: object
      properties:
        batchMetricsDataAndIDs:
          type: array
          items:
            $ref: "#/components/schemas/batchMetricsDataAndIDs"
        nextPageToken:
          type: string
    listReportMetricsDataOutput:
      type: object
      properties:
        reportMetricsData:
          type: array
          items:
            $ref: "#/components/schemas/metricsData"
        nextPageToken:
          type: string
    reportMetricsDataAndIDs:
      type: object
      properties:
        reportMetricID:
          $ref: "#/components/schemas/metricID"
        reportMetricsData:
          $ref: "#/components/schemas/metricsData"
    listReportMetricsDataForReportMetricIDsOutput:
      type: object
      properties:
        reportMetricsDataAndIDs:
          type: array
          items:
            $ref: "#/components/schemas/reportMetricsDataAndIDs"
        nextPageToken:
          type: string
    reportMetricsDataToReportMetric:
      type: object
      properties:
        reportMetricID:
          $ref: "#/components/schemas/metricID"
        reportMetricsDataIDs:
          type: array
          items:
            $ref: "#/components/schemas/metricsDataID"
    metricID:
      type: string
      format: uuid
    metricName:
      type: string
    metricLocation:
      type: string
      format: uri
    metricsDataLocation:
      type: string
      format: uri
    metricsDataID:
      type: string
      format: uuid
    metricValue:
      type: number
      format: double
      nullable: true
    metricURL:
      type: string
      format: uri
    metricsDataURL:
      type: string
      format: uri
    metricStatus:
      type: string
      enum:
        - PASSED
        - FAIL_WARN
        - RAW
        - NOT_APPLICABLE
        - FAIL_BLOCK
        - NO_STATUS_REPORTED
    metricType:
      type: string
      enum:
        - SCALAR
        - COMPOSITE
    metricsDataType:
      type: string
      enum:
        - STANDARD
        - EXTERNAL_FILE
        - VIDEO
    batchStatusHistoryType:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/batchStatus"
        updatedAt:
          $ref: "#/components/schemas/timestamp"
    batchStatusHistory:
      type: array
      items:
        $ref: "#/components/schemas/batchStatusHistoryType"
    jobStatusHistoryType:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/jobStatus"
        updatedAt:
          $ref: "#/components/schemas/timestamp"
    jobStatusHistory:
      type: array
      items:
        $ref: "#/components/schemas/jobStatusHistoryType"
    parameterSweepStatusHistoryType:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/parameterSweepStatus"
        updatedAt:
          $ref: "#/components/schemas/timestamp"
    parameterSweepStatusHistory:
      type: array
      items:
        $ref: "#/components/schemas/parameterSweepStatusHistoryType"
    updateMask:
      type: array
      items:
        type: string
    viewObject:
      type: object
      properties:
        viewSessionID:
          $ref: "#/components/schemas/viewSessionID"
        friendlyName:
          $ref: "#/components/schemas/friendlyName"
        viewTimestamp:
          $ref: "#/components/schemas/timestamp"
        objectCount:
          $ref: "#/components/schemas/objectCount"
        mcapURL:
          $ref: "#/components/schemas/mcapURL"
        viewURL:
          type: string
          format: uri
        userID:
          $ref: "#/components/schemas/userID"
        orgID:
          $ref: "#/components/schemas/orgID"
    listViewObjectsOutput:
      type: object
      properties:
        viewSessions:
          type: array
          items:
            $ref: "#/components/schemas/viewObject"
        nextPageToken:
          type: string
    viewMetadata:
      type: object
      properties:
        objectName:
          $ref: "#/components/schemas/objectName"
        objectType:
          $ref: "#/components/schemas/objectType"
        fileName:
          $ref: "#/components/schemas/fileName"
        lineNumber:
          $ref: "#/components/schemas/lineNumber"
    viewObjectAndMetadata:
      type: object
      properties:
        viewObject:
          $ref: "#/components/schemas/viewObject"
        viewMetadata:
          type: array
          items:
            $ref: "#/components/schemas/viewMetadata"
    viewSessionID:
      type: string
      format: uuid
    viewSessionUpdate:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/viewSessionID"
        mcap:
          description: The URI of the session's MCAP file.
          $ref: "#/components/schemas/mcapURL"
        view:
          description: A link to view the session.
          type: string
          format: uri
    viewUpdateID:
      type: integer
      readOnly: true
    mcapURL:
      type: string
      format: uri
    friendlyName:
      type: string
    objectCount:
      type: integer
      format: int32
    objectName:
      type: string
    objectType:
      type: string
      enum:
        - TYPE_FRAME
        - TYPE_SE3
        - TYPE_SO3
        - TYPE_DCURVE_SE3
        - TYPE_TCURVE_SE3
        - TYPE_TRAJECTORY
        - TYPE_FRAMED_VECTOR
    fileName:
      type: string
    lineNumber:
      type: integer
      format: int32
    projectID:
      type: string
      format: uuid
    createProjectInput:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
    updateProjectFields:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    updateBuildFields:
      type: object
      properties:
        branchID:
          type: string
          format: uuid
        description:
          $ref: "#/components/schemas/buildDescription"
        name:
          $ref: "#/components/schemas/buildName"
    project:
      type: object
      required:
        - projectID
        - name
        - description
        - creationTimestamp
        - userID
        - orgID
        - archived
      properties:
        projectID:
          $ref: "#/components/schemas/projectID"
        name:
          type: string
        description:
          type: string
        creationTimestamp:
          $ref: "#/components/schemas/timestamp"
        userID:
          $ref: "#/components/schemas/userID"
        orgID:
          $ref: "#/components/schemas/orgID"
        archived:
          $ref: "#/components/schemas/archived"
    listProjectsOutput:
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: "#/components/schemas/project"
        nextPageToken:
          type: string
    updateProjectInput:
      type: object
      properties:
        updateMask:
          $ref: "#/components/schemas/updateMask"
        project:
          $ref: "#/components/schemas/updateProjectFields"
    updateBuildInput:
      type: object
      properties:
        updateMask:
          $ref: "#/components/schemas/updateMask"
        build:
          $ref: "#/components/schemas/updateBuildFields"
    updateTaskInput:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/taskStatus"
        workerID:
          type: string
          nullable: true
        output:
          type: string
          nullable: true
        runError:
          $ref: "#/components/schemas/runError"
    branchID:
      type: string
      format: uuid
    branchType:
      type: string
      enum:
        - CHANGE_REQUEST
        - MAIN
        - RELEASE
    createBranchInput:
      type: object
      required:
        - name
        - branchType
      properties:
        name:
          type: string
          minLength: 1
        branchType:
          $ref: "#/components/schemas/branchType"
    branch:
      type: object
      required:
        - branchID
        - name
        - projectID
        - branchType
        - creationTimestamp
        - userID
        - orgID
      properties:
        branchID:
          $ref: "#/components/schemas/branchID"
        name:
          type: string
        projectID:
          $ref: "#/components/schemas/projectID"
        branchType:
          $ref: "#/components/schemas/branchType"
        creationTimestamp:
          $ref: "#/components/schemas/timestamp"
        userID:
          $ref: "#/components/schemas/userID"
        orgID:
          $ref: "#/components/schemas/orgID"
    listBranchesOutput:
      type: object
      properties:
        branches:
          type: array
          items:
            $ref: "#/components/schemas/branch"
        nextPageToken:
          type: string
    buildID:
      type: string
      format: uuid
    build:
      type: object
      required:
        - associatedAccount
        - buildID
        - branchID
        - projectID
        - systemID
        - name
        - description
        - version
        - imageUri
        - buildSpecification
        - creationTimestamp
        - updateTimestamp
        - userID
        - orgID
      properties:
        buildID:
          $ref: "#/components/schemas/buildID"
        branchID:
          $ref: "#/components/schemas/branchID"
        projectID:
          $ref: "#/components/schemas/projectID"
        systemID:
          $ref: "#/components/schemas/systemID"
        description:
          $ref: "#/components/schemas/buildDescription"
        version:
          $ref: "#/components/schemas/buildVersion"
        imageUri:
          $ref: "#/components/schemas/buildImageUri"
        buildSpecification:
          $ref: "#/components/schemas/buildSpecificationOutput"
        creationTimestamp:
          $ref: "#/components/schemas/timestamp"
        updateTimestamp:
          $ref: "#/components/schemas/timestamp"
        associatedAccount:
          $ref: "#/components/schemas/associatedAccount"
        userID:
          $ref: "#/components/schemas/userID"
        orgID:
          $ref: "#/components/schemas/orgID"
        name:
          $ref: "#/components/schemas/buildName"
    createBuildForBranchInput:
      type: object
      required:
        - systemID
        - version
      properties:
        systemID:
          $ref: "#/components/schemas/systemID"
        name:
          $ref: "#/components/schemas/buildName"
        description:
          $ref: "#/components/schemas/buildDescription"
        version:
          $ref: "#/components/schemas/buildVersion"
        imageUri:
          $ref: "#/components/schemas/buildImageUri"
        associatedAccount:
          nullable: true
          $ref: "#/components/schemas/associatedAccount"
    createBuildForSystemInput:
      type: object
      required:
        - branchID
        - version
      properties:
        branchID:
          $ref: "#/components/schemas/branchID"
        name:
          $ref: "#/components/schemas/buildName"
        description:
          $ref: "#/components/schemas/buildDescription"
        version:
          $ref: "#/components/schemas/buildVersion"
        imageUri:
          $ref: "#/components/schemas/buildImageUri"
        buildSpecification:
          $ref: "#/components/schemas/buildSpecificationInput"
        triggeredVia:
          nullable: true
          $ref: "#/components/schemas/triggeredVia"
        associatedAccount:
          nullable: true
          $ref: "#/components/schemas/associatedAccount"
      oneOf:
        - required: [imageUri]
        - required: [buildSpecification]
    listBuildsOutput:
      type: object
      required:
        - builds
        - nextPageToken
        - total
      properties:
        builds:
          type: array
          items:
            $ref: "#/components/schemas/build"
        nextPageToken:
          type: string
        total:
          type: integer
    buildDescription:
      type: string
      description: The description of the build. May be a SHA or commit message.
      deprecated: true
    buildName:
      type: string
      description: The name of the build.
    buildVersion:
      type: string
      minLength: 1
    buildImageUri:
      type: string
    buildSpecificationInput:
      type: string
      format: byte
    buildSpecificationOutput:
      type: string
      description: Build spec in YAML format.
    metricsBuildID:
      type: string
      format: uuid
    metricsSetName:
      nullable: true
      type: string
    createMetricsBuildInput:
      type: object
      required:
        - name
        - version
        - imageUri
      properties:
        name:
          $ref: "#/components/schemas/metricsBuildName"
          minLength: 1
        version:
          $ref: "#/components/schemas/metricsBuildVersion"
          minLength: 1
        imageUri:
          $ref: "#/components/schemas/metricsBuildImageUri"
    metricsBuild:
      type: object
      required:
        - metricsBuildID
        - projectID
        - name
        - version
        - imageUri
        - creationTimestamp
        - userID
        - orgID
      properties:
        metricsBuildID:
          $ref: "#/components/schemas/metricsBuildID"
        projectID:
          $ref: "#/components/schemas/projectID"
        name:
          $ref: "#/components/schemas/metricsBuildName"
        version:
          $ref: "#/components/schemas/metricsBuildVersion"
        imageUri:
          $ref: "#/components/schemas/metricsBuildImageUri"
        creationTimestamp:
          $ref: "#/components/schemas/timestamp"
        userID:
          $ref: "#/components/schemas/userID"
        orgID:
          $ref: "#/components/schemas/orgID"
    listMetricsBuildOutput:
      type: object
      required:
        - metricsBuilds
        - nextPageToken
        - total
      properties:
        metricsBuilds:
          type: array
          items:
            $ref: "#/components/schemas/metricsBuild"
        nextPageToken:
          type: string
        total:
          type: integer
    metricsBuildName:
      type: string
    metricsBuildVersion:
      type: string
    metricsBuildImageUri:
      type: string
    associatedAccount:
      type: string
    triggeredVia:
      type: string
      enum:
        - LOCAL
        - WEBAPP
        - GITLAB
        - GITHUB
    userID:
      type: string
    orgID:
      type: string
    archived:
      type: boolean
    batchTotalJobs:
      type: integer
    systemID:
      type: string
      format: uuid
    jobMetricsStatusCounts:
      type: object
      required:
        - passed
        - raw
        - noStatusReported
        - notApplicable
        - failWarn
        - failBlock
      properties:
        passed:
          type: integer
        raw:
          type: integer
        noStatusReported:
          type: integer
        notApplicable:
          type: integer
        failWarn:
          type: integer
        failBlock:
          type: integer
    batchJobStatusCounts:
      type: object
      required:
        - submitted
        - running
        - succeeded
        - error
        - cancelled
        - metricsQueued
        - metricsRunning
      properties:
        submitted:
          type: integer
        running:
          type: integer
        succeeded:
          type: integer
        error:
          type: integer
        cancelled:
          type: integer
        metricsQueued:
          type: integer
        metricsRunning:
          type: integer
    createSystemInput:
      type: object
      required:
        - name
        - description
        - build_vcpus
        - build_memory_mib
        - build_gpus
        - build_shared_memory_mb
        - metrics_build_vcpus
        - metrics_build_memory_mib
        - metrics_build_gpus
        - metrics_build_shared_memory_mb
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
        build_vcpus:
          type: integer
        build_memory_mib:
          type: integer
        build_gpus:
          type: integer
        build_shared_memory_mb:
          type: integer
        architecture:
          $ref: "#/components/schemas/architecture"
        metrics_build_vcpus:
          type: integer
        metrics_build_memory_mib:
          type: integer
        metrics_build_gpus:
          type: integer
        metrics_build_shared_memory_mb:
          type: integer
    updateSystemInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        build_vcpus:
          type: integer
        build_memory_mib:
          type: integer
        build_gpus:
          type: integer
        build_shared_memory_mb:
          type: integer
        architecture:
          $ref: "#/components/schemas/architecture"
        metrics_build_vcpus:
          type: integer
        metrics_build_memory_mib:
          type: integer
        metrics_build_gpus:
          type: integer
        metrics_build_shared_memory_mb:
          type: integer
    architecture:
      type: string
      enum:
        - AMD64
        - ARM64
    system:
      type: object
      required:
        - systemID
        - projectID
        - name
        - description
        - build_vcpus
        - build_memory_mib
        - build_gpus
        - build_shared_memory_mb
        - architecture
        - metrics_build_vcpus
        - metrics_build_memory_mib
        - metrics_build_gpus
        - metrics_build_shared_memory_mb
        - numBuilds
        - numTestSuites
        - numExperiences
        - numMetricsBuilds
        - numBatches
        - creationTimestamp
        - userID
        - orgID
        - archived
      properties:
        systemID:
          $ref: "#/components/schemas/systemID"
        projectID:
          $ref: "#/components/schemas/projectID"
        name:
          type: string
        description:
          type: string
        build_vcpus:
          type: integer
        build_memory_mib:
          type: integer
        build_gpus:
          type: integer
        build_shared_memory_mb:
          type: integer
        architecture:
          $ref: "#/components/schemas/architecture"
        metrics_build_vcpus:
          type: integer
        metrics_build_memory_mib:
          type: integer
        metrics_build_gpus:
          type: integer
        metrics_build_shared_memory_mb:
          type: integer
        numBuilds:
          type: integer
        numTestSuites:
          type: integer
        numExperiences:
          type: integer
        numMetricsBuilds:
          type: integer
        numBatches:
          type: integer
        creationTimestamp:
          $ref: "#/components/schemas/timestamp"
        userID:
          $ref: "#/components/schemas/userID"
        orgID:
          $ref: "#/components/schemas/orgID"
        archived:
          $ref: "#/components/schemas/archived"
    listSystemsOutput:
      type: object
      properties:
        systems:
          type: array
          items:
            $ref: "#/components/schemas/system"
        nextPageToken:
          type: string
    workflowID:
      type: string
      format: uuid
    workflow:
      type: object
      required:
        - workflowID
        - projectID
        - name
        - description
        - creationTimestamp
        - userID
        - orgID
        - archived
      properties:
        workflowID:
          $ref: "#/components/schemas/workflowID"
        projectID:
          $ref: "#/components/schemas/projectID"
        name:
          type: string
        description:
          type: string
        ciWorkflowLink:
          type: string
          nullable: true
        creationTimestamp:
          $ref: "#/components/schemas/timestamp"
        updateTimestamp:
          $ref: "#/components/schemas/timestamp"
        userID:
          $ref: "#/components/schemas/userID"
        orgID:
          $ref: "#/components/schemas/orgID"
        archived:
          $ref: "#/components/schemas/archived"
        lastRunTimestamp:
          $ref: "#/components/schemas/timestamp"
    workflowSuiteInput:
      type: object
      required:
        - testSuiteID
        - enabled
      properties:
        testSuiteID:
          $ref: "#/components/schemas/testSuiteID"
        enabled:
          $ref: "#/components/schemas/enabled"
    listWorkflowSuitesOutput:
      type: object
      required:
        - workflowSuites
      properties:
        workflowSuites:
          type: array
          items:
            $ref: "#/components/schemas/workflowSuiteOutput"
    workflowSuiteOutput:
      type: object
      required:
        - workflowID
        - testSuite
        - enabled
      properties:
        workflowID:
          $ref: "#/components/schemas/workflowID"
        testSuite:
          $ref: "#/components/schemas/testSuite"
        enabled:
          $ref: "#/components/schemas/enabled"
    enabled:
      type: boolean
    listWorkflowsOutput:
      type: object
      required:
        - workflows
        - nextPageToken
        - total
      properties:
        workflows:
          type: array
          items:
            $ref: "#/components/schemas/workflow"
        nextPageToken:
          type: string
        total:
          type: integer
    createWorkflowInput:
      type: object
      required:
        - name
        - description
        - workflowSuites
      properties:
        name:
          type: string
        description:
          type: string
        ciWorkflowLink:
          type: string
        workflowSuites:
          type: array
          items:
            $ref: "#/components/schemas/workflowSuiteInput"
    updateWorkflowInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        ciWorkflowLink:
          type: string
          nullable: true
    createWorkflowSuiteInput:
      type: object
      required:
        - testSuiteID
        - enabled
      properties:
        testSuiteID:
          $ref: "#/components/schemas/testSuiteID"
        enabled:
          $ref: "#/components/schemas/enabled"
    createWorkflowSuiteOutput:
      type: object
      required:
        - workflowID
        - testSuiteID
        - enabled
      properties:
        workflowID:
          $ref: "#/components/schemas/workflowID"
        testSuiteID:
          $ref: "#/components/schemas/testSuiteID"
        enabled:
          $ref: "#/components/schemas/enabled"
    createWorkflowSuitesInput:
      type: object
      required:
        - workflowSuites
      properties:
        workflowSuites:
          type: array
          items:
            $ref: "#/components/schemas/createWorkflowSuiteInput"
    createWorkflowSuitesOutput:
      type: object
      required:
        - workflowSuites
      properties:
        workflowSuites:
          type: array
          items:
            $ref: "#/components/schemas/createWorkflowSuiteOutput"
    updateWorkflowSuiteInput:
      type: object
      required:
        - testSuiteID
        - enabled
      properties:
        testSuiteID:
          $ref: "#/components/schemas/testSuiteID"
        enabled:
          $ref: "#/components/schemas/enabled"
    updateWorkflowSuitesInput:
      type: object
      required:
        - workflowSuites
      properties:
        workflowSuites:
          type: array
          items:
            $ref: "#/components/schemas/updateWorkflowSuiteInput"
    updateWorkflowSuiteOutput:
      type: object
      required:
        - testSuiteID
        - workflowID
        - enabled
      properties:
        testSuiteID:
          $ref: "#/components/schemas/testSuiteID"
        workflowID:
          $ref: "#/components/schemas/workflowID"
        enabled:
          $ref: "#/components/schemas/enabled"
    updateWorkflowSuitesOutput:
      type: object
      required:
        - workflowSuites
      properties:
        workflowSuites:
          type: array
          items:
            $ref: "#/components/schemas/updateWorkflowSuiteOutput"
    deleteWorkflowSuitesInput:
      type: object
      required:
        - testSuiteIDs
      properties:
        testSuiteIDs:
          type: array
          items:
            $ref: "#/components/schemas/testSuiteID"
    getWorkflowSuiteOutput:
      type: object
      required:
        - testSuiteID
        - enabled
      properties:
        testSuiteID:
          $ref: "#/components/schemas/testSuiteID"
        enabled:
          $ref: "#/components/schemas/enabled"
    workflowRunID:
      type: string
      format: uuid
    workflowRun:
      type: object
      required:
        - workflowRunID
        - workflowID
        - creationTimestamp
        - buildID
        - userID
        - orgID
        - workflowRunTestSuites
      properties:
        workflowRunID:
          $ref: "#/components/schemas/workflowRunID"
        workflowID:
          $ref: "#/components/schemas/workflowID"
        creationTimestamp:
          $ref: "#/components/schemas/timestamp"
        buildID:
          $ref: "#/components/schemas/buildID"
        userID:
          $ref: "#/components/schemas/userID"
        orgID:
          $ref: "#/components/schemas/orgID"
        associatedAccount:
          nullable: true
          $ref: "#/components/schemas/associatedAccount"
        triggeredVia:
          nullable: true
          $ref: "#/components/schemas/triggeredVia"
        workflowRunTestSuites:
          type: array
          items:
            $ref: "#/components/schemas/workflowRunTestSuite"
    workflowRunTestSuite:
      type: object
      required:
        - testSuiteID
        - batchID
      properties:
        batchID:
          $ref: "#/components/schemas/batchID"
        testSuiteID:
          $ref: "#/components/schemas/testSuiteID"
    listWorkflowRunsOutput:
      type: object
      required:
        - workflowRuns
        - nextPageToken
        - total
      properties:
        workflowRuns:
          type: array
          items:
            $ref: "#/components/schemas/workflowRun"
        nextPageToken:
          type: string
        total:
          type: integer
    createWorkflowRunInput:
      type: object
      required:
        - buildID
      properties:
        buildID:
          $ref: "#/components/schemas/buildID"
        parameters:
          nullable: true
          $ref: "#/components/schemas/batchParameters"
        associatedAccount:
          nullable: true
          $ref: "#/components/schemas/associatedAccount"
        triggeredVia:
          nullable: true
          $ref: "#/components/schemas/triggeredVia"
        poolLabels:
          nullable: true
          $ref: "#/components/schemas/poolLabels"
        allowableFailurePercent:
          nullable: true
          type: integer
    listUsersOutput:
      type: array
      items:
        type: string
      example:
        - joe-smith
        - foobar123
        - bobs-github-username
    parameterSweepID:
      type: string
      format: uuid
    parameterSweepStatus:
      type: string
      enum:
        - SUBMITTED
        - RUNNING
        - SUCCEEDED
        - ERROR
        - CANCELLED
    sweepParameter:
      type: object
      properties:
        name:
          type: string
        values:
          type: array
          items:
            type: string
    parameterSweep:
      type: object
      required:
        - associatedAccount
      properties:
        parameterSweepID:
          $ref: "#/components/schemas/parameterSweepID"
        projectID:
          $ref: "#/components/schemas/projectID"
        name:
          type: string
        status:
          $ref: "#/components/schemas/parameterSweepStatus"
        statusHistory:
          $ref: "#/components/schemas/parameterSweepStatusHistory"
        lastUpdatedTimestamp:
          $ref: "#/components/schemas/timestamp"
        creationTimestamp:
          $ref: "#/components/schemas/timestamp"
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/sweepParameter"
        batches:
          type: array
          items:
            $ref: "#/components/schemas/batchID"
        userID:
          $ref: "#/components/schemas/userID"
        orgID:
          $ref: "#/components/schemas/orgID"
        associatedAccount:
          $ref: "#/components/schemas/associatedAccount"
    listParameterSweepsOutput:
      type: object
      properties:
        sweeps:
          type: array
          items:
            $ref: "#/components/schemas/parameterSweep"
        nextPageToken:
          type: string
    parameterSweepInput:
      type: object
      properties:
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/sweepParameter"
        experienceIDs:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/experienceID"
        experienceTagIDs:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/experienceTagID"
        experienceNames:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/experienceName"
        experienceTagNames:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/experienceTagName"
        buildID:
          $ref: "#/components/schemas/buildID"
        metricsBuildID:
          nullable: true
          $ref: "#/components/schemas/metricsBuildID"
        metricsSetName:
          $ref: "#/components/schemas/metricsSetName"
        associatedAccount:
          nullable: true
          $ref: "#/components/schemas/associatedAccount"
        triggeredVia:
          nullable: true
          $ref: "#/components/schemas/triggeredVia"
        poolLabels:
          nullable: true
          $ref: "#/components/schemas/poolLabels"
        allowableFailurePercent:
          nullable: true
          type: integer
    reportID:
      type: string
      format: uuid
    report:
      type: object
      required:
        - reportID
        - projectID
        - testSuiteID
        - testSuiteRevision
        - respectRevisionBoundary
        - branchID
        - startTimestamp
        - endTimestamp
        - name
        - status
        - statusHistory
        - lastUpdatedTimestamp
        - creationTimestamp
        - metricsBuildID
        - metricsSetName
        - userID
        - orgID
        - associatedAccount
        - outputLocation
        - metricsStatus
      properties:
        reportID:
          $ref: "#/components/schemas/reportID"
        projectID:
          $ref: "#/components/schemas/projectID"
        testSuiteID:
          $ref: "#/components/schemas/testSuiteID"
        testSuiteRevision:
          $ref: "#/components/schemas/testSuiteRevision"
        respectRevisionBoundary:
          $ref: "#/components/schemas/respectRevisionBoundary"
        branchID:
          $ref: "#/components/schemas/branchID"
        metricsBuildID:
          $ref: "#/components/schemas/metricsBuildID"
        metricsSetName:
          $ref: "#/components/schemas/metricsSetName"
        startTimestamp:
          $ref: "#/components/schemas/timestamp"
        endTimestamp:
          $ref: "#/components/schemas/timestamp"
        name:
          $ref: "#/components/schemas/name"
        outputLocation:
          type: string
        status:
          $ref: "#/components/schemas/reportStatus"
        statusHistory:
          $ref: "#/components/schemas/reportStatusHistory"
        lastUpdatedTimestamp:
          $ref: "#/components/schemas/timestamp"
        creationTimestamp:
          $ref: "#/components/schemas/timestamp"
        userID:
          $ref: "#/components/schemas/userID"
        orgID:
          $ref: "#/components/schemas/orgID"
        associatedAccount:
          $ref: "#/components/schemas/associatedAccount"
        triggeredVia:
          $ref: "#/components/schemas/triggeredVia"
        metricsStatus:
          $ref: "#/components/schemas/metricStatus"
    respectRevisionBoundary:
      type: boolean
    reportLog:
      type: object
      required:
        - logID
        - fileName
        - fileSize
        - checksum
        - creationTimestamp
        - location
        - logOutputLocation
        - logType
        - userID
        - orgID
      properties:
        logID:
          required: true
          $ref: "#/components/schemas/logID"
        fileName:
          $ref: "#/components/schemas/fileName"
        fileSize:
          $ref: "#/components/schemas/fileSize"
        checksum:
          $ref: "#/components/schemas/checksum"
        creationTimestamp:
          $ref: "#/components/schemas/timestamp"
        location:
          $ref: "#/components/schemas/logLocation"
        logOutputLocation:
          type: string
          format: uri
        logType:
          $ref: "#/components/schemas/logType"
        userID:
          $ref: "#/components/schemas/userID"
        orgID:
          $ref: "#/components/schemas/orgID"
    name:
      type: string
    listReportsOutput:
      type: object
      properties:
        reports:
          type: array
          items:
            $ref: "#/components/schemas/report"
        nextPageToken:
          type: string
        total:
          type: integer
    reportInput:
      type: object
      required:
        - testSuiteID
        - branchID
        - startTimestamp
        - metricsBuildID
      properties:
        testSuiteID:
          $ref: "#/components/schemas/testSuiteID"
        testSuiteRevision:
          nullable: true
          $ref: "#/components/schemas/testSuiteRevision"
        respectRevisionBoundary:
          nullable: true
          $ref: "#/components/schemas/respectRevisionBoundary"
        branchID:
          $ref: "#/components/schemas/branchID"
        metricsBuildID:
          nullable: true
          $ref: "#/components/schemas/metricsBuildID"
        metricsSetName:
          nullable: true
          $ref: "#/components/schemas/metricsSetName"
        startTimestamp:
          $ref: "#/components/schemas/timestamp"
        endTimestamp:
          nullable: true
          $ref: "#/components/schemas/timestamp"
        name:
          nullable: true
          $ref: "#/components/schemas/name"
        associatedAccount:
          nullable: true
          $ref: "#/components/schemas/associatedAccount"
        triggeredVia:
          nullable: true
          $ref: "#/components/schemas/triggeredVia"
        poolLabels:
          nullable: true
          $ref: "#/components/schemas/poolLabels"
    reportStatus:
      type: string
      enum:
        - SUBMITTED
        - RUNNING
        - ERROR
        - SUCCEEDED
      x-enum-varnames:
        - ReportStatusSUBMITTED
        - ReportStatusRUNNING
        - ReportStatusERROR
        - ReportStatusSUCCEEDED
    reportStatusHistoryType:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/reportStatus"
        updatedAt:
          $ref: "#/components/schemas/timestamp"
    reportStatusHistory:
      type: array
      items:
        $ref: "#/components/schemas/reportStatusHistoryType"
    listReportLogsOutput:
      type: object
      properties:
        logs:
          type: array
          items:
            $ref: "#/components/schemas/reportLog"
        nextPageToken:
          type: string
    getQuotaOutput:
      type: object
      properties:
        orgID:
          $ref: "#/components/schemas/orgID"
        availableTokens:
          type: integer
          format: int32
        maxTokens:
          type: integer
          format: int32
        secondsUntilRefresh:
          type: integer
          format: int32
    poolLabels:
      type: array
      items:
        $ref: "#/components/schemas/poolLabel"
    poolLabel:
      type: string
    batchType:
      type: string
      enum:
        - NORMAL
        - DEBUG_EXPERIENCE
        - LITE
    executionError:
      type: object
      properties:
        errorCode:
          type: string
          description: Standardized error code (e.g., UNKNOWN_ERROR, NONZERO_EXIT_CODE)
        errorText:
          type: string
          description: Error text
        runCounter:
          type: integer
          description: Run counter of the error
        parentID:
          type: string
          format: uuid
          description: ID of the parent object (e.g., job ID, batch ID)
        parentType:
          type: string
          description: Type of the parent object (e.g., JOB, BATCH)
        metadata:
          type: object
          description: Error metadata
      required:
        - errorCode
    containerName:
      type: string
    debugExperienceInput:
      type: object
      properties:
        # users may provide EITHER batchID or (testSuite, buildID)
        batchID:
          $ref: "#/components/schemas/batchID"
        testSuiteID:
          $ref: "#/components/schemas/testSuiteID"
        buildID:
          $ref: "#/components/schemas/buildID"
        containers:
          type: array
          items:
            $ref: "#/components/schemas/containerName"
        poolLabels:
          $ref: "#/components/schemas/poolLabels"
    debugExperienceOutput:
      type: object
      properties:
        batchID:
          $ref: "#/components/schemas/batchID"
        namespace:
          type: string
        clusterEndpoint:
          type: string
        clusterToken:
          type: string
        clusterCAData:
          type: string
    runCounter:
      type: integer
    rerunBatchInput:
      type: object
      required:
        - syncBatch
      properties:
        jobIDs:
          type: array
          items:
            $ref: "#/components/schemas/jobID"
        syncBatch:
          type: boolean
          default: false
    rerunBatchOutput:
      type: object
      properties:
        batchID:
          $ref: "#/components/schemas/batchID"
        runCounter:
          $ref: "#/components/schemas/runCounter"
        jobIDs:
          type: array
          items:
            $ref: "#/components/schemas/jobID"
    listBatchErrorsOutput:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: "#/components/schemas/executionError"
    experienceSyncExperience:
      type: object
      properties:
        experienceID:
          $ref: "#/components/schemas/experienceID"
        name:
          $ref: "#/components/schemas/experienceName"
        description:
          type: string
        locations:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/experienceTagName"
        systems:
          type: array
          items:
            type: string
        containerTimeoutSeconds:
          type: integer
          format: int32
        profile:
          $ref: "#/components/schemas/profile"
        environmentVariables:
          type: array
          items:
            $ref: "#/components/schemas/environmentVariable"
        cacheExempt:
          type: boolean
        archived:
          type: boolean
      required:
        - name
        - description
        - locations
        - tags
        - systems
        - archived
    experienceSyncTestSuite:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/testSuiteName"
        experiences:
          type: array
          items:
            $ref: "#/components/schemas/experienceName"
      required:
        - name
        - experiences
    experienceSyncConfig:
      type: object
      properties:
        experiences:
          type: array
          items:
            $ref: '#/components/schemas/experienceSyncExperience'
        managedTestSuites:
          type: array
          items:
            $ref: '#/components/schemas/experienceSyncTestSuite'
        managedExperienceTags:
          type: array
          items:
            $ref: "#/components/schemas/experienceTagName"
      required:
        - experiences
        - managedTestSuites
        - managedExperienceTags
  parameters:
    pageSize:
      name: pageSize
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
    pageSizeUnbounded:
      name: pageSize
      in: query
      schema:
        type: integer
    pageToken:
      name: pageToken
      in: query
      schema:
        type: string
    orderBy:
      name: orderBy
      in: query
      schema:
        type: string
  responses:
    badRequest:
      description: The request contained one or more errors.
    conflict:
      description: The request could not be completed; it may be attempting to modify something that is currently being modified.
    unauthenticated:
      description: Access token is missing or invalid.
    forbidden:
      description: The user does not have adequate privileges.
    alreadyExists:
      description: The resource already exists.
    notFound:
      description: The resource could not be found.
    insufficientQuota:
      description: Current quota is insufficient for this operation
