components:
  parameters:
    orderBy:
      in: query
      name: orderBy
      schema:
        type: string
    pageSize:
      in: query
      name: pageSize
      schema:
        maximum: 100
        minimum: 1
        type: integer
    pageSizeUnbounded:
      in: query
      name: pageSize
      schema:
        type: integer
    pageToken:
      in: query
      name: pageToken
      schema:
        type: string
  responses:
    alreadyExists:
      description: The resource already exists.
    badRequest:
      description: The request contained one or more errors.
    conflict:
      description: The request could not be completed; it may be attempting to modify
        something that is currently being modified.
    forbidden:
      description: The user does not have adequate privileges.
    insufficientQuota:
      description: Current quota is insufficient for this operation
    notFound:
      description: The resource could not be found.
    unauthenticated:
      description: Access token is missing or invalid.
  schemas:
    addSuitesToExperiencesInput:
      allOf:
      - $ref: '#/components/schemas/selectExperiencesInput'
      - required:
        - testSuiteIDs
      - properties:
          testSuiteIDs:
            items:
              $ref: '#/components/schemas/testSuiteID'
            type: array
        type: object
    addTagsToExperiencesInput:
      allOf:
      - $ref: '#/components/schemas/selectExperiencesInput'
      - required:
        - experienceTagIDs
      - properties:
          experienceTagIDs:
            items:
              $ref: '#/components/schemas/experienceTagID'
            type: array
        type: object
    archived:
      type: boolean
    associatedAccount:
      type: string
    batch:
      properties:
        adhocTestSuite:
          type: boolean
        allowable_failure_percent:
          type: integer
        associatedAccount:
          $ref: '#/components/schemas/associatedAccount'
        batchID:
          $ref: '#/components/schemas/batchID'
        batchMetricsStatus:
          $ref: '#/components/schemas/metricStatus'
        batchType:
          $ref: '#/components/schemas/batchType'
        branchID:
          $ref: '#/components/schemas/branchID'
        buildID:
          $ref: '#/components/schemas/buildID'
        creationTimestamp:
          $ref: '#/components/schemas/timestamp'
        description:
          type: string
        executionError:
          $ref: '#/components/schemas/executionError'
        executionErrors:
          items:
            $ref: '#/components/schemas/executionError'
          nullable: true
          type: array
        friendlyName:
          $ref: '#/components/schemas/friendlyName'
        jobMetricsStatusCounts:
          $ref: '#/components/schemas/jobMetricsStatusCounts'
        jobStatusCounts:
          $ref: '#/components/schemas/batchJobStatusCounts'
        jobsMetricsStatus:
          $ref: '#/components/schemas/metricStatus'
        lastUpdatedTimestamp:
          $ref: '#/components/schemas/timestamp'
        metricsBuildID:
          $ref: '#/components/schemas/metricsBuildID'
        metricsSetName:
          $ref: '#/components/schemas/metricsSetName'
        orgID:
          $ref: '#/components/schemas/orgID'
        overallMetricsStatus:
          $ref: '#/components/schemas/metricStatus'
        parameters:
          $ref: '#/components/schemas/batchParameters'
        poolLabels:
          $ref: '#/components/schemas/poolLabels'
        projectID:
          $ref: '#/components/schemas/projectID'
        status:
          $ref: '#/components/schemas/batchStatus'
        statusHistory:
          $ref: '#/components/schemas/batchStatusHistory'
        systemID:
          $ref: '#/components/schemas/systemID'
        testSuiteID:
          $ref: '#/components/schemas/testSuiteID'
        testSuiteRevision:
          $ref: '#/components/schemas/testSuiteRevision'
        totalJobs:
          $ref: '#/components/schemas/batchTotalJobs'
        userID:
          $ref: '#/components/schemas/userID'
      required:
      - associatedAccount
      type: object
    batchID:
      format: uuid
      type: string
    batchInput:
      properties:
        allowableFailurePercent:
          nullable: true
          type: integer
        associatedAccount:
          $ref: '#/components/schemas/associatedAccount'
        batchName:
          $ref: '#/components/schemas/name'
        buildID:
          $ref: '#/components/schemas/buildID'
        excludedExperienceIDs:
          items:
            $ref: '#/components/schemas/excludedExperienceID'
          nullable: true
          type: array
        experienceIDs:
          items:
            $ref: '#/components/schemas/experienceID'
          nullable: true
          type: array
        experienceNames:
          items:
            $ref: '#/components/schemas/experienceName'
          nullable: true
          type: array
        experienceTagIDs:
          items:
            $ref: '#/components/schemas/experienceTagID'
          nullable: true
          type: array
        experienceTagNames:
          items:
            $ref: '#/components/schemas/experienceTagName'
          nullable: true
          type: array
        filters:
          $ref: '#/components/schemas/experienceFilterInput'
        metricsBuildID:
          $ref: '#/components/schemas/metricsBuildID'
        metricsSetName:
          $ref: '#/components/schemas/metricsSetName'
        parameters:
          $ref: '#/components/schemas/batchParameters'
        poolLabels:
          $ref: '#/components/schemas/poolLabels'
        triggeredVia:
          $ref: '#/components/schemas/triggeredVia'
      type: object
    batchJobStatusCounts:
      properties:
        cancelled:
          type: integer
        error:
          type: integer
        metricsQueued:
          type: integer
        metricsRunning:
          type: integer
        running:
          type: integer
        submitted:
          type: integer
        succeeded:
          type: integer
      required:
      - submitted
      - running
      - succeeded
      - error
      - cancelled
      - metricsQueued
      - metricsRunning
      type: object
    batchLog:
      allOf:
      - $ref: '#/components/schemas/log'
      - properties:
          batchID:
            $ref: '#/components/schemas/batchID'
        type: object
    batchMetric:
      allOf:
      - $ref: '#/components/schemas/metric'
      - properties:
          batchID:
            $ref: '#/components/schemas/batchID'
        type: object
    batchMetricsData:
      allOf:
      - $ref: '#/components/schemas/metricsData'
      - properties:
          batchID:
            $ref: '#/components/schemas/batchID'
        type: object
    batchMetricsDataAndIDs:
      properties:
        batchMetricID:
          $ref: '#/components/schemas/metricID'
        batchMetricsData:
          $ref: '#/components/schemas/batchMetricsData'
      type: object
    batchParameters:
      additionalProperties:
        type: string
      type: object
    batchStatus:
      enum:
      - SUBMITTED
      - EXPERIENCES_RUNNING
      - BATCH_METRICS_QUEUED
      - BATCH_METRICS_RUNNING
      - ERROR
      - SUCCEEDED
      - CANCELLED
      type: string
    batchStatusHistory:
      items:
        $ref: '#/components/schemas/batchStatusHistoryType'
      type: array
    batchStatusHistoryType:
      properties:
        status:
          $ref: '#/components/schemas/batchStatus'
        updatedAt:
          $ref: '#/components/schemas/timestamp'
      type: object
    batchSuggestionsOutput:
      properties:
        lastPassingOnBranch:
          allOf:
          - $ref: '#/components/schemas/batch'
          nullable: true
        lastPassingOnMain:
          allOf:
          - $ref: '#/components/schemas/batch'
          nullable: true
        latestOnBranch:
          allOf:
          - $ref: '#/components/schemas/batch'
          nullable: true
        latestOnMain:
          allOf:
          - $ref: '#/components/schemas/batch'
          nullable: true
      required:
      - lastPassingOnMain
      - latestOnMain
      - lastPassingOnBranch
      - latestOnBranch
      type: object
    batchTotalJobs:
      type: integer
    batchType:
      enum:
      - NORMAL
      - DEBUG_EXPERIENCE
      type: string
    branch:
      properties:
        branchID:
          $ref: '#/components/schemas/branchID'
        branchType:
          $ref: '#/components/schemas/branchType'
        creationTimestamp:
          $ref: '#/components/schemas/timestamp'
        name:
          type: string
        orgID:
          $ref: '#/components/schemas/orgID'
        projectID:
          $ref: '#/components/schemas/projectID'
        userID:
          $ref: '#/components/schemas/userID'
      required:
      - branchID
      - name
      - projectID
      - branchType
      - creationTimestamp
      - userID
      - orgID
      type: object
    branchID:
      format: uuid
      type: string
    branchType:
      enum:
      - CHANGE_REQUEST
      - MAIN
      - RELEASE
      type: string
    build:
      properties:
        associatedAccount:
          $ref: '#/components/schemas/associatedAccount'
        branchID:
          $ref: '#/components/schemas/branchID'
        buildID:
          $ref: '#/components/schemas/buildID'
        buildSpecification:
          $ref: '#/components/schemas/buildSpecificationOutput'
        creationTimestamp:
          $ref: '#/components/schemas/timestamp'
        description:
          $ref: '#/components/schemas/buildDescription'
        imageUri:
          $ref: '#/components/schemas/buildImageUri'
        longDescription:
          $ref: '#/components/schemas/buildLongDescription'
        name:
          $ref: '#/components/schemas/buildName'
        orgID:
          $ref: '#/components/schemas/orgID'
        projectID:
          $ref: '#/components/schemas/projectID'
        systemID:
          $ref: '#/components/schemas/systemID'
        userID:
          $ref: '#/components/schemas/userID'
        version:
          $ref: '#/components/schemas/buildVersion'
      required:
      - associatedAccount
      - buildID
      - branchID
      - projectID
      - systemID
      - name
      - description
      - longDescription
      - version
      - imageUri
      - buildSpecification
      - creationTimestamp
      - userID
      - orgID
      type: object
    buildDescription:
      deprecated: true
      description: '[DEPRECATED] This field was previously used to set the build''s
        name. If both ''description'' and ''name'' are provided, ''name'' will take
        precedence. In a future version, this field will be repurposed to store the
        build''s description.'
      type: string
    buildID:
      format: uuid
      type: string
    buildImageUri:
      type: string
    buildLongDescription:
      deprecated: true
      description: '[DEPRECATED] This field is temporarily being used to set the build''s
        description. In a future version, the `description` field will be used instead.'
      type: string
    buildName:
      description: The name of the build. This replaces the previous usage of 'description'.
      type: string
    buildSpecificationInput:
      format: byte
      type: string
    buildSpecificationOutput:
      description: Build spec in YAML format.
      type: string
    buildVersion:
      minLength: 1
      type: string
    checksum:
      type: string
    compareBatchTest:
      properties:
        experienceID:
          $ref: '#/components/schemas/experienceID'
        experienceName:
          $ref: '#/components/schemas/experienceName'
        fromTest:
          $ref: '#/components/schemas/compareBatchTestDetails'
        toTest:
          $ref: '#/components/schemas/compareBatchTestDetails'
      required:
      - experienceID
      - experienceName
      - fromTest
      - toTest
      type: object
    compareBatchTestDetails:
      nullable: true
      properties:
        jobID:
          $ref: '#/components/schemas/jobID'
        numMetrics:
          description: The number of failblock/failwarn/passing metrics (based on
            job's status). Otherwise this will be null
          nullable: true
          type: integer
        status:
          $ref: '#/components/schemas/conflatedJobStatus'
      required:
      - jobID
      - status
      - numMetrics
      type: object
    compareBatchesOutput:
      properties:
        nextPageToken:
          type: string
        tests:
          items:
            $ref: '#/components/schemas/compareBatchTest'
          type: array
        total:
          type: integer
      required:
      - total
      - nextPageToken
      - tests
      type: object
    compareBatchesStatusFilter:
      enum:
      - BOTH_PASSING
      - BOTH_FAILING
      - ONE_FAILING
      type: string
    conflatedJobStatus:
      enum:
      - QUEUED
      - RUNNING
      - ERROR
      - CANCELLED
      - BLOCKER
      - WARNING
      - PASSED
      type: string
    createBranchInput:
      properties:
        branchType:
          $ref: '#/components/schemas/branchType'
        name:
          minLength: 1
          type: string
      required:
      - name
      - branchType
      type: object
    createBuildForBranchInput:
      oneOf:
      - required:
        - imageUri
      - required:
        - buildSpecification
      properties:
        associatedAccount:
          $ref: '#/components/schemas/associatedAccount'
        buildSpecification:
          $ref: '#/components/schemas/buildSpecificationInput'
        description:
          $ref: '#/components/schemas/buildDescription'
        imageUri:
          $ref: '#/components/schemas/buildImageUri'
        longDescription:
          $ref: '#/components/schemas/buildLongDescription'
        name:
          $ref: '#/components/schemas/buildName'
        systemID:
          $ref: '#/components/schemas/systemID'
        version:
          $ref: '#/components/schemas/buildVersion'
      required:
      - systemID
      - version
      type: object
    createBuildForSystemInput:
      oneOf:
      - required:
        - imageUri
      - required:
        - buildSpecification
      properties:
        associatedAccount:
          $ref: '#/components/schemas/associatedAccount'
        branchID:
          $ref: '#/components/schemas/branchID'
        buildSpecification:
          $ref: '#/components/schemas/buildSpecificationInput'
        description:
          $ref: '#/components/schemas/buildDescription'
        imageUri:
          $ref: '#/components/schemas/buildImageUri'
        longDescription:
          $ref: '#/components/schemas/buildLongDescription'
        name:
          $ref: '#/components/schemas/buildName'
        triggeredVia:
          $ref: '#/components/schemas/triggeredVia'
        version:
          $ref: '#/components/schemas/buildVersion'
      required:
      - branchID
      - version
      type: object
    createExperienceInput:
      properties:
        containerTimeoutSeconds:
          format: int32
          type: integer
        description:
          type: string
        environmentVariables:
          items:
            $ref: '#/components/schemas/environmentVariable'
          type: array
        experienceTagIDs:
          items:
            $ref: '#/components/schemas/experienceTagID'
          type: array
        location:
          deprecated: true
          description: '[DEPRECATED] This field was previously used to define an experience''s
            location. Experiences can now be defined with multiple locations, using
            the locations field. This field will be removed in a later release.'
          minLength: 1
          type: string
        locations:
          items:
            minLength: 1
            type: string
          type: array
        name:
          $ref: '#/components/schemas/experienceName'
        profile:
          $ref: '#/components/schemas/profile'
        systemIDs:
          items:
            $ref: '#/components/schemas/systemID'
          type: array
      required:
      - name
      - description
      type: object
    createExperienceTagInput:
      properties:
        description:
          type: string
        name:
          $ref: '#/components/schemas/experienceTagName'
      required:
      - name
      - description
      type: object
    createMetricsBuildInput:
      properties:
        imageUri:
          $ref: '#/components/schemas/metricsBuildImageUri'
        name:
          $ref: '#/components/schemas/metricsBuildName'
        version:
          $ref: '#/components/schemas/metricsBuildVersion'
      required:
      - name
      - version
      - imageUri
      type: object
    createProjectInput:
      properties:
        description:
          type: string
        name:
          minLength: 1
          type: string
      required:
      - name
      - description
      type: object
    createSystemInput:
      properties:
        build_gpus:
          type: integer
        build_memory_mib:
          type: integer
        build_shared_memory_mb:
          type: integer
        build_vcpus:
          type: integer
        description:
          type: string
        metrics_build_gpus:
          type: integer
        metrics_build_memory_mib:
          type: integer
        metrics_build_shared_memory_mb:
          type: integer
        metrics_build_vcpus:
          type: integer
        name:
          minLength: 1
          type: string
      required:
      - name
      - description
      - build_vcpus
      - build_memory_mib
      - build_gpus
      - build_shared_memory_mb
      - metrics_build_vcpus
      - metrics_build_memory_mib
      - metrics_build_gpus
      - metrics_build_shared_memory_mb
      type: object
    createTestSuiteInput:
      properties:
        allExperiences:
          type: boolean
        description:
          $ref: '#/components/schemas/testSuiteDescription'
        excludedExperienceIDs:
          items:
            $ref: '#/components/schemas/excludedExperienceID'
          type: array
        experiences:
          items:
            $ref: '#/components/schemas/experienceID'
          type: array
        filters:
          $ref: '#/components/schemas/experienceFilterInput'
        metricsBuildID:
          $ref: '#/components/schemas/metricsBuildID'
        metricsSetName:
          $ref: '#/components/schemas/metricsSetName'
        name:
          $ref: '#/components/schemas/testSuiteName'
        showOnSummary:
          type: boolean
        summaryReferenceDate:
          $ref: '#/components/schemas/timestamp'
        systemID:
          $ref: '#/components/schemas/systemID'
      required:
      - name
      - description
      - systemID
      - experiences
      type: object
    customMetric:
      properties:
        name:
          example: Planning time
          type: string
        unit:
          example: Seconds
          type: string
        value:
          example: 0.01253
          format: double
          type: number
      required:
      - name
      - value
      type: object
    debugExperienceInput:
      properties:
        batchID:
          $ref: '#/components/schemas/batchID'
        buildID:
          $ref: '#/components/schemas/buildID'
        poolLabels:
          $ref: '#/components/schemas/poolLabels'
        testSuiteID:
          $ref: '#/components/schemas/testSuiteID'
      type: object
    debugExperienceOutput:
      properties:
        batchID:
          $ref: '#/components/schemas/batchID'
        clusterCAData:
          type: string
        clusterEndpoint:
          type: string
        clusterToken:
          type: string
        namespace:
          type: string
      type: object
    environmentVariable:
      properties:
        name:
          type: string
        value:
          type: string
      required:
      - name
      - value
      type: object
    event:
      properties:
        creationTimestamp:
          $ref: '#/components/schemas/timestamp'
        description:
          type: string
        eventID:
          $ref: '#/components/schemas/eventID'
        metricsIDs:
          items:
            $ref: '#/components/schemas/metricID'
          type: array
        name:
          type: string
        status:
          $ref: '#/components/schemas/metricStatus'
        tags:
          $ref: '#/components/schemas/eventTags'
        timestamp:
          $ref: '#/components/schemas/timestamp'
        timestampType:
          $ref: '#/components/schemas/eventTimestampType'
      required:
      - eventID
      - name
      - description
      - creationTimestamp
      - timestampType
      - timestamp
      - tags
      - status
      - metricsIDs
      type: object
    eventID:
      format: uuid
      type: string
    eventTags:
      example:
      - tag1
      - tag2
      items:
        type: string
      type: array
    eventTimestampType:
      enum:
      - ABSOLUTE
      - RELATIVE
      type: string
    excludedExperienceID:
      format: uuid
      type: string
    executionError:
      properties:
        errorCode:
          description: Standardized error code (e.g., UNKNOWN_ERROR, NONZERO_EXIT_CODE)
          type: string
        metadata:
          description: Error metadata
          type: object
      required:
      - errorCode
      type: object
    executionStep:
      enum:
      - EXPERIENCE
      - METRICS
      - BATCH_METRICS
      - REPORT
      type: string
    experience:
      properties:
        archived:
          type: boolean
        containerTimeoutSeconds:
          format: int32
          type: integer
        creationTimestamp:
          $ref: '#/components/schemas/timestamp'
        description:
          type: string
        environmentVariables:
          items:
            $ref: '#/components/schemas/environmentVariable'
          type: array
        experienceID:
          $ref: '#/components/schemas/experienceID'
        location:
          deprecated: true
          description: '[DEPRECATED] This field was previously used to report an experience''s
            location. Experiences can now be defined with multiple locations, this
            field will display the first location; this field will be removed in a
            future version.'
          type: string
        locations:
          items:
            type: string
          type: array
        name:
          $ref: '#/components/schemas/experienceName'
        orgID:
          $ref: '#/components/schemas/orgID'
        profile:
          $ref: '#/components/schemas/profile'
        projectID:
          $ref: '#/components/schemas/projectID'
        userID:
          $ref: '#/components/schemas/userID'
      required:
      - archived
      - experienceID
      - projectID
      - name
      - description
      - location
      - locations
      - containerTimeoutSeconds
      - profile
      - environmentVariables
      - creationTimestamp
      - userID
      - orgID
      type: object
    experienceFilterInput:
      properties:
        name:
          description: Filter experiences by name
          type: string
        search:
          description: A search query. Supports searching by tag_id
          example: tag_id IN ("71b96a67-9990-426b-993e-0f3d9c6bbe48")
          type: string
        text:
          description: Filter experiences by a text string on name and description
          type: string
      type: object
    experienceID:
      format: uuid
      type: string
    experienceLocation:
      properties:
        location:
          format: uri
          type: string
      type: object
    experienceLocationContents:
      properties:
        isCloud:
          type: boolean
        objectCount:
          type: integer
        objects:
          items:
            type: string
          type: array
      type: object
    experienceName:
      minLength: 1
      type: string
    experienceTag:
      properties:
        creationTimestamp:
          $ref: '#/components/schemas/timestamp'
        description:
          type: string
        experienceTagID:
          $ref: '#/components/schemas/experienceTagID'
        name:
          $ref: '#/components/schemas/experienceTagName'
        orgID:
          $ref: '#/components/schemas/orgID'
        projectID:
          $ref: '#/components/schemas/projectID'
        userID:
          $ref: '#/components/schemas/userID'
      required:
      - experienceTagID
      - projectID
      - name
      - description
      - creationTimestamp
      - userID
      - orgID
      type: object
    experienceTagID:
      format: uuid
      type: string
    experienceTagName:
      type: string
    fileName:
      type: string
    fileSize:
      format: int64
      type: integer
    firstBuildMetric:
      description: The first batch metric in the sequence, and some info about how
        it has changed
      nullable: true
      properties:
        delta:
          format: double
          type: number
        time:
          $ref: '#/components/schemas/timestamp'
        value:
          example: -120.234
          format: double
          type: number
      required:
      - time
      - value
      - delta
      type: object
    friendlyName:
      type: string
    getQuotaOutput:
      properties:
        availableTokens:
          format: int32
          type: integer
        maxTokens:
          format: int32
          type: integer
        orgID:
          $ref: '#/components/schemas/orgID'
        secondsUntilRefresh:
          format: int32
          type: integer
      type: object
    job:
      properties:
        batchID:
          $ref: '#/components/schemas/batchID'
        branchID:
          $ref: '#/components/schemas/branchID'
        buildID:
          $ref: '#/components/schemas/buildID'
        conflatedStatus:
          $ref: '#/components/schemas/conflatedJobStatus'
        creationTimestamp:
          $ref: '#/components/schemas/timestamp'
        description:
          type: string
        executionError:
          $ref: '#/components/schemas/executionError'
        executionErrors:
          items:
            $ref: '#/components/schemas/executionError'
          nullable: true
          type: array
        experienceEnvironmentVariables:
          items:
            $ref: '#/components/schemas/environmentVariable'
          type: array
        experienceID:
          $ref: '#/components/schemas/experienceID'
        experienceName:
          $ref: '#/components/schemas/experienceName'
        experienceProfile:
          type: string
        jobID:
          $ref: '#/components/schemas/jobID'
        jobMetricsStatus:
          $ref: '#/components/schemas/metricStatus'
        jobStatus:
          $ref: '#/components/schemas/jobStatus'
        lastUpdatedTimestamp:
          $ref: '#/components/schemas/timestamp'
        orgID:
          $ref: '#/components/schemas/orgID'
        outputLocation:
          type: string
        parameters:
          $ref: '#/components/schemas/batchParameters'
        projectID:
          $ref: '#/components/schemas/projectID'
        statusHistory:
          $ref: '#/components/schemas/jobStatusHistory'
        systemID:
          $ref: '#/components/schemas/systemID'
        userID:
          $ref: '#/components/schemas/userID'
      type: object
    jobID:
      format: uuid
      type: string
    jobLog:
      allOf:
      - $ref: '#/components/schemas/log'
      - properties:
          jobID:
            $ref: '#/components/schemas/jobID'
        type: object
    jobMetric:
      allOf:
      - $ref: '#/components/schemas/metric'
      - properties:
          batchID:
            $ref: '#/components/schemas/batchID'
          jobID:
            $ref: '#/components/schemas/jobID'
        type: object
    jobMetricsData:
      allOf:
      - $ref: '#/components/schemas/metricsData'
      - properties:
          jobID:
            $ref: '#/components/schemas/jobID'
        type: object
    jobMetricsStatusCounts:
      properties:
        failBlock:
          type: integer
        failWarn:
          type: integer
        noStatusReported:
          type: integer
        notApplicable:
          type: integer
        passed:
          type: integer
        raw:
          type: integer
      required:
      - passed
      - raw
      - noStatusReported
      - notApplicable
      - failWarn
      - failBlock
      type: object
    jobStatus:
      enum:
      - SUBMITTED
      - EXPERIENCE_RUNNING
      - METRICS_QUEUED
      - METRICS_RUNNING
      - ERROR
      - SUCCEEDED
      - CANCELLED
      type: string
    jobStatusHistory:
      items:
        $ref: '#/components/schemas/jobStatusHistoryType'
      type: array
    jobStatusHistoryType:
      properties:
        status:
          $ref: '#/components/schemas/jobStatus'
        updatedAt:
          $ref: '#/components/schemas/timestamp'
      type: object
    keyMetric:
      nullable: true
      properties:
        firstBuildMetric:
          $ref: '#/components/schemas/firstBuildMetric'
        latestValue:
          example: 150
          format: double
          type: number
        name:
          example: Meal Planning Time
          type: string
        performance:
          items:
            $ref: '#/components/schemas/keyMetricPerformancePoint'
          type: array
        target:
          $ref: '#/components/schemas/keyMetricTarget'
        unit:
          example: Seconds
          nullable: true
          type: string
      required:
      - name
      - target
      - firstBuildMetric
      - latestValue
      - unit
      - performance
      type: object
    keyMetricPerformancePoint:
      properties:
        time:
          $ref: '#/components/schemas/timestamp'
        value:
          format: double
          type: number
      required:
      - time
      - value
      type: object
    keyMetricTarget:
      description: The optional desired target for this metric
      nullable: true
      properties:
        operator:
          example: <
          type: string
        value:
          example: 150.1
          format: double
          type: number
      required:
      - operator
      - value
      type: object
    lineNumber:
      format: int32
      type: integer
    listAllJobsOutput:
      properties:
        jobs:
          items:
            $ref: '#/components/schemas/job'
          type: array
        nextPageToken:
          type: string
        total:
          type: integer
      type: object
    listBatchLogsOutput:
      properties:
        logs:
          items:
            $ref: '#/components/schemas/batchLog'
          type: array
        nextPageToken:
          type: string
      type: object
    listBatchMetricsDataForBatchMetricIDsOutput:
      properties:
        batchMetricsDataAndIDs:
          items:
            $ref: '#/components/schemas/batchMetricsDataAndIDs'
          type: array
        nextPageToken:
          type: string
      type: object
    listBatchMetricsDataOutput:
      properties:
        batchMetricsData:
          items:
            $ref: '#/components/schemas/batchMetricsData'
          type: array
        nextPageToken:
          type: string
      type: object
    listBatchMetricsOutput:
      properties:
        batchMetrics:
          items:
            $ref: '#/components/schemas/batchMetric'
          type: array
        nextPageToken:
          type: string
      type: object
    listBatchesOutput:
      properties:
        batches:
          items:
            $ref: '#/components/schemas/batch'
          type: array
        nextPageToken:
          type: string
        total:
          type: integer
      type: object
    listBranchesOutput:
      properties:
        branches:
          items:
            $ref: '#/components/schemas/branch'
          type: array
        nextPageToken:
          type: string
      type: object
    listBuildsOutput:
      properties:
        builds:
          items:
            $ref: '#/components/schemas/build'
          type: array
        nextPageToken:
          type: string
        total:
          type: integer
      required:
      - builds
      - nextPageToken
      - total
      type: object
    listExperienceTagsOutput:
      properties:
        experienceTags:
          items:
            $ref: '#/components/schemas/experienceTag'
          type: array
        nextPageToken:
          type: string
      type: object
    listExperiencesOutput:
      properties:
        experiences:
          items:
            $ref: '#/components/schemas/experience'
          type: array
        nextPageToken:
          type: string
        total:
          type: integer
      type: object
    listJobEventTagsOutput:
      properties:
        eventTags:
          items:
            type: string
          type: array
        nextPageToken:
          type: string
      type: object
    listJobEventsOutput:
      properties:
        events:
          items:
            $ref: '#/components/schemas/event'
          type: array
        nextPageToken:
          type: string
      type: object
    listJobLogsOutput:
      properties:
        logs:
          items:
            $ref: '#/components/schemas/jobLog'
          type: array
        nextPageToken:
          type: string
        total:
          type: integer
      type: object
    listJobMetricsDataOutput:
      properties:
        metricsData:
          items:
            $ref: '#/components/schemas/jobMetricsData'
          type: array
        nextPageToken:
          type: string
      type: object
    listJobMetricsOutput:
      properties:
        metrics:
          items:
            $ref: '#/components/schemas/jobMetric'
          type: array
        nextPageToken:
          type: string
      type: object
    listJobsOutput:
      properties:
        jobs:
          items:
            $ref: '#/components/schemas/job'
          type: array
        nextPageToken:
          type: string
        total:
          type: integer
      type: object
    listMetricsBuildOutput:
      properties:
        metricsBuilds:
          items:
            $ref: '#/components/schemas/metricsBuild'
          type: array
        nextPageToken:
          type: string
        total:
          type: integer
      required:
      - metricsBuilds
      - nextPageToken
      - total
      type: object
    listMetricsDataAndMetricIDOutput:
      properties:
        metricsDataAndIDs:
          items:
            $ref: '#/components/schemas/metricsDataAndMetricID'
          type: array
        nextPageToken:
          type: string
      type: object
    listParameterSweepsOutput:
      properties:
        nextPageToken:
          type: string
        sweeps:
          items:
            $ref: '#/components/schemas/parameterSweep'
          type: array
      type: object
    listProjectsOutput:
      properties:
        nextPageToken:
          type: string
        projects:
          items:
            $ref: '#/components/schemas/project'
          type: array
      type: object
    listReportLogsOutput:
      properties:
        logs:
          items:
            $ref: '#/components/schemas/reportLog'
          type: array
        nextPageToken:
          type: string
      type: object
    listReportMetricsDataForReportMetricIDsOutput:
      properties:
        nextPageToken:
          type: string
        reportMetricsDataAndIDs:
          items:
            $ref: '#/components/schemas/reportMetricsDataAndIDs'
          type: array
      type: object
    listReportMetricsDataOutput:
      properties:
        nextPageToken:
          type: string
        reportMetricsData:
          items:
            $ref: '#/components/schemas/metricsData'
          type: array
      type: object
    listReportMetricsOutput:
      properties:
        nextPageToken:
          type: string
        reportMetrics:
          items:
            $ref: '#/components/schemas/metric'
          type: array
      type: object
    listReportsOutput:
      properties:
        nextPageToken:
          type: string
        reports:
          items:
            $ref: '#/components/schemas/report'
          type: array
        total:
          type: integer
      type: object
    listSystemsOutput:
      properties:
        nextPageToken:
          type: string
        systems:
          items:
            $ref: '#/components/schemas/system'
          type: array
      type: object
    listTagsForBatchMetricsOutput:
      properties:
        nextPageToken:
          type: string
        tags:
          items:
            $ref: '#/components/schemas/metricTag'
          type: array
      type: object
    listTagsForJobMetricsOutput:
      properties:
        nextPageToken:
          type: string
        tags:
          items:
            $ref: '#/components/schemas/metricTag'
          type: array
      type: object
    listTagsForReportMetricsOutput:
      properties:
        nextPageToken:
          type: string
        tags:
          items:
            $ref: '#/components/schemas/metricTag'
          type: array
      type: object
    listTestSuiteOutput:
      properties:
        nextPageToken:
          type: string
        testSuites:
          items:
            $ref: '#/components/schemas/testSuite'
          type: array
        total:
          type: integer
      required:
      - testSuites
      - nextPageToken
      - total
      type: object
    listTestSuiteRevisionsOutput:
      properties:
        nextPageToken:
          type: string
        testSuites:
          items:
            $ref: '#/components/schemas/testSuite'
          type: array
      type: object
    listUsersOutput:
      example:
      - joe-smith
      - foobar123
      - bobs-github-username
      items:
        type: string
      type: array
    listViewObjectsOutput:
      properties:
        nextPageToken:
          type: string
        viewSessions:
          items:
            $ref: '#/components/schemas/viewObject'
          type: array
      type: object
    log:
      properties:
        checksum:
          $ref: '#/components/schemas/checksum'
        creationTimestamp:
          $ref: '#/components/schemas/timestamp'
        executionStep:
          $ref: '#/components/schemas/executionStep'
        fileName:
          $ref: '#/components/schemas/fileName'
        fileSize:
          $ref: '#/components/schemas/fileSize'
        location:
          $ref: '#/components/schemas/logLocation'
        logID:
          $ref: '#/components/schemas/logID'
        logOutputLocation:
          format: uri
          type: string
        logType:
          $ref: '#/components/schemas/logType'
        orgID:
          $ref: '#/components/schemas/orgID'
        userID:
          $ref: '#/components/schemas/userID'
      type: object
    logID:
      format: uuid
      type: string
    logLocation:
      format: uri
      type: string
    logType:
      enum:
      - OTHER_LOG
      - METRICS_OUTPUT_LOG
      - CONTAINER_LOG
      - EXECUTION_LOG
      - MCAP_LOG
      - MP4_LOG
      - ARCHIVE_LOG
      - FOXGLOVE_MCAP_LOG
      - RERUN_IO_LOG
      - ERROR_LOG
      - SERVICE_LOG
      - EMISSIONS_LOG
      type: string
    mcapURL:
      format: uri
      type: string
    metric:
      properties:
        creationTimestamp:
          $ref: '#/components/schemas/timestamp'
        dataIDs:
          items:
            $ref: '#/components/schemas/metricsDataID'
          type: array
        eventMetric:
          description: true if this metric is for an event
          type: boolean
        fileLocation:
          $ref: '#/components/schemas/metricLocation'
        metricID:
          $ref: '#/components/schemas/metricID'
        metricURL:
          $ref: '#/components/schemas/metricURL'
        name:
          $ref: '#/components/schemas/metricName'
        orgID:
          $ref: '#/components/schemas/orgID'
        projectID:
          $ref: '#/components/schemas/projectID'
        status:
          $ref: '#/components/schemas/metricStatus'
        type:
          $ref: '#/components/schemas/metricType'
        unit:
          nullable: true
          type: string
        userID:
          $ref: '#/components/schemas/userID'
        value:
          $ref: '#/components/schemas/metricValue'
      type: object
    metricID:
      format: uuid
      type: string
    metricLocation:
      format: uri
      type: string
    metricName:
      type: string
    metricStatus:
      enum:
      - PASSED
      - FAIL_WARN
      - RAW
      - NOT_APPLICABLE
      - FAIL_BLOCK
      - NO_STATUS_REPORTED
      type: string
    metricTag:
      properties:
        creationTimestamp:
          format: date-time
          readOnly: true
          type: string
        metricID:
          format: uuid
          readOnly: true
          type: string
        name:
          type: string
        tagID:
          $ref: '#/components/schemas/tagID'
        value:
          type: string
      required:
      - tagID
      - name
      - value
      - creationTimestamp
      type: object
    metricType:
      enum:
      - SCALAR
      - COMPOSITE
      type: string
    metricURL:
      format: uri
      type: string
    metricValue:
      format: double
      nullable: true
      type: number
    metricsBuild:
      properties:
        creationTimestamp:
          $ref: '#/components/schemas/timestamp'
        imageUri:
          $ref: '#/components/schemas/metricsBuildImageUri'
        metricsBuildID:
          $ref: '#/components/schemas/metricsBuildID'
        name:
          $ref: '#/components/schemas/metricsBuildName'
        orgID:
          $ref: '#/components/schemas/orgID'
        projectID:
          $ref: '#/components/schemas/projectID'
        userID:
          $ref: '#/components/schemas/userID'
        version:
          $ref: '#/components/schemas/metricsBuildVersion'
      required:
      - metricsBuildID
      - projectID
      - name
      - version
      - imageUri
      - creationTimestamp
      - userID
      - orgID
      type: object
    metricsBuildID:
      format: uuid
      type: string
    metricsBuildImageUri:
      type: string
    metricsBuildName:
      type: string
    metricsBuildVersion:
      type: string
    metricsData:
      properties:
        creationTimestamp:
          $ref: '#/components/schemas/timestamp'
        dataID:
          $ref: '#/components/schemas/metricsDataID'
        fileLocation:
          $ref: '#/components/schemas/metricsDataLocation'
        filename:
          nullable: true
          type: string
        metricsDataType:
          $ref: '#/components/schemas/metricsDataType'
        metricsDataURL:
          $ref: '#/components/schemas/metricsDataURL'
        name:
          type: string
        orgID:
          $ref: '#/components/schemas/orgID'
        userID:
          $ref: '#/components/schemas/userID'
      type: object
    metricsDataAndMetricID:
      properties:
        metricID:
          $ref: '#/components/schemas/metricID'
        metricsData:
          $ref: '#/components/schemas/jobMetricsData'
      type: object
    metricsDataID:
      format: uuid
      type: string
    metricsDataLocation:
      format: uri
      type: string
    metricsDataType:
      enum:
      - STANDARD
      - EXTERNAL_FILE
      type: string
    metricsDataURL:
      format: uri
      type: string
    metricsSetName:
      nullable: true
      type: string
    mutateSystemsToExperienceInput:
      allOf:
      - $ref: '#/components/schemas/selectExperiencesInput'
      - required:
        - systemIDs
      - properties:
          systemIDs:
            items:
              $ref: '#/components/schemas/systemID'
            type: array
        type: object
    name:
      type: string
    objectCount:
      format: int32
      type: integer
    objectName:
      type: string
    objectType:
      enum:
      - TYPE_FRAME
      - TYPE_SE3
      - TYPE_SO3
      - TYPE_DCURVE_SE3
      - TYPE_TCURVE_SE3
      - TYPE_TRAJECTORY
      - TYPE_FRAMED_VECTOR
      type: string
    orgID:
      type: string
    parameterSweep:
      properties:
        associatedAccount:
          $ref: '#/components/schemas/associatedAccount'
        batches:
          items:
            $ref: '#/components/schemas/batchID'
          type: array
        creationTimestamp:
          $ref: '#/components/schemas/timestamp'
        lastUpdatedTimestamp:
          $ref: '#/components/schemas/timestamp'
        name:
          type: string
        orgID:
          $ref: '#/components/schemas/orgID'
        parameterSweepID:
          $ref: '#/components/schemas/parameterSweepID'
        parameters:
          items:
            $ref: '#/components/schemas/sweepParameter'
          type: array
        projectID:
          $ref: '#/components/schemas/projectID'
        status:
          $ref: '#/components/schemas/parameterSweepStatus'
        statusHistory:
          $ref: '#/components/schemas/parameterSweepStatusHistory'
        userID:
          $ref: '#/components/schemas/userID'
      required:
      - associatedAccount
      type: object
    parameterSweepID:
      format: uuid
      type: string
    parameterSweepInput:
      properties:
        allowableFailurePercent:
          nullable: true
          type: integer
        associatedAccount:
          $ref: '#/components/schemas/associatedAccount'
        buildID:
          $ref: '#/components/schemas/buildID'
        experienceIDs:
          items:
            $ref: '#/components/schemas/experienceID'
          nullable: true
          type: array
        experienceNames:
          items:
            $ref: '#/components/schemas/experienceName'
          nullable: true
          type: array
        experienceTagIDs:
          items:
            $ref: '#/components/schemas/experienceTagID'
          nullable: true
          type: array
        experienceTagNames:
          items:
            $ref: '#/components/schemas/experienceTagName'
          nullable: true
          type: array
        metricsBuildID:
          $ref: '#/components/schemas/metricsBuildID'
        metricsSetName:
          $ref: '#/components/schemas/metricsSetName'
        parameters:
          items:
            $ref: '#/components/schemas/sweepParameter'
          type: array
        poolLabels:
          $ref: '#/components/schemas/poolLabels'
        triggeredVia:
          $ref: '#/components/schemas/triggeredVia'
      type: object
    parameterSweepStatus:
      enum:
      - SUBMITTED
      - RUNNING
      - SUCCEEDED
      - ERROR
      - CANCELLED
      type: string
    parameterSweepStatusHistory:
      items:
        $ref: '#/components/schemas/parameterSweepStatusHistoryType'
      type: array
    parameterSweepStatusHistoryType:
      properties:
        status:
          $ref: '#/components/schemas/parameterSweepStatus'
        updatedAt:
          $ref: '#/components/schemas/timestamp'
      type: object
    poolLabel:
      type: string
    poolLabels:
      items:
        $ref: '#/components/schemas/poolLabel'
      type: array
    profile:
      type: string
    project:
      properties:
        archived:
          $ref: '#/components/schemas/archived'
        creationTimestamp:
          $ref: '#/components/schemas/timestamp'
        description:
          type: string
        name:
          type: string
        orgID:
          $ref: '#/components/schemas/orgID'
        projectID:
          $ref: '#/components/schemas/projectID'
        userID:
          $ref: '#/components/schemas/userID'
      required:
      - projectID
      - name
      - description
      - creationTimestamp
      - userID
      - orgID
      - archived
      type: object
    projectID:
      format: uuid
      type: string
    referenceBatchSummary:
      nullable: true
      properties:
        fixedTests:
          format: int64
          type: integer
        newIssues:
          format: int64
          type: integer
        newTests:
          format: int64
          type: integer
      required:
      - fixedTests
      - newTests
      - newIssues
      type: object
    report:
      properties:
        associatedAccount:
          $ref: '#/components/schemas/associatedAccount'
        branchID:
          $ref: '#/components/schemas/branchID'
        creationTimestamp:
          $ref: '#/components/schemas/timestamp'
        endTimestamp:
          $ref: '#/components/schemas/timestamp'
        lastUpdatedTimestamp:
          $ref: '#/components/schemas/timestamp'
        metricsBuildID:
          $ref: '#/components/schemas/metricsBuildID'
        metricsSetName:
          $ref: '#/components/schemas/metricsSetName'
        metricsStatus:
          $ref: '#/components/schemas/metricStatus'
        name:
          $ref: '#/components/schemas/name'
        orgID:
          $ref: '#/components/schemas/orgID'
        outputLocation:
          type: string
        projectID:
          $ref: '#/components/schemas/projectID'
        reportID:
          $ref: '#/components/schemas/reportID'
        respectRevisionBoundary:
          $ref: '#/components/schemas/respectRevisionBoundary'
        startTimestamp:
          $ref: '#/components/schemas/timestamp'
        status:
          $ref: '#/components/schemas/reportStatus'
        statusHistory:
          $ref: '#/components/schemas/reportStatusHistory'
        testSuiteID:
          $ref: '#/components/schemas/testSuiteID'
        testSuiteRevision:
          $ref: '#/components/schemas/testSuiteRevision'
        triggeredVia:
          $ref: '#/components/schemas/triggeredVia'
        userID:
          $ref: '#/components/schemas/userID'
      required:
      - reportID
      - projectID
      - testSuiteID
      - testSuiteRevision
      - respectRevisionBoundary
      - branchID
      - startTimestamp
      - endTimestamp
      - name
      - status
      - statusHistory
      - lastUpdatedTimestamp
      - creationTimestamp
      - metricsBuildID
      - metricsSetName
      - userID
      - orgID
      - associatedAccount
      - outputLocation
      - metricsStatus
      type: object
    reportID:
      format: uuid
      type: string
    reportInput:
      properties:
        associatedAccount:
          $ref: '#/components/schemas/associatedAccount'
        branchID:
          $ref: '#/components/schemas/branchID'
        endTimestamp:
          $ref: '#/components/schemas/timestamp'
        metricsBuildID:
          $ref: '#/components/schemas/metricsBuildID'
        metricsSetName:
          $ref: '#/components/schemas/metricsSetName'
        name:
          $ref: '#/components/schemas/name'
        poolLabels:
          $ref: '#/components/schemas/poolLabels'
        respectRevisionBoundary:
          $ref: '#/components/schemas/respectRevisionBoundary'
        startTimestamp:
          $ref: '#/components/schemas/timestamp'
        testSuiteID:
          $ref: '#/components/schemas/testSuiteID'
        testSuiteRevision:
          $ref: '#/components/schemas/testSuiteRevision'
        triggeredVia:
          $ref: '#/components/schemas/triggeredVia'
      required:
      - testSuiteID
      - branchID
      - startTimestamp
      - metricsBuildID
      type: object
    reportLog:
      properties:
        checksum:
          $ref: '#/components/schemas/checksum'
        creationTimestamp:
          $ref: '#/components/schemas/timestamp'
        fileName:
          $ref: '#/components/schemas/fileName'
        fileSize:
          $ref: '#/components/schemas/fileSize'
        location:
          $ref: '#/components/schemas/logLocation'
        logID:
          $ref: '#/components/schemas/logID'
        logOutputLocation:
          format: uri
          type: string
        logType:
          $ref: '#/components/schemas/logType'
        orgID:
          $ref: '#/components/schemas/orgID'
        userID:
          $ref: '#/components/schemas/userID'
      required:
      - logID
      - fileName
      - fileSize
      - checksum
      - creationTimestamp
      - location
      - logOutputLocation
      - logType
      - userID
      - orgID
      type: object
    reportMetricsDataAndIDs:
      properties:
        reportMetricID:
          $ref: '#/components/schemas/metricID'
        reportMetricsData:
          $ref: '#/components/schemas/metricsData'
      type: object
    reportMetricsDataToReportMetric:
      properties:
        reportMetricID:
          $ref: '#/components/schemas/metricID'
        reportMetricsDataIDs:
          items:
            $ref: '#/components/schemas/metricsDataID'
          type: array
      type: object
    reportStatus:
      enum:
      - SUBMITTED
      - RUNNING
      - ERROR
      - SUCCEEDED
      type: string
      x-enum-varnames:
      - ReportStatusSUBMITTED
      - ReportStatusRUNNING
      - ReportStatusERROR
      - ReportStatusSUCCEEDED
    reportStatusHistory:
      items:
        $ref: '#/components/schemas/reportStatusHistoryType'
      type: array
    reportStatusHistoryType:
      properties:
        status:
          $ref: '#/components/schemas/reportStatus'
        updatedAt:
          $ref: '#/components/schemas/timestamp'
      type: object
    rerunBatchInput:
      properties:
        jobIDs:
          items:
            $ref: '#/components/schemas/jobID'
          type: array
      type: object
    rerunBatchOutput:
      properties:
        batchID:
          $ref: '#/components/schemas/batchID'
        jobIDs:
          items:
            $ref: '#/components/schemas/jobID'
          type: array
        runCounter:
          $ref: '#/components/schemas/runCounter'
      type: object
    respectRevisionBoundary:
      type: boolean
    reviseTestSuiteInput:
      properties:
        adhoc:
          type: boolean
        allExperiences:
          type: boolean
        description:
          $ref: '#/components/schemas/testSuiteDescription'
        excludedExperienceIDs:
          items:
            $ref: '#/components/schemas/excludedExperienceID'
          type: array
        experiences:
          items:
            $ref: '#/components/schemas/experienceID'
          type: array
        filters:
          $ref: '#/components/schemas/experienceFilterInput'
        metricsBuildID:
          $ref: '#/components/schemas/metricsBuildID'
        metricsSetName:
          $ref: '#/components/schemas/metricsSetName'
        name:
          $ref: '#/components/schemas/testSuiteName'
        show_on_summary:
          type: boolean
        systemID:
          $ref: '#/components/schemas/systemID'
        updateMetricsBuild:
          type: boolean
      required:
      - updateMetricsBuild
      type: object
    runCounter:
      type: integer
    selectExperiencesInput:
      properties:
        allExperiences:
          type: boolean
        experiences:
          items:
            $ref: '#/components/schemas/experienceID'
          type: array
        filters:
          $ref: '#/components/schemas/experienceFilterInput'
      type: object
    sweepParameter:
      properties:
        name:
          type: string
        values:
          items:
            type: string
          type: array
      type: object
    system:
      properties:
        archived:
          $ref: '#/components/schemas/archived'
        build_gpus:
          type: integer
        build_memory_mib:
          type: integer
        build_shared_memory_mb:
          type: integer
        build_vcpus:
          type: integer
        creationTimestamp:
          $ref: '#/components/schemas/timestamp'
        description:
          type: string
        metrics_build_gpus:
          type: integer
        metrics_build_memory_mib:
          type: integer
        metrics_build_shared_memory_mb:
          type: integer
        metrics_build_vcpus:
          type: integer
        name:
          type: string
        numBatches:
          type: integer
        numBuilds:
          type: integer
        numExperiences:
          type: integer
        numMetricsBuilds:
          type: integer
        numTestSuites:
          type: integer
        orgID:
          $ref: '#/components/schemas/orgID'
        projectID:
          $ref: '#/components/schemas/projectID'
        systemID:
          $ref: '#/components/schemas/systemID'
        userID:
          $ref: '#/components/schemas/userID'
      required:
      - systemID
      - projectID
      - name
      - description
      - build_vcpus
      - build_memory_mib
      - build_gpus
      - build_shared_memory_mb
      - metrics_build_vcpus
      - metrics_build_memory_mib
      - metrics_build_gpus
      - metrics_build_shared_memory_mb
      - numBuilds
      - numTestSuites
      - numExperiences
      - numMetricsBuilds
      - numBatches
      - creationTimestamp
      - userID
      - orgID
      - archived
      type: object
    systemID:
      format: uuid
      type: string
    tagID:
      format: uuid
      readOnly: true
      type: string
    testSuite:
      properties:
        archived:
          type: boolean
        creationTimestamp:
          $ref: '#/components/schemas/timestamp'
        description:
          $ref: '#/components/schemas/testSuiteDescription'
        experiences:
          items:
            $ref: '#/components/schemas/experienceID'
          type: array
        metricsBuildID:
          $ref: '#/components/schemas/metricsBuildID'
        metricsSetName:
          $ref: '#/components/schemas/metricsSetName'
        name:
          $ref: '#/components/schemas/testSuiteName'
        orgID:
          $ref: '#/components/schemas/orgID'
        projectID:
          $ref: '#/components/schemas/projectID'
        showOnSummary:
          type: boolean
        summaryReferenceDate:
          $ref: '#/components/schemas/timestamp'
        systemID:
          $ref: '#/components/schemas/systemID'
        testSuiteID:
          $ref: '#/components/schemas/testSuiteID'
        testSuiteRevision:
          $ref: '#/components/schemas/testSuiteRevision'
        userID:
          $ref: '#/components/schemas/userID'
      required:
      - archived
      - testSuiteID
      - testSuiteRevision
      - name
      - description
      - projectID
      - systemID
      - experiences
      - userID
      - orgID
      - creationTimestamp
      - showOnSummary
      type: object
    testSuiteBatchInput:
      properties:
        allowableFailurePercent:
          nullable: true
          type: integer
        associatedAccount:
          $ref: '#/components/schemas/associatedAccount'
        batchName:
          $ref: '#/components/schemas/name'
        buildID:
          $ref: '#/components/schemas/buildID'
        parameters:
          $ref: '#/components/schemas/batchParameters'
        poolLabels:
          $ref: '#/components/schemas/poolLabels'
        triggeredVia:
          $ref: '#/components/schemas/triggeredVia'
      required:
      - buildID
      type: object
    testSuiteBatchSummaryJobResults:
      properties:
        batchCreationTimestamp:
          $ref: '#/components/schemas/timestamp'
        batchID:
          $ref: '#/components/schemas/batchID'
        blocker:
          format: int64
          type: integer
        buildCreationTimestamp:
          $ref: '#/components/schemas/timestamp'
        buildID:
          $ref: '#/components/schemas/buildID'
        cancelled:
          format: int64
          type: integer
        error:
          format: int64
          type: integer
        metrics:
          items:
            $ref: '#/components/schemas/customMetric'
          type: array
        passed:
          format: int64
          type: integer
        queued:
          format: int64
          type: integer
        running:
          format: int64
          type: integer
        total:
          format: int64
          type: integer
        warning:
          format: int64
          type: integer
      required:
      - batchID
      - batchCreationTimestamp
      - buildID
      - buildCreationTimestamp
      - metrics
      - total
      - queued
      - running
      - error
      - cancelled
      - blocker
      - warning
      - passed
    testSuiteDescription:
      type: string
    testSuiteID:
      format: uuid
      type: string
    testSuiteName:
      minLength: 1
      type: string
    testSuiteRevision:
      format: int32
      type: integer
    testSuiteSummary:
      properties:
        batches:
          items:
            $ref: '#/components/schemas/testSuiteBatchSummaryJobResults'
          type: array
        branchID:
          $ref: '#/components/schemas/branchID'
        keyMetric:
          $ref: '#/components/schemas/keyMetric'
        name:
          $ref: '#/components/schemas/testSuiteName'
        projectID:
          $ref: '#/components/schemas/projectID'
        referenceBatch:
          $ref: '#/components/schemas/testSuiteBatchSummaryJobResults'
        referenceBatchSummary:
          $ref: '#/components/schemas/referenceBatchSummary'
        reportID:
          $ref: '#/components/schemas/reportID'
        summary:
          properties:
            fixedTests:
              format: int64
              type: integer
            newIssues:
              format: int64
              type: integer
            newTests:
              format: int64
              type: integer
          required:
          - fixedTests
          - newTests
          - newIssues
          type: object
        systemID:
          $ref: '#/components/schemas/systemID'
        testSuiteDescription:
          $ref: '#/components/schemas/testSuiteDescription'
        testSuiteID:
          $ref: '#/components/schemas/testSuiteID'
        testSuiteRevision:
          $ref: '#/components/schemas/testSuiteRevision'
      required:
      - name
      - testSuiteID
      - testSuiteRevision
      - testSuiteDescription
      - projectID
      - systemID
      - branchID
      - reportID
      - keyMetric
      - referenceBatchSummary
      - summary
      - batches
      type: object
    testSuiteSummaryOutput:
      properties:
        nextPageToken:
          type: string
        testSuites:
          items:
            $ref: '#/components/schemas/testSuiteSummary'
          type: array
      required:
      - testSuites
      - nextPageToken
      type: object
    timestamp:
      format: date-time
      type: string
    triggeredVia:
      enum:
      - LOCAL
      - WEBAPP
      - GITLAB
      - GITHUB
      type: string
    updateBatchInput:
      properties:
        description:
          type: string
      required:
      - description
      type: object
    updateBuildFields:
      properties:
        branchID:
          format: uuid
          type: string
        description:
          $ref: '#/components/schemas/buildDescription'
        longDescription:
          $ref: '#/components/schemas/buildLongDescription'
        name:
          $ref: '#/components/schemas/buildName'
      type: object
    updateBuildInput:
      properties:
        build:
          $ref: '#/components/schemas/updateBuildFields'
        updateMask:
          $ref: '#/components/schemas/updateMask'
      type: object
    updateEventInput:
      properties:
        description:
          type: string
      required:
      - description
      type: object
    updateExperienceFields:
      properties:
        containerTimeoutSeconds:
          format: int32
          type: integer
        description:
          type: string
        environmentVariables:
          items:
            $ref: '#/components/schemas/environmentVariable'
          type: array
        experienceTagIDs:
          items:
            $ref: '#/components/schemas/experienceTagID'
          type: array
        location:
          deprecated: true
          description: '[DEPRECATED] This field was previously used to define an experience''s
            location. Experiences can now be defined with multiple locations, using
            the locations field. This field will be removed in a future version.'
          minLength: 1
          type: string
        locations:
          items:
            minLength: 1
            type: string
          type: array
        name:
          $ref: '#/components/schemas/experienceName'
        profile:
          $ref: '#/components/schemas/profile'
        systemIDs:
          items:
            $ref: '#/components/schemas/systemID'
          type: array
      type: object
    updateExperienceInput:
      properties:
        experience:
          $ref: '#/components/schemas/updateExperienceFields'
        updateMask:
          $ref: '#/components/schemas/updateMask'
      type: object
    updateExperienceTagFields:
      properties:
        description:
          type: string
        name:
          $ref: '#/components/schemas/experienceTagName'
      type: object
    updateExperienceTagInput:
      properties:
        experienceTag:
          $ref: '#/components/schemas/updateExperienceTagFields'
        updateMask:
          $ref: '#/components/schemas/updateMask'
      type: object
    updateJobInput:
      properties:
        description:
          type: string
      required:
      - description
      type: object
    updateMask:
      items:
        type: string
      type: array
    updateProjectFields:
      properties:
        description:
          type: string
        name:
          type: string
      type: object
    updateProjectInput:
      properties:
        project:
          $ref: '#/components/schemas/updateProjectFields'
        updateMask:
          $ref: '#/components/schemas/updateMask'
      type: object
    updateSystemInput:
      properties:
        build_gpus:
          type: integer
        build_memory_mib:
          type: integer
        build_shared_memory_mb:
          type: integer
        build_vcpus:
          type: integer
        description:
          type: string
        metrics_build_gpus:
          type: integer
        metrics_build_memory_mib:
          type: integer
        metrics_build_shared_memory_mb:
          type: integer
        metrics_build_vcpus:
          type: integer
        name:
          type: string
      type: object
    userID:
      type: string
    viewMetadata:
      properties:
        fileName:
          $ref: '#/components/schemas/fileName'
        lineNumber:
          $ref: '#/components/schemas/lineNumber'
        objectName:
          $ref: '#/components/schemas/objectName'
        objectType:
          $ref: '#/components/schemas/objectType'
      type: object
    viewObject:
      properties:
        friendlyName:
          $ref: '#/components/schemas/friendlyName'
        mcapURL:
          $ref: '#/components/schemas/mcapURL'
        objectCount:
          $ref: '#/components/schemas/objectCount'
        orgID:
          $ref: '#/components/schemas/orgID'
        userID:
          $ref: '#/components/schemas/userID'
        viewSessionID:
          $ref: '#/components/schemas/viewSessionID'
        viewTimestamp:
          $ref: '#/components/schemas/timestamp'
        viewURL:
          format: uri
          type: string
      type: object
    viewObjectAndMetadata:
      properties:
        viewMetadata:
          items:
            $ref: '#/components/schemas/viewMetadata'
          type: array
        viewObject:
          $ref: '#/components/schemas/viewObject'
      type: object
    viewSessionID:
      format: uuid
      type: string
    viewSessionUpdate:
      properties:
        id:
          $ref: '#/components/schemas/viewSessionID'
        mcap:
          $ref: '#/components/schemas/mcapURL'
        view:
          description: A link to view the session.
          format: uri
          type: string
      type: object
    viewUpdateID:
      readOnly: true
      type: integer
  securitySchemes:
    OAuth:
      description: This API uses OAuth 2
      flows:
        authorizationCode:
          authorizationUrl: https://resim.us.auth0.com/authorize
          refreshUrl: https://resim.us.auth0.com/oauth/token
          scopes:
            batches:read: Read batch data.
            batches:write: Write batch data.
            builds:read: Read build data.
            builds:write: Write build data.
            experienceTags:read: Read experience tag data.
            experienceTags:write: Write experience tag data.
            experiences:read: Read experience data.
            experiences:write: Write experience data.
            projects:read: Read project data.
            projects:write: Write project data.
            reports:read: Read report data.
            reports:write: Write report data.
            sweeps:read: Read sweep data.
            sweeps:write: Write sweep data.
            systems:read: Read system data.
            systems:write: Write system data.
            view:read: Read view data.
            view:write: Write view data.
          tokenUrl: https://resim.us.auth0.com/oauth/token
        clientCredentials:
          scopes:
            batches:read: Read batch data.
            batches:write: Write batch data.
            builds:read: Read build data.
            builds:write: Write build data.
            experienceTags:read: Read experience tag data.
            experienceTags:write: Write experience tag data.
            experiences:read: Read experience data.
            experiences:write: Write experience data.
            projects:read: Read project data.
            projects:write: Write project data.
            reports:read: Read report data.
            reports:write: Write report data.
            sweeps:read: Read sweep data.
            sweeps:write: Write sweep data.
            systems:read: Read system data.
            systems:write: Write system data.
            view:read: Read view data.
            view:write: Write view data.
          tokenUrl: https://resim.us.auth0.com/oauth/token
        implicit:
          authorizationUrl: https://resim.us.auth0.com/authorize
          scopes:
            batches:read: Read batch data.
            batches:write: Write batch data.
            builds:read: Read build data.
            builds:write: Write build data.
            experienceTags:read: Read experience tag data.
            experienceTags:write: Write experience tag data.
            experiences:read: Read experience data.
            experiences:write: Write experience data.
            projects:read: Read project data.
            projects:write: Write project data.
            reports:read: Read report data.
            reports:write: Write report data.
            sweeps:read: Read sweep data.
            sweeps:write: Write sweep data.
            systems:read: Read system data.
            systems:write: Write system data.
            view:read: Read view data.
            view:write: Write view data.
      type: oauth2
info:
  title: ReRun API
  version: "0.1"
openapi: 3.0.2
paths:
  /health:
    get:
      description: Returns whether the service is healthy or not.
      operationId: health
      responses:
        "200":
          description: OK
      tags:
      - health
  /projects:
    get:
      description: Returns the list of projects.
      operationId: listProjects
      parameters:
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/orderBy'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listProjectsOutput'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - projects:read
      tags:
      - projects
    post:
      description: Adds a project.
      operationId: createProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createProjectInput'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
        "409":
          $ref: '#/components/responses/alreadyExists'
      security:
      - OAuth:
        - projects:write
      tags:
      - projects
  /projects/{projectID}:
    delete:
      description: Archives a project.
      operationId: archiveProject
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      responses:
        "204":
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - projects:write
      tags:
      - projects
    get:
      description: Returns a specific project.
      operationId: getProject
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - projects:read
      tags:
      - projects
    patch:
      description: Updates the project.
      operationId: updateProject
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateProjectInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - projects:write
      tags:
      - projects
  /projects/{projectID}/batches:
    get:
      description: List the batches.
      operationId: listBatches
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - description: Filter based on branch_id, build_id, system_id, created_at, status,
          metrics_status, batch_id
        example: branch_id = "71b96a67-9990-426b-993e-0f3d9c6bbe48" AND created_at
          > "2024-01-01T00:00:00Z"
        in: query
        name: search
        schema:
          type: string
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/orderBy'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listBatchesOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
    post:
      description: Adds a batch.  ID should be omitted and will be returned in the
        response.
      operationId: CreateBatch
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/batchInput'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/batch'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "402":
          $ref: '#/components/responses/insufficientQuota'
      security:
      - OAuth:
        - batches:write
      tags:
      - batches
  /projects/{projectID}/batches/-/jobs:
    get:
      description: List jobs across all batches in a project
      operationId: listAllJobs
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - description: Filter based on attributes metrics_build_name and metrics_build_version
        example: metrics_build_name IN ("hello world") AND metrics_build_version IN
          ("1.0", "1.1")
        in: query
        name: search
        schema:
          type: string
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/orderBy'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listAllJobsOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
  /projects/{projectID}/batches/{batchID}:
    get:
      description: Returns a batch.
      operationId: getBatch
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/batch'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
    patch:
      description: Updates the batch.
      operationId: updateBatch
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateBatchInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/batch'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:write
      tags:
      - batches
  /projects/{projectID}/batches/{batchID}/:cancel:
    post:
      description: Cancels a batch.
      operationId: cancelBatch
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      responses:
        "200":
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:write
      tags:
      - batches
  /projects/{projectID}/batches/{batchID}/compare/{otherBatchID}:
    get:
      description: Get a summary describing how individual tests have changed between
        the two given batches. A warning or a blocking failure is considered failing
        from the point of view of filters and ordering.
      operationId: compareBatches
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - description: the batch to compare to
        in: path
        name: otherBatchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - description: filter tests by their status
        in: query
        name: status
        schema:
          $ref: '#/components/schemas/compareBatchesStatusFilter'
      - description: filter tests by their name
        in: query
        name: search
        schema:
          type: string
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/compareBatchesOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
  /projects/{projectID}/batches/{batchID}/jobs:
    get:
      description: List the jobs in the given batch.
      operationId: listJobs
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - description: Filter jobs by status
        in: query
        name: status
        schema:
          $ref: '#/components/schemas/jobStatus'
      - description: Filter jobs by their conflated status
        explode: false
        in: query
        name: conflatedStatus
        schema:
          items:
            $ref: '#/components/schemas/conflatedJobStatus'
          type: array
      - description: Filter experiences (in job) by name
        in: query
        name: name
        schema:
          type: string
      - description: Filter experiences (in job) by a text string on name and description
        in: query
        name: text
        schema:
          type: string
      - description: Filter jobs by the tag id(s) attached to the experience
        explode: false
        in: query
        name: experienceTagIDs
        schema:
          items:
            format: uuid
            type: string
          type: array
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/orderBy'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listJobsOutput'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}:
    get:
      description: Retrieve the given job.
      operationId: getJob
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - in: path
        name: jobID
        required: true
        schema:
          $ref: '#/components/schemas/jobID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
    patch:
      description: Updates the job.
      operationId: updateJob
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - in: path
        name: jobID
        required: true
        schema:
          $ref: '#/components/schemas/jobID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateJobInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:write
      tags:
      - batches
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}/eventTags:
    get:
      description: Lists the event tags for a given job.
      operationId: listEventTagsForJob
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - in: path
        name: jobID
        required: true
        schema:
          $ref: '#/components/schemas/jobID'
      - description: Filter event tags by name
        in: query
        name: name
        schema:
          type: string
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listJobEventTagsOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
      - metrics
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}/events:
    get:
      description: Lists the events for a given job. Does not return associated data.
      operationId: listEventsForJob
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - in: path
        name: jobID
        required: true
        schema:
          $ref: '#/components/schemas/jobID'
      - description: Tags on which to filter the events
        in: query
        name: eventTags
        schema:
          $ref: '#/components/schemas/eventTags'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listJobEventsOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
      - metrics
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}/events/{eventID}:
    get:
      description: Retrieve a single event. Does not return associated data.
      operationId: getEventForJob
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - in: path
        name: jobID
        required: true
        schema:
          $ref: '#/components/schemas/jobID'
      - in: path
        name: eventID
        required: true
        schema:
          $ref: '#/components/schemas/eventID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
      - metrics
    patch:
      description: Updates the event.
      operationId: updateEvent
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - in: path
        name: jobID
        required: true
        schema:
          $ref: '#/components/schemas/jobID'
      - in: path
        name: eventID
        required: true
        schema:
          $ref: '#/components/schemas/eventID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateEventInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:write
      tags:
      - batches
      - metrics
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}/logs:
    get:
      description: List the logs associated with a given job
      operationId: listJobLogsForJob
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - in: path
        name: jobID
        required: true
        schema:
          $ref: '#/components/schemas/jobID'
      - in: query
        name: type
        schema:
          items:
            $ref: '#/components/schemas/logType'
          type: array
      - description: Filter logs by name
        in: query
        name: name
        schema:
          type: string
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listJobLogsOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}/logs/{logID}:
    delete:
      description: Deletes a log.
      operationId: deleteJobLog
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - in: path
        name: jobID
        required: true
        schema:
          $ref: '#/components/schemas/jobID'
      - in: path
        name: logID
        required: true
        schema:
          $ref: '#/components/schemas/logID'
      responses:
        "204":
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:write
      tags:
      - batches
    get:
      description: Get an individual log file
      operationId: getJobLog
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - in: path
        name: jobID
        required: true
        schema:
          $ref: '#/components/schemas/jobID'
      - in: path
        name: logID
        required: true
        schema:
          $ref: '#/components/schemas/logID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobLog'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}/metrics:
    get:
      description: Lists the metrics for a given job. Does not return associated data.
      operationId: listMetricsForJob
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - in: path
        name: jobID
        required: true
        schema:
          $ref: '#/components/schemas/jobID'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/orderBy'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listJobMetricsOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
      - metrics
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}/metrics/{metricID}:
    get:
      description: Lists the metrics associated with given metric IDs
      operationId: listMetricsForMetricIDs
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - in: path
        name: jobID
        required: true
        schema:
          $ref: '#/components/schemas/jobID'
      - explode: false
        in: path
        name: metricID
        required: true
        schema:
          items:
            $ref: '#/components/schemas/metricID'
          minItems: 1
          type: array
        style: simple
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listJobMetricsOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
      - metrics
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}/metrics/{metricID}/metricsData:
    get:
      description: Returns the metrics data associated with given metric ID(s)
      operationId: listMetricsDataForMetricIDs
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - in: path
        name: jobID
        required: true
        schema:
          $ref: '#/components/schemas/jobID'
      - explode: false
        in: path
        name: metricID
        required: true
        schema:
          items:
            $ref: '#/components/schemas/metricID'
          minItems: 1
          type: array
        style: simple
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listMetricsDataAndMetricIDOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
      - metrics
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}/metrics/{metricID}/tags:
    get:
      description: List the tags associated to the given job metric id(s)
      operationId: listTagsForJobMetrics
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - in: path
        name: jobID
        required: true
        schema:
          $ref: '#/components/schemas/jobID'
      - explode: false
        in: path
        name: metricID
        required: true
        schema:
          items:
            $ref: '#/components/schemas/metricID'
          minItems: 1
          type: array
        style: simple
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listTagsForJobMetricsOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - metrics
      - tags
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}/metricsData:
    get:
      description: Returns the metrics data associated with a given job ID
      operationId: listMetricsDataForJob
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - in: path
        name: jobID
        required: true
        schema:
          $ref: '#/components/schemas/jobID'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listJobMetricsDataOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
      - metrics
  /projects/{projectID}/batches/{batchID}/jobs/{jobID}/metricsData/{metricsDataID}:
    get:
      description: Lists the metrics data associated with given metrics data IDs
      operationId: listMetricsDataForMetricsDataIDs
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - in: path
        name: jobID
        required: true
        schema:
          $ref: '#/components/schemas/jobID'
      - explode: false
        in: path
        name: metricsDataID
        required: true
        schema:
          items:
            $ref: '#/components/schemas/metricsDataID'
          minItems: 1
          type: array
        style: simple
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listJobMetricsDataOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
      - metrics
  /projects/{projectID}/batches/{batchID}/logs:
    get:
      description: List the logs associated with a given batch
      operationId: listBatchLogsForBatch
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listBatchLogsOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
  /projects/{projectID}/batches/{batchID}/logs/{logID}:
    delete:
      description: Deletes a log.
      operationId: deleteBatchLog
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - in: path
        name: logID
        required: true
        schema:
          $ref: '#/components/schemas/logID'
      responses:
        "204":
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:write
      tags:
      - batches
    get:
      description: Get an individual log file
      operationId: getBatchLog
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - in: path
        name: logID
        required: true
        schema:
          $ref: '#/components/schemas/logID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/batchLog'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
  /projects/{projectID}/batches/{batchID}/metrics:
    get:
      description: Lists the (batch) metrics for a given batch. Does not return associated
        data.
      operationId: listBatchMetrics
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listBatchMetricsOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
      - metrics
  /projects/{projectID}/batches/{batchID}/metrics/{metricID}:
    get:
      description: Lists the batch metrics associated with given batch metric IDs
      operationId: listBatchMetricsForBatchMetricIDs
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - explode: false
        in: path
        name: metricID
        required: true
        schema:
          items:
            $ref: '#/components/schemas/metricID'
          minItems: 1
          type: array
        style: simple
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listBatchMetricsOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
      - metrics
  /projects/{projectID}/batches/{batchID}/metrics/{metricID}/metricsData:
    get:
      description: Returns the batch metrics data associated with given batch metric
        ID(s)
      operationId: listBatchMetricsDataForBatchMetricIDs
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - explode: false
        in: path
        name: metricID
        required: true
        schema:
          items:
            $ref: '#/components/schemas/metricID'
          minItems: 1
          type: array
        style: simple
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listBatchMetricsDataForBatchMetricIDsOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
      - metrics
  /projects/{projectID}/batches/{batchID}/metrics/{metricID}/tags:
    get:
      description: List the tags associated to the given metric id(s)
      operationId: listTagsForBatchMetrics
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - explode: false
        in: path
        name: metricID
        required: true
        schema:
          items:
            $ref: '#/components/schemas/metricID'
          minItems: 1
          type: array
        style: simple
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listTagsForBatchMetricsOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - metrics
      - tags
  /projects/{projectID}/batches/{batchID}/metricsData:
    get:
      description: Returns the metrics data associated with a given batch ID
      operationId: listBatchMetricsData
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listBatchMetricsDataOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
      - metrics
  /projects/{projectID}/batches/{batchID}/metricsData/{metricsDataID}:
    get:
      description: Lists the batch metrics data associated with given batch metrics
        data IDs
      operationId: listBatchMetricsDataForBatchMetricsDataIDs
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      - explode: false
        in: path
        name: metricsDataID
        required: true
        schema:
          items:
            $ref: '#/components/schemas/metricsDataID'
          minItems: 1
          type: array
        style: simple
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listBatchMetricsDataOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
      - metrics
  /projects/{projectID}/batches/{batchID}/rerun:
    post:
      description: Rerun a batch
      operationId: rerunBatch
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rerunBatchInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rerunBatchOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
        "409":
          $ref: '#/components/responses/conflict'
      security:
      - OAuth:
        - batches:write
      tags:
      - batches
  /projects/{projectID}/batches/{batchID}/suggestions:
    get:
      description: Returns a list of suggested batches to A/B compare against
      operationId: getBatchSuggestions
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: batchID
        required: true
        schema:
          $ref: '#/components/schemas/batchID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/batchSuggestionsOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
  /projects/{projectID}/batches/accounts:
    get:
      description: Get all the account names that have triggered batches in the given
        project. These usernames are collected automatically from CI systems.
      operationId: listBatchAccounts
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - description: Filter by the account name
        in: query
        name: name
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listUsersOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
  /projects/{projectID}/branches:
    get:
      description: Returns the list of branches for a project.
      operationId: listBranchesForProject
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - description: Filter branches by name
        in: query
        name: name
        schema:
          type: string
      - description: Filter branches by branchType
        in: query
        name: branchType
        schema:
          $ref: '#/components/schemas/branchType'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/orderBy'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listBranchesOutput'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - projects:read
      tags:
      - projects
    post:
      description: Adds a branch for a project.
      operationId: createBranchForProject
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createBranchInput'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/branch'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
        "409":
          $ref: '#/components/responses/alreadyExists'
      security:
      - OAuth:
        - projects:write
      tags:
      - projects
  /projects/{projectID}/branches/{branchID}:
    delete:
      description: Deletes a branch for a project.
      operationId: deleteBranchForProject
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: branchID
        required: true
        schema:
          $ref: '#/components/schemas/branchID'
      responses:
        "204":
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - projects:write
      tags:
      - projects
    get:
      description: Returns a specific branch for a project.
      operationId: getBranchForProject
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: branchID
        required: true
        schema:
          $ref: '#/components/schemas/branchID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/branch'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - projects:read
      tags:
      - projects
  /projects/{projectID}/branches/{branchID}/builds:
    get:
      description: Returns the list of builds for a branch.
      operationId: listBuildsForBranches
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - explode: false
        in: path
        name: branchID
        required: true
        schema:
          items:
            $ref: '#/components/schemas/branchID'
          minItems: 1
          type: array
        style: simple
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/orderBy'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listBuildsOutput'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - builds:read
      tags:
      - builds
    post:
      description: Adds a build.
      operationId: createBuildForBranch
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: branchID
        required: true
        schema:
          $ref: '#/components/schemas/branchID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createBuildForBranchInput'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/build'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - builds:write
      tags:
      - builds
  /projects/{projectID}/branches/{branchID}/builds/{buildID}:
    delete:
      description: Delete a build.
      operationId: deleteBuildForBranch
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: branchID
        required: true
        schema:
          $ref: '#/components/schemas/branchID'
      - in: path
        name: buildID
        required: true
        schema:
          $ref: '#/components/schemas/buildID'
      responses:
        "204":
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - builds:write
      tags:
      - builds
    get:
      description: Returns a specific build for a branch.
      operationId: getBuildForBranch
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: branchID
        required: true
        schema:
          $ref: '#/components/schemas/branchID'
      - in: path
        name: buildID
        required: true
        schema:
          $ref: '#/components/schemas/buildID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/build'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - builds:read
      tags:
      - builds
  /projects/{projectID}/branches/{branchID}/builds/{buildID}/batches:
    get:
      description: Returns the batches for a build.
      operationId: listBatchesForBuilds
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: branchID
        required: true
        schema:
          $ref: '#/components/schemas/branchID'
      - explode: false
        in: path
        name: buildID
        required: true
        schema:
          items:
            $ref: '#/components/schemas/buildID'
          minItems: 1
          type: array
        style: simple
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/orderBy'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listBatchesOutput'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
  /projects/{projectID}/builds:
    get:
      description: Returns the list of builds.
      operationId: listBuilds
      parameters:
      - description: A search query. Supports searching by branch_id, system_id
        example: branch_id = "71b96a67-9990-426b-993e-0f3d9c6bbe48"
        in: query
        name: search
        schema:
          type: string
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/orderBy'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listBuildsOutput'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - builds:read
      tags:
      - builds
  /projects/{projectID}/builds/{buildID}:
    get:
      description: Returns a specific build.
      operationId: getBuild
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: buildID
        required: true
        schema:
          $ref: '#/components/schemas/buildID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/build'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - builds:read
      tags:
      - builds
    patch:
      description: Updates the build.
      operationId: updateBuild
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: buildID
        required: true
        schema:
          $ref: '#/components/schemas/buildID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateBuildInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/build'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - builds:write
      tags:
      - builds
  /projects/{projectID}/builds/accounts:
    get:
      description: Get all the account names that have created builds in the given
        project. These usernames are collected automatically from CI systems.
      operationId: listBuildAccounts
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listUsersOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - builds:read
      tags:
      - builds
  /projects/{projectID}/experienceTags:
    get:
      description: Returns a list of all experience tags.
      operationId: listExperienceTags
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - description: Filter experience tags by name. It is recommended to use orderBy=rank,
          so you get the most relevant results first.
        in: query
        name: name
        schema:
          type: string
      - in: query
        name: orderBy
        schema:
          default: id
          enum:
          - id
          - timestamp
          - rank
          type: string
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listExperienceTagsOutput'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - experienceTags:read
      tags:
      - experience tags
    post:
      description: Adds an experience tag.
      operationId: createExperienceTag
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createExperienceTagInput'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/experienceTag'
          description: Created
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
        "409":
          $ref: '#/components/responses/alreadyExists'
      security:
      - OAuth:
        - experienceTags:write
      tags:
      - experience tags
  /projects/{projectID}/experienceTags/{experienceTagID}:
    delete:
      description: Deletes an experience tag.
      operationId: deleteExperienceTag
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: experienceTagID
        required: true
        schema:
          $ref: '#/components/schemas/experienceTagID'
      responses:
        "204":
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - experienceTags:write
      tags:
      - experience tags
    get:
      description: Returns a specific experience tag.
      operationId: getExperienceTag
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: experienceTagID
        required: true
        schema:
          $ref: '#/components/schemas/experienceTagID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/experienceTag'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - experienceTags:read
      tags:
      - experience tags
    patch:
      description: Updates the experience tag.  Experience membership cannot be changed
        with this method.
      operationId: updateExperienceTag
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: experienceTagID
        required: true
        schema:
          $ref: '#/components/schemas/experienceTagID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateExperienceTagInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/experienceTag'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - experienceTags:write
      tags:
      - experience tags
  /projects/{projectID}/experienceTags/{experienceTagID}/experiences:
    get:
      description: Returns a list of experiences with the given experience tag.
      operationId: listExperiencesWithExperienceTag
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: experienceTagID
        required: true
        schema:
          $ref: '#/components/schemas/experienceTagID'
      - description: Filter by archived status.
        in: query
        name: archived
        schema:
          type: boolean
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listExperiencesOutput'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - experienceTags:read
      tags:
      - experience tags
  /projects/{projectID}/experienceTags/{experienceTagID}/experiences/{experienceID}:
    delete:
      description: Removes the given experience tag from the given experience.
      operationId: removeExperienceTagFromExperience
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: experienceTagID
        required: true
        schema:
          $ref: '#/components/schemas/experienceTagID'
      - in: path
        name: experienceID
        required: true
        schema:
          $ref: '#/components/schemas/experienceID'
      responses:
        "204":
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - experienceTags:write
      tags:
      - experience tags
    post:
      description: Adds the given experience tag to the given experience.
      operationId: addExperienceTagToExperience
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: experienceTagID
        required: true
        schema:
          $ref: '#/components/schemas/experienceTagID'
      - in: path
        name: experienceID
        required: true
        schema:
          $ref: '#/components/schemas/experienceID'
      responses:
        "201":
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
        "409":
          $ref: '#/components/responses/alreadyExists'
      security:
      - OAuth:
        - experienceTags:write
      tags:
      - experience tags
  /projects/{projectID}/experienceTags/addExperiences:
    post:
      description: Registers the given experiences as applicable for the experience
        tags
      operationId: addTagsToExperiences
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addTagsToExperiencesInput'
      responses:
        "201":
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
        "409":
          $ref: '#/components/responses/alreadyExists'
      security:
      - OAuth:
        - experienceTags:write
      tags:
      - experience tags
  /projects/{projectID}/experiences:
    get:
      description: Returns the list of experiences.
      operationId: listExperiences
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - description: Filter experiences by name
        in: query
        name: name
        schema:
          type: string
      - description: Filter experiences by a text string on experience name, experience
          description, or experience tag name
        in: query
        name: text
        schema:
          type: string
      - description: A search query. Supports searching by tag_id, test_suite_id,
          archived, profile, and system_id
        example: tag_id IN ("71b96a67-9990-426b-993e-0f3d9c6bbe48")
        in: query
        name: search
        schema:
          type: string
      - in: query
        name: archived
        schema:
          type: boolean
      - $ref: '#/components/parameters/pageSizeUnbounded'
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/orderBy'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listExperiencesOutput'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - experiences:read
      tags:
      - experiences
    post:
      description: Adds an experience.
      operationId: createExperience
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createExperienceInput'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/experience'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
        "409":
          $ref: '#/components/responses/alreadyExists'
      security:
      - OAuth:
        - experiences:write
      tags:
      - experiences
  /projects/{projectID}/experiences/{experienceID}:
    delete:
      description: Archives an experience.
      operationId: archiveExperience
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: experienceID
        required: true
        schema:
          $ref: '#/components/schemas/experienceID'
      responses:
        "204":
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - experiences:write
      tags:
      - experiences
    get:
      description: Returns a specific experience.
      operationId: getExperience
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: experienceID
        required: true
        schema:
          $ref: '#/components/schemas/experienceID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/experience'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - experiences:read
      tags:
      - experiences
    patch:
      description: Updates the experience. When updating environment variables, the
        entire array is replaced.
      operationId: updateExperience
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: experienceID
        required: true
        schema:
          $ref: '#/components/schemas/experienceID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateExperienceInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/experience'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - experiences:write
      tags:
      - experiences
  /projects/{projectID}/experiences/{experienceID}/debug:
    post:
      description: Reruns an experience in debug mode.
      operationId: debugExperience
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: experienceID
        required: true
        schema:
          $ref: '#/components/schemas/experienceID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/debugExperienceInput'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/debugExperienceOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:write
      tags:
      - experiences
  /projects/{projectID}/experiences/{experienceID}/experienceTags:
    get:
      description: Returns a list of experience tags associated with a given experience.
      operationId: listExperienceTagsForExperience
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: experienceID
        required: true
        schema:
          $ref: '#/components/schemas/experienceID'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listExperienceTagsOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - experiences:read
      tags:
      - experiences
  /projects/{projectID}/experiences/{experienceID}/restore:
    post:
      description: Restores an experience.
      operationId: restoreExperience
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: experienceID
        required: true
        schema:
          $ref: '#/components/schemas/experienceID'
      responses:
        "204":
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - experiences:write
      tags:
      - experiences
  /projects/{projectID}/experiences/{experienceID}/systems:
    get:
      description: Returns the systems for a given experience
      operationId: getSystemsForExperience
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: experienceID
        required: true
        schema:
          $ref: '#/components/schemas/experienceID'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listSystemsOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - experiences:read
      tags:
      - experiences
  /projects/{projectID}/metricsBuilds:
    get:
      description: Returns the list of metrics builds.
      operationId: listMetricsBuilds
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - description: A search query. Supports searching by system_id
        example: system_id = "71b96a67-9990-426b-993e-0f3d9c6bbe48"
        in: query
        name: systemID
        schema:
          format: uuid
          type: string
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/orderBy'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listMetricsBuildOutput'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - builds:read
      tags:
      - metricsBuilds
    post:
      description: Adds a metrics build.
      operationId: createMetricsBuild
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createMetricsBuildInput'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metricsBuild'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
        "409":
          $ref: '#/components/responses/alreadyExists'
      security:
      - OAuth:
        - builds:write
      tags:
      - metricsBuilds
  /projects/{projectID}/metricsBuilds/{metricsBuildID}:
    get:
      description: Returns a specific metrics build.
      operationId: getMetricsBuild
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: metricsBuildID
        required: true
        schema:
          $ref: '#/components/schemas/metricsBuildID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metricsBuild'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - builds:read
      tags:
      - metricsBuilds
  /projects/{projectID}/metricsBuilds/{metricsBuildID}/systems:
    get:
      description: Returns the systems for a given metrics build
      operationId: getSystemsForMetricsBuild
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: metricsBuildID
        required: true
        schema:
          $ref: '#/components/schemas/metricsBuildID'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listSystemsOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - builds:read
      tags:
      - metricsBuilds
  /projects/{projectID}/profiles:
    get:
      description: Returns the list of service profiles.
      operationId: listServiceProfiles
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - experiences:read
      tags:
      - experiences
  /projects/{projectID}/reports:
    get:
      description: List the reports.
      operationId: listReports
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - description: Filter based on branch_id, test_suite_id, created_at, status,
          associated_account
        example: branch_id = "71b96a67-9990-426b-993e-0f3d9c6bbe48" AND created_at
          > "2024-01-01T00:00:00Z"
        in: query
        name: search
        schema:
          type: string
      - description: Filter reports by a text string (only supports batch id as of
          3/21/2025)
        in: query
        name: text
        schema:
          type: string
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/orderBy'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listReportsOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - reports:read
      tags:
      - reports
    post:
      description: Adds a report. If the user supplies a name parameter, that name
        will be used, otherwise a name will be generated. The end timestamp is optional
        and will default to now(). The respectRevisionBoundary field enables strict
        report generation from only the defined testSuiteRevision.
      operationId: CreateReport
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reportInput'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/report'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "402":
          $ref: '#/components/responses/insufficientQuota'
      security:
      - OAuth:
        - reports:write
      tags:
      - reports
  /projects/{projectID}/reports/{reportID}:
    get:
      description: Returns a report.
      operationId: getReport
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: reportID
        required: true
        schema:
          $ref: '#/components/schemas/reportID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/report'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - reports:read
      tags:
      - reports
  /projects/{projectID}/reports/{reportID}/logs:
    get:
      description: List the logs associated with a given report
      operationId: listLogsForReport
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: reportID
        required: true
        schema:
          $ref: '#/components/schemas/reportID'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listReportLogsOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - reports:read
      tags:
      - reports
  /projects/{projectID}/reports/{reportID}/logs/{logID}:
    get:
      description: Get an individual log file
      operationId: getReportLog
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: reportID
        required: true
        schema:
          $ref: '#/components/schemas/reportID'
      - in: path
        name: logID
        required: true
        schema:
          $ref: '#/components/schemas/logID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportLog'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - reports:read
      tags:
      - reports
  /projects/{projectID}/reports/{reportID}/metrics:
    get:
      description: Lists the metrics for a given report. Does not return associated
        data.
      operationId: listReportMetrics
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: reportID
        required: true
        schema:
          $ref: '#/components/schemas/reportID'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listReportMetricsOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - reports:read
      tags:
      - reports
      - metrics
  /projects/{projectID}/reports/{reportID}/metrics/{metricID}:
    get:
      description: Lists the report metrics associated with given report metric IDs
      operationId: listReportMetricsForReportMetricIDs
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: reportID
        required: true
        schema:
          $ref: '#/components/schemas/reportID'
      - explode: false
        in: path
        name: metricID
        required: true
        schema:
          items:
            $ref: '#/components/schemas/metricID'
          minItems: 1
          type: array
        style: simple
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listReportMetricsOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - reports:read
      tags:
      - reports
      - metrics
  /projects/{projectID}/reports/{reportID}/metrics/{metricID}/metricsData:
    get:
      description: Returns the report metrics data associated with given report metric
        ID(s)
      operationId: listReportMetricsDataForReportMetricIDs
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: reportID
        required: true
        schema:
          $ref: '#/components/schemas/reportID'
      - explode: false
        in: path
        name: metricID
        required: true
        schema:
          items:
            $ref: '#/components/schemas/metricID'
          minItems: 1
          type: array
        style: simple
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listReportMetricsDataForReportMetricIDsOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - reports:read
      tags:
      - reports
      - metrics
  /projects/{projectID}/reports/{reportID}/metrics/{metricID}/tags:
    get:
      description: Lists the tags associated with given report metric IDs
      operationId: listTagsForReportMetrics
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: reportID
        required: true
        schema:
          $ref: '#/components/schemas/reportID'
      - explode: false
        in: path
        name: metricID
        required: true
        schema:
          items:
            $ref: '#/components/schemas/metricID'
          minItems: 1
          type: array
        style: simple
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listTagsForReportMetricsOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - reports:read
      tags:
      - reports
      - metrics
  /projects/{projectID}/reports/{reportID}/metricsData:
    get:
      description: Returns the metrics data associated with a given report ID
      operationId: listReportMetricsData
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: reportID
        required: true
        schema:
          $ref: '#/components/schemas/reportID'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listReportMetricsDataOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - reports:read
      tags:
      - reports
      - metrics
  /projects/{projectID}/reports/{reportID}/metricsData/{metricsDataID}:
    get:
      description: Lists the report metrics data associated with given report metrics
        data IDs
      operationId: listReportMetricsDataForReportMetricsDataIDs
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: reportID
        required: true
        schema:
          $ref: '#/components/schemas/reportID'
      - explode: false
        in: path
        name: metricsDataID
        required: true
        schema:
          items:
            $ref: '#/components/schemas/metricsDataID'
          minItems: 1
          type: array
        style: simple
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listReportMetricsDataOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - reports:read
      tags:
      - reports
      - metrics
  /projects/{projectID}/reports/accounts:
    get:
      description: Get all the account names that have triggered reports in the given
        project. These usernames are collected automatically from CI systems.
      operationId: listReportAccounts
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listUsersOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - reports:read
      tags:
      - reports
  /projects/{projectID}/suites:
    get:
      description: Returns the list of test suites at their latest revision
      operationId: listTestSuites
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - description: Only return test suites that contain the given experience id(s)
        explode: false
        in: query
        name: experienceIDs
        schema:
          items:
            $ref: '#/components/schemas/experienceID'
          minItems: 1
          type: array
        style: form
      - description: Only return test suites that contain the given system id
        in: query
        name: systemID
        schema:
          format: uuid
          type: string
      - description: Filter test suites by name
        in: query
        name: name
        schema:
          type: string
      - in: query
        name: archived
        schema:
          type: boolean
      - description: Filter test suites by a text string on name and description
        in: query
        name: text
        schema:
          type: string
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/orderBy'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listTestSuiteOutput'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - batches:read
      tags:
      - test_suites
    post:
      description: Adds a test suite for a project.
      operationId: createTestSuite
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createTestSuiteInput'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/testSuite'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
        "409":
          $ref: '#/components/responses/alreadyExists'
      security:
      - OAuth:
        - batches:write
      tags:
      - test_suites
  /projects/{projectID}/suites/{testSuiteID}:
    delete:
      description: Archives a test suite.
      operationId: archiveTestSuite
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: testSuiteID
        required: true
        schema:
          $ref: '#/components/schemas/testSuiteID'
      responses:
        "204":
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:write
      tags:
      - test_suites
    get:
      description: Returns a specific test suite's latest revision.
      operationId: getTestSuite
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: testSuiteID
        required: true
        schema:
          $ref: '#/components/schemas/testSuiteID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/testSuite'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - test_suites
    patch:
      description: Revise a test suite, generating a new revision. Supply a false
        value for ad-hoc to convert an existing ad hoc test suite to a full test suite.
      operationId: reviseTestSuite
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: testSuiteID
        required: true
        schema:
          $ref: '#/components/schemas/testSuiteID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reviseTestSuiteInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/testSuite'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:write
      tags:
      - test_suites
  /projects/{projectID}/suites/{testSuiteID}/addExperiences:
    patch:
      description: Add experiences to a test suite. This will generate a new test
        suite revision.
      operationId: addExperiencesToTestSuite
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: testSuiteID
        required: true
        schema:
          $ref: '#/components/schemas/testSuiteID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/selectExperiencesInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/testSuite'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:write
      tags:
      - test_suites
  /projects/{projectID}/suites/{testSuiteID}/batches:
    get:
      description: List the batches for a test suite (all revisions).
      operationId: listBatchesForTestSuite
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: testSuiteID
        required: true
        schema:
          $ref: '#/components/schemas/testSuiteID'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/orderBy'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listBatchesOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
    post:
      description: Creates a batch for that test suite
      operationId: CreateBatchForTestSuite
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: testSuiteID
        required: true
        schema:
          $ref: '#/components/schemas/testSuiteID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/testSuiteBatchInput'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/batch'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "402":
          $ref: '#/components/responses/insufficientQuota'
      security:
      - OAuth:
        - batches:write
      tags:
      - batches
  /projects/{projectID}/suites/{testSuiteID}/removeExperiences:
    patch:
      description: Remove experiences from a test suite. This will generate a new
        test suite revision.
      operationId: removeExperiencesFromTestSuite
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: testSuiteID
        required: true
        schema:
          $ref: '#/components/schemas/testSuiteID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/selectExperiencesInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/testSuite'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:write
      tags:
      - test_suites
  /projects/{projectID}/suites/{testSuiteID}/restore:
    post:
      description: Restores a test suite.
      operationId: restoreTestSuite
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: testSuiteID
        required: true
        schema:
          $ref: '#/components/schemas/testSuiteID'
      responses:
        "204":
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:write
      tags:
      - test_suites
  /projects/{projectID}/suites/{testSuiteID}/revisions:
    get:
      description: Returns all the revisions of a specific test suite.
      operationId: listTestSuiteRevisions
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: testSuiteID
        required: true
        schema:
          $ref: '#/components/schemas/testSuiteID'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listTestSuiteRevisionsOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - test_suites
  /projects/{projectID}/suites/{testSuiteID}/revisions/{revision}:
    get:
      description: Returns a specified revision of a test suite.
      operationId: getTestSuiteRevision
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: testSuiteID
        required: true
        schema:
          $ref: '#/components/schemas/testSuiteID'
      - in: path
        name: revision
        required: true
        schema:
          $ref: '#/components/schemas/testSuiteRevision'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/testSuite'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:read
      tags:
      - test_suites
  /projects/{projectID}/suites/{testSuiteID}/revisions/{revision}/batches:
    get:
      description: List the batches for a test suite revision
      operationId: listBatchesForTestSuiteRevision
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: testSuiteID
        required: true
        schema:
          $ref: '#/components/schemas/testSuiteID'
      - in: path
        name: revision
        required: true
        schema:
          $ref: '#/components/schemas/testSuiteRevision'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/orderBy'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listBatchesOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - batches:read
      tags:
      - batches
    post:
      description: Creates a batch for that test suite revision
      operationId: CreateBatchForTestSuiteRevision
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: testSuiteID
        required: true
        schema:
          $ref: '#/components/schemas/testSuiteID'
      - in: path
        name: revision
        required: true
        schema:
          $ref: '#/components/schemas/testSuiteRevision'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/testSuiteBatchInput'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/batch'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "402":
          $ref: '#/components/responses/insufficientQuota'
      security:
      - OAuth:
        - batches:write
      tags:
      - batches
  /projects/{projectID}/suites/addExperiences:
    post:
      description: Add experiences to test suites. This will generate a new test suite
        revision.
      operationId: addTestSuitesToExperiences
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addSuitesToExperiencesInput'
      responses:
        "201":
          description: Created
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - batches:write
      tags:
      - test_suites
  /projects/{projectID}/suites/summary:
    get:
      description: Returns an overview of test suites and high-level performance data.
        A test suite will only be returned if it has 1 or more reports on the main
        branch assocated to it.
      operationId: getTestSuiteSummary
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/testSuiteSummaryOutput'
          description: OK
      security:
      - OAuth:
        - batches:read
      tags:
      - test_suites
  /projects/{projectID}/sweeps:
    get:
      description: Returns the list of parameter sweeps.
      operationId: listParameterSweeps
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/orderBy'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listParameterSweepsOutput'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - sweeps:read
      tags:
      - parameterSweeps
    post:
      description: Adds a parameter sweep.  ID should be omitted and will be returned
        in the response.
      operationId: createParameterSweep
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parameterSweepInput'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parameterSweep'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - sweeps:write
      tags:
      - parameterSweeps
  /projects/{projectID}/sweeps/{sweepID}:
    get:
      description: Returns a specific parameter sweep.
      operationId: getParameterSweep
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: sweepID
        required: true
        schema:
          $ref: '#/components/schemas/parameterSweepID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parameterSweep'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - sweeps:read
      tags:
      - parameterSweeps
  /projects/{projectID}/sweeps/{sweepID}/:cancel:
    post:
      description: Cancels a parameter sweep.
      operationId: cancelParameterSweep
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: sweepID
        required: true
        schema:
          $ref: '#/components/schemas/parameterSweepID'
      responses:
        "200":
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - sweeps:write
      tags:
      - parameterSweeps
  /projects/{projectID}/sweeps/accounts:
    get:
      description: Get all the account names that have triggered sweeps in the given
        project. These usernames are collected automatically from CI systems.
      operationId: listSweepAccounts
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listUsersOutput'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - sweeps:read
      tags:
      - parameterSweeps
  /projects/{projectID}/systems:
    get:
      description: Returns the list of systems.
      operationId: listSystems
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - description: Filter systems by name
        in: query
        name: name
        schema:
          type: string
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/orderBy'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listSystemsOutput'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - systems:read
      tags:
      - systems
    post:
      description: Adds a system.
      operationId: createSystem
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createSystemInput'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/system'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
        "409":
          $ref: '#/components/responses/alreadyExists'
      security:
      - OAuth:
        - systems:write
      tags:
      - systems
  /projects/{projectID}/systems/{systemID}:
    delete:
      description: Archives a system.
      operationId: archiveSystem
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: systemID
        required: true
        schema:
          $ref: '#/components/schemas/systemID'
      responses:
        "204":
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - systems:write
      tags:
      - systems
    get:
      description: Returns a specific system.
      operationId: getSystem
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: systemID
        required: true
        schema:
          $ref: '#/components/schemas/systemID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/system'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - systems:read
      tags:
      - systems
    patch:
      description: Updates the system.
      operationId: updateSystem
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: systemID
        required: true
        schema:
          $ref: '#/components/schemas/systemID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateSystemInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/system'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - systems:write
      tags:
      - systems
  /projects/{projectID}/systems/{systemID}/builds:
    get:
      description: Returns the list of builds for a system.
      operationId: listBuildsForSystem
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: systemID
        required: true
        schema:
          $ref: '#/components/schemas/systemID'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/orderBy'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listBuildsOutput'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - builds:read
      tags:
      - builds
    post:
      description: Adds a build.
      operationId: createBuildForSystem
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: systemID
        required: true
        schema:
          $ref: '#/components/schemas/systemID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createBuildForSystemInput'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/build'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - builds:write
      tags:
      - builds
  /projects/{projectID}/systems/{systemID}/builds/{buildID}:
    get:
      description: Returns a specific build for a system.
      operationId: getBuildForSystem
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: systemID
        required: true
        schema:
          $ref: '#/components/schemas/systemID'
      - in: path
        name: buildID
        required: true
        schema:
          $ref: '#/components/schemas/buildID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/build'
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - builds:read
      tags:
      - builds
  /projects/{projectID}/systems/{systemID}/experiences:
    get:
      description: Returns a list of all experiences applicable to the system.
      operationId: listExperiencesForSystem
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: systemID
        required: true
        schema:
          $ref: '#/components/schemas/systemID'
      - description: Filter experiences by archived status
        in: query
        name: archived
        schema:
          type: boolean
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listExperiencesOutput'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - systems:read
      tags:
      - systems
  /projects/{projectID}/systems/{systemID}/experiences/{experienceID}:
    delete:
      description: Deregisters the given experience as applicable for the system
      operationId: removeSystemFromExperience
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: systemID
        required: true
        schema:
          $ref: '#/components/schemas/systemID'
      - in: path
        name: experienceID
        required: true
        schema:
          $ref: '#/components/schemas/experienceID'
      responses:
        "204":
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - systems:write
      tags:
      - systems
    post:
      description: Registers the given experience as applicable for the system
      operationId: addSystemToExperience
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: systemID
        required: true
        schema:
          $ref: '#/components/schemas/systemID'
      - in: path
        name: experienceID
        required: true
        schema:
          $ref: '#/components/schemas/experienceID'
      responses:
        "201":
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
        "409":
          $ref: '#/components/responses/alreadyExists'
      security:
      - OAuth:
        - systems:write
      tags:
      - systems
  /projects/{projectID}/systems/{systemID}/metricsBuilds/{metricsBuildID}:
    delete:
      description: Deregisters the given metrics build as applicable for the system
      operationId: removeSystemFromMetricsBuild
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: systemID
        required: true
        schema:
          $ref: '#/components/schemas/systemID'
      - in: path
        name: metricsBuildID
        required: true
        schema:
          $ref: '#/components/schemas/metricsBuildID'
      responses:
        "204":
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - systems:write
      tags:
      - systems
    post:
      description: Registers the given metrics build as applicable for the system
      operationId: addSystemToMetricsBuild
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      - in: path
        name: systemID
        required: true
        schema:
          $ref: '#/components/schemas/systemID'
      - in: path
        name: metricsBuildID
        required: true
        schema:
          $ref: '#/components/schemas/metricsBuildID'
      responses:
        "201":
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
        "409":
          $ref: '#/components/responses/alreadyExists'
      security:
      - OAuth:
        - systems:write
      tags:
      - systems
  /projects/{projectID}/systems/addExperiences:
    post:
      description: Registers the given experiences as applicable for the systems
      operationId: addSystemsToExperiences
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mutateSystemsToExperienceInput'
      responses:
        "201":
          description: Created
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
        "409":
          $ref: '#/components/responses/alreadyExists'
      security:
      - OAuth:
        - systems:write
      tags:
      - systems
  /projects/{projectID}/systems/removeExperiences:
    post:
      description: Removes the given experiences from association with the systems
      operationId: removeSystemsFromExperiences
      parameters:
      - in: path
        name: projectID
        required: true
        schema:
          $ref: '#/components/schemas/projectID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mutateSystemsToExperienceInput'
      responses:
        "201":
          description: OK
        "401":
          $ref: '#/components/responses/unauthenticated'
        "404":
          $ref: '#/components/responses/notFound'
        "409":
          $ref: '#/components/responses/alreadyExists'
      security:
      - OAuth:
        - systems:write
      tags:
      - systems
  /quota:
    get:
      description: Get current quota usage and limits
      operationId: getQuota
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getQuotaOutput'
          description: quota
      security:
      - OAuth:
        - batches:read
        - reports:read
  /validateExperienceLocation:
    post:
      description: Validates an experience location can be reached by ReSim.
      operationId: validateExperienceLocation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/experienceLocation'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/experienceLocationContents'
          description: OK
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - experiences:write
      tags:
      - experiences
  /view/sessions:
    get:
      description: Lists all View sessions.
      operationId: listViewSessions
      parameters:
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/orderBy'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listViewObjectsOutput'
          description: Created
      security:
      - OAuth:
        - view:read
      tags:
      - view
    post:
      description: Creates a new View session.
      operationId: createViewSession
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/viewSessionID'
          description: Created
        "401":
          $ref: '#/components/responses/unauthenticated'
      security:
      - OAuth:
        - view:write
      tags:
      - view
  /view/sessions/{viewSessionID}:
    get:
      description: Lists the view object and metadata associated with a specific view.
      operationId: getViewSession
      parameters:
      - in: path
        name: viewSessionID
        required: true
        schema:
          $ref: '#/components/schemas/viewSessionID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/viewObjectAndMetadata'
          description: Created
        "401":
          $ref: '#/components/responses/unauthenticated'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - view:read
      tags:
      - view
  /view/sessions/{viewSessionID}/updates/{viewUpdateID}:
    post:
      description: Adds an update to the View session.  Updates will be serialized
        sequentially by ID.
      operationId: createViewUpdate
      parameters:
      - in: path
        name: viewSessionID
        required: true
        schema:
          $ref: '#/components/schemas/viewSessionID'
      - in: path
        name: viewUpdateID
        required: true
        schema:
          $ref: '#/components/schemas/viewUpdateID'
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/viewSessionUpdate'
          description: Created
        "401":
          $ref: '#/components/responses/unauthenticated'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/notFound'
      security:
      - OAuth:
        - view:write
      tags:
      - view
servers:
- url: /v1
