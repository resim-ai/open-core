// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.26.0
// source: resim/metrics/proto/metrics.proto

package metrics_proto

import (
	uuid_proto "github.com/resim-ai/open-core/uuid_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetricsDataType int32

const (
	MetricsDataType_NO_DATA_TYPE                           MetricsDataType = 0
	MetricsDataType_DOUBLE_SERIES_DATA_TYPE                MetricsDataType = 1
	MetricsDataType_TIMESTAMP_SERIES_DATA_TYPE             MetricsDataType = 2
	MetricsDataType_UUID_SERIES_DATA_TYPE                  MetricsDataType = 3
	MetricsDataType_STRING_SERIES_DATA_TYPE                MetricsDataType = 4
	MetricsDataType_METRIC_STATUS_SERIES_DATA_TYPE         MetricsDataType = 5
	MetricsDataType_INDEXED_DOUBLE_SERIES_DATA_TYPE        MetricsDataType = 6
	MetricsDataType_INDEXED_TIMESTAMP_SERIES_DATA_TYPE     MetricsDataType = 7
	MetricsDataType_INDEXED_UUID_SERIES_DATA_TYPE          MetricsDataType = 8
	MetricsDataType_INDEXED_STRING_SERIES_DATA_TYPE        MetricsDataType = 9
	MetricsDataType_INDEXED_METRIC_STATUS_SERIES_DATA_TYPE MetricsDataType = 10
	MetricsDataType_EXTERNAL_FILE_DATA_TYPE                MetricsDataType = 11
)

// Enum value maps for MetricsDataType.
var (
	MetricsDataType_name = map[int32]string{
		0:  "NO_DATA_TYPE",
		1:  "DOUBLE_SERIES_DATA_TYPE",
		2:  "TIMESTAMP_SERIES_DATA_TYPE",
		3:  "UUID_SERIES_DATA_TYPE",
		4:  "STRING_SERIES_DATA_TYPE",
		5:  "METRIC_STATUS_SERIES_DATA_TYPE",
		6:  "INDEXED_DOUBLE_SERIES_DATA_TYPE",
		7:  "INDEXED_TIMESTAMP_SERIES_DATA_TYPE",
		8:  "INDEXED_UUID_SERIES_DATA_TYPE",
		9:  "INDEXED_STRING_SERIES_DATA_TYPE",
		10: "INDEXED_METRIC_STATUS_SERIES_DATA_TYPE",
		11: "EXTERNAL_FILE_DATA_TYPE",
	}
	MetricsDataType_value = map[string]int32{
		"NO_DATA_TYPE":                           0,
		"DOUBLE_SERIES_DATA_TYPE":                1,
		"TIMESTAMP_SERIES_DATA_TYPE":             2,
		"UUID_SERIES_DATA_TYPE":                  3,
		"STRING_SERIES_DATA_TYPE":                4,
		"METRIC_STATUS_SERIES_DATA_TYPE":         5,
		"INDEXED_DOUBLE_SERIES_DATA_TYPE":        6,
		"INDEXED_TIMESTAMP_SERIES_DATA_TYPE":     7,
		"INDEXED_UUID_SERIES_DATA_TYPE":          8,
		"INDEXED_STRING_SERIES_DATA_TYPE":        9,
		"INDEXED_METRIC_STATUS_SERIES_DATA_TYPE": 10,
		"EXTERNAL_FILE_DATA_TYPE":                11,
	}
)

func (x MetricsDataType) Enum() *MetricsDataType {
	p := new(MetricsDataType)
	*p = x
	return p
}

func (x MetricsDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricsDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_resim_metrics_proto_metrics_proto_enumTypes[0].Descriptor()
}

func (MetricsDataType) Type() protoreflect.EnumType {
	return &file_resim_metrics_proto_metrics_proto_enumTypes[0]
}

func (x MetricsDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricsDataType.Descriptor instead.
func (MetricsDataType) EnumDescriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{0}
}

type MetricStatus int32

const (
	MetricStatus_NO_METRIC_STATUS             MetricStatus = 0
	MetricStatus_PASSED_METRIC_STATUS         MetricStatus = 1
	MetricStatus_FAIL_WARN_METRIC_STATUS      MetricStatus = 2
	MetricStatus_NOT_APPLICABLE_METRIC_STATUS MetricStatus = 3
	MetricStatus_RAW_METRIC_STATUS            MetricStatus = 4
	MetricStatus_FAIL_BLOCK_METRIC_STATUS     MetricStatus = 5
)

// Enum value maps for MetricStatus.
var (
	MetricStatus_name = map[int32]string{
		0: "NO_METRIC_STATUS",
		1: "PASSED_METRIC_STATUS",
		2: "FAIL_WARN_METRIC_STATUS",
		3: "NOT_APPLICABLE_METRIC_STATUS",
		4: "RAW_METRIC_STATUS",
		5: "FAIL_BLOCK_METRIC_STATUS",
	}
	MetricStatus_value = map[string]int32{
		"NO_METRIC_STATUS":             0,
		"PASSED_METRIC_STATUS":         1,
		"FAIL_WARN_METRIC_STATUS":      2,
		"NOT_APPLICABLE_METRIC_STATUS": 3,
		"RAW_METRIC_STATUS":            4,
		"FAIL_BLOCK_METRIC_STATUS":     5,
	}
)

func (x MetricStatus) Enum() *MetricStatus {
	p := new(MetricStatus)
	*p = x
	return p
}

func (x MetricStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_resim_metrics_proto_metrics_proto_enumTypes[1].Descriptor()
}

func (MetricStatus) Type() protoreflect.EnumType {
	return &file_resim_metrics_proto_metrics_proto_enumTypes[1]
}

func (x MetricStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricStatus.Descriptor instead.
func (MetricStatus) EnumDescriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{1}
}

type MetricImportance int32

const (
	MetricImportance_NO_SPECIFIED_IMPORTANCE MetricImportance = 0
	MetricImportance_ZERO_IMPORTANCE         MetricImportance = 1
	MetricImportance_LOW_IMPORTANCE          MetricImportance = 2
	MetricImportance_MEDIUM_IMPORTANCE       MetricImportance = 3
	MetricImportance_HIGH_IMPORTANCE         MetricImportance = 4
	MetricImportance_CRITICAL_IMPORTANCE     MetricImportance = 5
)

// Enum value maps for MetricImportance.
var (
	MetricImportance_name = map[int32]string{
		0: "NO_SPECIFIED_IMPORTANCE",
		1: "ZERO_IMPORTANCE",
		2: "LOW_IMPORTANCE",
		3: "MEDIUM_IMPORTANCE",
		4: "HIGH_IMPORTANCE",
		5: "CRITICAL_IMPORTANCE",
	}
	MetricImportance_value = map[string]int32{
		"NO_SPECIFIED_IMPORTANCE": 0,
		"ZERO_IMPORTANCE":         1,
		"LOW_IMPORTANCE":          2,
		"MEDIUM_IMPORTANCE":       3,
		"HIGH_IMPORTANCE":         4,
		"CRITICAL_IMPORTANCE":     5,
	}
)

func (x MetricImportance) Enum() *MetricImportance {
	p := new(MetricImportance)
	*p = x
	return p
}

func (x MetricImportance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricImportance) Descriptor() protoreflect.EnumDescriptor {
	return file_resim_metrics_proto_metrics_proto_enumTypes[2].Descriptor()
}

func (MetricImportance) Type() protoreflect.EnumType {
	return &file_resim_metrics_proto_metrics_proto_enumTypes[2]
}

func (x MetricImportance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricImportance.Descriptor instead.
func (MetricImportance) EnumDescriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{2}
}

type MetricType int32

const (
	MetricType_NO_METRIC_TYPE                  MetricType = 0
	MetricType_DOUBLE_SUMMARY_METRIC_TYPE      MetricType = 1
	MetricType_DOUBLE_OVER_TIME_METRIC_TYPE    MetricType = 2
	MetricType_LINE_PLOT_METRIC_TYPE           MetricType = 3
	MetricType_BAR_CHART_METRIC_TYPE           MetricType = 4
	MetricType_STATES_OVER_TIME_METRIC_TYPE    MetricType = 5
	MetricType_HISTOGRAM_METRIC_TYPE           MetricType = 6
	MetricType_SCALAR_METRIC_TYPE              MetricType = 7
	MetricType_PLOTLY_METRIC_TYPE              MetricType = 8
	MetricType_IMAGE_METRIC_TYPE               MetricType = 9
	MetricType_BATCHWISE_BAR_CHART_METRIC_TYPE MetricType = 10
	MetricType_TEXT_METRIC_TYPE                MetricType = 11
)

// Enum value maps for MetricType.
var (
	MetricType_name = map[int32]string{
		0:  "NO_METRIC_TYPE",
		1:  "DOUBLE_SUMMARY_METRIC_TYPE",
		2:  "DOUBLE_OVER_TIME_METRIC_TYPE",
		3:  "LINE_PLOT_METRIC_TYPE",
		4:  "BAR_CHART_METRIC_TYPE",
		5:  "STATES_OVER_TIME_METRIC_TYPE",
		6:  "HISTOGRAM_METRIC_TYPE",
		7:  "SCALAR_METRIC_TYPE",
		8:  "PLOTLY_METRIC_TYPE",
		9:  "IMAGE_METRIC_TYPE",
		10: "BATCHWISE_BAR_CHART_METRIC_TYPE",
		11: "TEXT_METRIC_TYPE",
	}
	MetricType_value = map[string]int32{
		"NO_METRIC_TYPE":                  0,
		"DOUBLE_SUMMARY_METRIC_TYPE":      1,
		"DOUBLE_OVER_TIME_METRIC_TYPE":    2,
		"LINE_PLOT_METRIC_TYPE":           3,
		"BAR_CHART_METRIC_TYPE":           4,
		"STATES_OVER_TIME_METRIC_TYPE":    5,
		"HISTOGRAM_METRIC_TYPE":           6,
		"SCALAR_METRIC_TYPE":              7,
		"PLOTLY_METRIC_TYPE":              8,
		"IMAGE_METRIC_TYPE":               9,
		"BATCHWISE_BAR_CHART_METRIC_TYPE": 10,
		"TEXT_METRIC_TYPE":                11,
	}
)

func (x MetricType) Enum() *MetricType {
	p := new(MetricType)
	*p = x
	return p
}

func (x MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_resim_metrics_proto_metrics_proto_enumTypes[3].Descriptor()
}

func (MetricType) Type() protoreflect.EnumType {
	return &file_resim_metrics_proto_metrics_proto_enumTypes[3]
}

func (x MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricType.Descriptor instead.
func (MetricType) EnumDescriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{3}
}

type TimestampType int32

const (
	TimestampType_NO_TYPE            TimestampType = 0
	TimestampType_ABSOLUTE_TIMESTAMP TimestampType = 1
	TimestampType_RELATIVE_TIMESTAMP TimestampType = 2
)

// Enum value maps for TimestampType.
var (
	TimestampType_name = map[int32]string{
		0: "NO_TYPE",
		1: "ABSOLUTE_TIMESTAMP",
		2: "RELATIVE_TIMESTAMP",
	}
	TimestampType_value = map[string]int32{
		"NO_TYPE":            0,
		"ABSOLUTE_TIMESTAMP": 1,
		"RELATIVE_TIMESTAMP": 2,
	}
)

func (x TimestampType) Enum() *TimestampType {
	p := new(TimestampType)
	*p = x
	return p
}

func (x TimestampType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimestampType) Descriptor() protoreflect.EnumDescriptor {
	return file_resim_metrics_proto_metrics_proto_enumTypes[4].Descriptor()
}

func (TimestampType) Type() protoreflect.EnumType {
	return &file_resim_metrics_proto_metrics_proto_enumTypes[4]
}

func (x TimestampType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimestampType.Descriptor instead.
func (TimestampType) EnumDescriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{4}
}

type MetricsDataId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *uuid_proto.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MetricsDataId) Reset() {
	*x = MetricsDataId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsDataId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsDataId) ProtoMessage() {}

func (x *MetricsDataId) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsDataId.ProtoReflect.Descriptor instead.
func (*MetricsDataId) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *MetricsDataId) GetId() *uuid_proto.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

type DoubleSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Series []float64 `protobuf:"fixed64,1,rep,packed,name=series,proto3" json:"series,omitempty"`
}

func (x *DoubleSeries) Reset() {
	*x = DoubleSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleSeries) ProtoMessage() {}

func (x *DoubleSeries) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleSeries.ProtoReflect.Descriptor instead.
func (*DoubleSeries) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{1}
}

func (x *DoubleSeries) GetSeries() []float64 {
	if x != nil {
		return x.Series
	}
	return nil
}

type TimestampSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Series []*timestamppb.Timestamp `protobuf:"bytes,1,rep,name=series,proto3" json:"series,omitempty"`
}

func (x *TimestampSeries) Reset() {
	*x = TimestampSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampSeries) ProtoMessage() {}

func (x *TimestampSeries) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampSeries.ProtoReflect.Descriptor instead.
func (*TimestampSeries) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{2}
}

func (x *TimestampSeries) GetSeries() []*timestamppb.Timestamp {
	if x != nil {
		return x.Series
	}
	return nil
}

type UUIDSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Series []*uuid_proto.UUID `protobuf:"bytes,1,rep,name=series,proto3" json:"series,omitempty"`
}

func (x *UUIDSeries) Reset() {
	*x = UUIDSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUIDSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUIDSeries) ProtoMessage() {}

func (x *UUIDSeries) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUIDSeries.ProtoReflect.Descriptor instead.
func (*UUIDSeries) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{3}
}

func (x *UUIDSeries) GetSeries() []*uuid_proto.UUID {
	if x != nil {
		return x.Series
	}
	return nil
}

type StringSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Series []string `protobuf:"bytes,1,rep,name=series,proto3" json:"series,omitempty"`
}

func (x *StringSeries) Reset() {
	*x = StringSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringSeries) ProtoMessage() {}

func (x *StringSeries) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringSeries.ProtoReflect.Descriptor instead.
func (*StringSeries) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{4}
}

func (x *StringSeries) GetSeries() []string {
	if x != nil {
		return x.Series
	}
	return nil
}

type MetricStatusSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Series []MetricStatus `protobuf:"varint,1,rep,packed,name=series,proto3,enum=resim.metrics.proto.MetricStatus" json:"series,omitempty"`
}

func (x *MetricStatusSeries) Reset() {
	*x = MetricStatusSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricStatusSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricStatusSeries) ProtoMessage() {}

func (x *MetricStatusSeries) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricStatusSeries.ProtoReflect.Descriptor instead.
func (*MetricStatusSeries) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{5}
}

func (x *MetricStatusSeries) GetSeries() []MetricStatus {
	if x != nil {
		return x.Series
	}
	return nil
}

type Series struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Series:
	//
	//	*Series_Doubles
	//	*Series_Timestamps
	//	*Series_Uuids
	//	*Series_Strings
	//	*Series_Statuses
	Series isSeries_Series `protobuf_oneof:"series"`
}

func (x *Series) Reset() {
	*x = Series{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Series) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Series) ProtoMessage() {}

func (x *Series) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Series.ProtoReflect.Descriptor instead.
func (*Series) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{6}
}

func (m *Series) GetSeries() isSeries_Series {
	if m != nil {
		return m.Series
	}
	return nil
}

func (x *Series) GetDoubles() *DoubleSeries {
	if x, ok := x.GetSeries().(*Series_Doubles); ok {
		return x.Doubles
	}
	return nil
}

func (x *Series) GetTimestamps() *TimestampSeries {
	if x, ok := x.GetSeries().(*Series_Timestamps); ok {
		return x.Timestamps
	}
	return nil
}

func (x *Series) GetUuids() *UUIDSeries {
	if x, ok := x.GetSeries().(*Series_Uuids); ok {
		return x.Uuids
	}
	return nil
}

func (x *Series) GetStrings() *StringSeries {
	if x, ok := x.GetSeries().(*Series_Strings); ok {
		return x.Strings
	}
	return nil
}

func (x *Series) GetStatuses() *MetricStatusSeries {
	if x, ok := x.GetSeries().(*Series_Statuses); ok {
		return x.Statuses
	}
	return nil
}

type isSeries_Series interface {
	isSeries_Series()
}

type Series_Doubles struct {
	Doubles *DoubleSeries `protobuf:"bytes,1,opt,name=doubles,proto3,oneof"`
}

type Series_Timestamps struct {
	Timestamps *TimestampSeries `protobuf:"bytes,2,opt,name=timestamps,proto3,oneof"`
}

type Series_Uuids struct {
	Uuids *UUIDSeries `protobuf:"bytes,3,opt,name=uuids,proto3,oneof"`
}

type Series_Strings struct {
	Strings *StringSeries `protobuf:"bytes,4,opt,name=strings,proto3,oneof"`
}

type Series_Statuses struct {
	Statuses *MetricStatusSeries `protobuf:"bytes,5,opt,name=statuses,proto3,oneof"`
}

func (*Series_Doubles) isSeries_Series() {}

func (*Series_Timestamps) isSeries_Series() {}

func (*Series_Uuids) isSeries_Series() {}

func (*Series_Strings) isSeries_Series() {}

func (*Series_Statuses) isSeries_Series() {}

type SeriesPerCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryToSeries map[string]*Series `protobuf:"bytes,1,rep,name=category_to_series,json=categoryToSeries,proto3" json:"category_to_series,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SeriesPerCategory) Reset() {
	*x = SeriesPerCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeriesPerCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeriesPerCategory) ProtoMessage() {}

func (x *SeriesPerCategory) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeriesPerCategory.ProtoReflect.Descriptor instead.
func (*SeriesPerCategory) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{7}
}

func (x *SeriesPerCategory) GetCategoryToSeries() map[string]*Series {
	if x != nil {
		return x.CategoryToSeries
	}
	return nil
}

type ExternalFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ExternalFile) Reset() {
	*x = ExternalFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalFile) ProtoMessage() {}

func (x *ExternalFile) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalFile.ProtoReflect.Descriptor instead.
func (*ExternalFile) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{8}
}

func (x *ExternalFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type MetricsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricsDataId *MetricsDataId  `protobuf:"bytes,1,opt,name=metrics_data_id,json=metricsDataId,proto3" json:"metrics_data_id,omitempty"`
	DataType      MetricsDataType `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3,enum=resim.metrics.proto.MetricsDataType" json:"data_type,omitempty"`
	Name          string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Unit          string          `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit,omitempty"`
	IsPerCategory bool            `protobuf:"varint,5,opt,name=is_per_category,json=isPerCategory,proto3" json:"is_per_category,omitempty"`
	CategoryNames []string        `protobuf:"bytes,6,rep,name=category_names,json=categoryNames,proto3" json:"category_names,omitempty"`
	IsIndexed     bool            `protobuf:"varint,7,opt,name=is_indexed,json=isIndexed,proto3" json:"is_indexed,omitempty"`
	IndexDataId   *MetricsDataId  `protobuf:"bytes,8,opt,name=index_data_id,json=indexDataId,proto3" json:"index_data_id,omitempty"`
	IndexDataType MetricsDataType `protobuf:"varint,9,opt,name=index_data_type,json=indexDataType,proto3,enum=resim.metrics.proto.MetricsDataType" json:"index_data_type,omitempty"`
	// Types that are assignable to Data:
	//
	//	*MetricsData_Series
	//	*MetricsData_SeriesPerCategory
	//	*MetricsData_ExternalFile
	Data isMetricsData_Data `protobuf_oneof:"data"`
}

func (x *MetricsData) Reset() {
	*x = MetricsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsData) ProtoMessage() {}

func (x *MetricsData) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsData.ProtoReflect.Descriptor instead.
func (*MetricsData) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{9}
}

func (x *MetricsData) GetMetricsDataId() *MetricsDataId {
	if x != nil {
		return x.MetricsDataId
	}
	return nil
}

func (x *MetricsData) GetDataType() MetricsDataType {
	if x != nil {
		return x.DataType
	}
	return MetricsDataType_NO_DATA_TYPE
}

func (x *MetricsData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricsData) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *MetricsData) GetIsPerCategory() bool {
	if x != nil {
		return x.IsPerCategory
	}
	return false
}

func (x *MetricsData) GetCategoryNames() []string {
	if x != nil {
		return x.CategoryNames
	}
	return nil
}

func (x *MetricsData) GetIsIndexed() bool {
	if x != nil {
		return x.IsIndexed
	}
	return false
}

func (x *MetricsData) GetIndexDataId() *MetricsDataId {
	if x != nil {
		return x.IndexDataId
	}
	return nil
}

func (x *MetricsData) GetIndexDataType() MetricsDataType {
	if x != nil {
		return x.IndexDataType
	}
	return MetricsDataType_NO_DATA_TYPE
}

func (m *MetricsData) GetData() isMetricsData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *MetricsData) GetSeries() *Series {
	if x, ok := x.GetData().(*MetricsData_Series); ok {
		return x.Series
	}
	return nil
}

func (x *MetricsData) GetSeriesPerCategory() *SeriesPerCategory {
	if x, ok := x.GetData().(*MetricsData_SeriesPerCategory); ok {
		return x.SeriesPerCategory
	}
	return nil
}

func (x *MetricsData) GetExternalFile() *ExternalFile {
	if x, ok := x.GetData().(*MetricsData_ExternalFile); ok {
		return x.ExternalFile
	}
	return nil
}

type isMetricsData_Data interface {
	isMetricsData_Data()
}

type MetricsData_Series struct {
	Series *Series `protobuf:"bytes,10,opt,name=series,proto3,oneof"`
}

type MetricsData_SeriesPerCategory struct {
	SeriesPerCategory *SeriesPerCategory `protobuf:"bytes,11,opt,name=series_per_category,json=seriesPerCategory,proto3,oneof"`
}

type MetricsData_ExternalFile struct {
	ExternalFile *ExternalFile `protobuf:"bytes,12,opt,name=external_file,json=externalFile,proto3,oneof"`
}

func (*MetricsData_Series) isMetricsData_Data() {}

func (*MetricsData_SeriesPerCategory) isMetricsData_Data() {}

func (*MetricsData_ExternalFile) isMetricsData_Data() {}

type MetricId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *uuid_proto.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MetricId) Reset() {
	*x = MetricId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricId) ProtoMessage() {}

func (x *MetricId) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricId.ProtoReflect.Descriptor instead.
func (*MetricId) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{10}
}

func (x *MetricId) GetId() *uuid_proto.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

type JobId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *uuid_proto.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *JobId) Reset() {
	*x = JobId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobId) ProtoMessage() {}

func (x *JobId) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobId.ProtoReflect.Descriptor instead.
func (*JobId) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{11}
}

func (x *JobId) GetId() *uuid_proto.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

type EventId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *uuid_proto.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EventId) Reset() {
	*x = EventId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventId) ProtoMessage() {}

func (x *EventId) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventId.ProtoReflect.Descriptor instead.
func (*EventId) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{12}
}

func (x *EventId) GetId() *uuid_proto.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

type JobMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId           *JobId            `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobLevelMetrics *MetricCollection `protobuf:"bytes,2,opt,name=job_level_metrics,json=jobLevelMetrics,proto3" json:"job_level_metrics,omitempty"`
	MetricsData     []*MetricsData    `protobuf:"bytes,3,rep,name=metrics_data,json=metricsData,proto3" json:"metrics_data,omitempty"`
	MetricsStatus   MetricStatus      `protobuf:"varint,4,opt,name=metrics_status,json=metricsStatus,proto3,enum=resim.metrics.proto.MetricStatus" json:"metrics_status,omitempty"`
	Events          []*Event          `protobuf:"bytes,5,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *JobMetrics) Reset() {
	*x = JobMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobMetrics) ProtoMessage() {}

func (x *JobMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobMetrics.ProtoReflect.Descriptor instead.
func (*JobMetrics) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{13}
}

func (x *JobMetrics) GetJobId() *JobId {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *JobMetrics) GetJobLevelMetrics() *MetricCollection {
	if x != nil {
		return x.JobLevelMetrics
	}
	return nil
}

func (x *JobMetrics) GetMetricsData() []*MetricsData {
	if x != nil {
		return x.MetricsData
	}
	return nil
}

func (x *JobMetrics) GetMetricsStatus() MetricStatus {
	if x != nil {
		return x.MetricsStatus
	}
	return MetricStatus_NO_METRIC_STATUS
}

func (x *JobMetrics) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type MetricCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics       []*Metric    `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
	MetricsStatus MetricStatus `protobuf:"varint,2,opt,name=metrics_status,json=metricsStatus,proto3,enum=resim.metrics.proto.MetricStatus" json:"metrics_status,omitempty"`
}

func (x *MetricCollection) Reset() {
	*x = MetricCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricCollection) ProtoMessage() {}

func (x *MetricCollection) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricCollection.ProtoReflect.Descriptor instead.
func (*MetricCollection) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{14}
}

func (x *MetricCollection) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *MetricCollection) GetMetricsStatus() MetricStatus {
	if x != nil {
		return x.MetricsStatus
	}
	return MetricStatus_NO_METRIC_STATUS
}

type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricId      *MetricId        `protobuf:"bytes,1,opt,name=metric_id,json=metricId,proto3" json:"metric_id,omitempty"`
	Name          string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type          MetricType       `protobuf:"varint,3,opt,name=type,proto3,enum=resim.metrics.proto.MetricType" json:"type,omitempty"`
	Description   string           `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Status        MetricStatus     `protobuf:"varint,5,opt,name=status,proto3,enum=resim.metrics.proto.MetricStatus" json:"status,omitempty"`
	ShouldDisplay *bool            `protobuf:"varint,6,opt,name=should_display,json=shouldDisplay,proto3,oneof" json:"should_display,omitempty"`
	MetricValues  *MetricValues    `protobuf:"bytes,7,opt,name=metric_values,json=metricValues,proto3" json:"metric_values,omitempty"`
	Blocking      *bool            `protobuf:"varint,8,opt,name=blocking,proto3,oneof" json:"blocking,omitempty"`
	Importance    MetricImportance `protobuf:"varint,9,opt,name=importance,proto3,enum=resim.metrics.proto.MetricImportance" json:"importance,omitempty"`
	// Types that are assignable to ParentId:
	//
	//	*Metric_JobId
	ParentId    isMetric_ParentId `protobuf_oneof:"parent_id"`
	Order       *float32          `protobuf:"fixed32,11,opt,name=order,proto3,oneof" json:"order,omitempty"`
	EventMetric *bool             `protobuf:"varint,12,opt,name=event_metric,json=eventMetric,proto3,oneof" json:"event_metric,omitempty"`
	Tags        []*Tag            `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{15}
}

func (x *Metric) GetMetricId() *MetricId {
	if x != nil {
		return x.MetricId
	}
	return nil
}

func (x *Metric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metric) GetType() MetricType {
	if x != nil {
		return x.Type
	}
	return MetricType_NO_METRIC_TYPE
}

func (x *Metric) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Metric) GetStatus() MetricStatus {
	if x != nil {
		return x.Status
	}
	return MetricStatus_NO_METRIC_STATUS
}

func (x *Metric) GetShouldDisplay() bool {
	if x != nil && x.ShouldDisplay != nil {
		return *x.ShouldDisplay
	}
	return false
}

func (x *Metric) GetMetricValues() *MetricValues {
	if x != nil {
		return x.MetricValues
	}
	return nil
}

func (x *Metric) GetBlocking() bool {
	if x != nil && x.Blocking != nil {
		return *x.Blocking
	}
	return false
}

func (x *Metric) GetImportance() MetricImportance {
	if x != nil {
		return x.Importance
	}
	return MetricImportance_NO_SPECIFIED_IMPORTANCE
}

func (m *Metric) GetParentId() isMetric_ParentId {
	if m != nil {
		return m.ParentId
	}
	return nil
}

func (x *Metric) GetJobId() *JobId {
	if x, ok := x.GetParentId().(*Metric_JobId); ok {
		return x.JobId
	}
	return nil
}

func (x *Metric) GetOrder() float32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *Metric) GetEventMetric() bool {
	if x != nil && x.EventMetric != nil {
		return *x.EventMetric
	}
	return false
}

func (x *Metric) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type isMetric_ParentId interface {
	isMetric_ParentId()
}

type Metric_JobId struct {
	JobId *JobId `protobuf:"bytes,10,opt,name=job_id,json=jobId,proto3,oneof"`
}

func (*Metric_JobId) isMetric_ParentId() {}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{16}
}

func (x *Tag) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Tag) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId       *EventId               `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Tags          []string               `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	Metrics       []*MetricId            `protobuf:"bytes,5,rep,name=metrics,proto3" json:"metrics,omitempty"`
	Status        MetricStatus           `protobuf:"varint,6,opt,name=status,proto3,enum=resim.metrics.proto.MetricStatus" json:"status,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TimestampType TimestampType          `protobuf:"varint,9,opt,name=timestamp_type,json=timestampType,proto3,enum=resim.metrics.proto.TimestampType" json:"timestamp_type,omitempty"`
	Importance    MetricImportance       `protobuf:"varint,8,opt,name=importance,proto3,enum=resim.metrics.proto.MetricImportance" json:"importance,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{17}
}

func (x *Event) GetEventId() *EventId {
	if x != nil {
		return x.EventId
	}
	return nil
}

func (x *Event) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Event) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Event) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Event) GetMetrics() []*MetricId {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Event) GetStatus() MetricStatus {
	if x != nil {
		return x.Status
	}
	return MetricStatus_NO_METRIC_STATUS
}

func (x *Event) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Event) GetTimestampType() TimestampType {
	if x != nil {
		return x.TimestampType
	}
	return TimestampType_NO_TYPE
}

func (x *Event) GetImportance() MetricImportance {
	if x != nil {
		return x.Importance
	}
	return MetricImportance_NO_SPECIFIED_IMPORTANCE
}

type MetricValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MetricValues:
	//
	//	*MetricValues_DoubleMetricValues
	//	*MetricValues_DoubleOverTimeMetricValues
	//	*MetricValues_LinePlotMetricValues
	//	*MetricValues_BarChartMetricValues
	//	*MetricValues_StatesOverTimeMetricValues
	//	*MetricValues_HistogramMetricValues
	//	*MetricValues_ScalarMetricValues
	//	*MetricValues_PlotlyMetricValues
	//	*MetricValues_ImageMetricValues
	//	*MetricValues_BatchwiseBarChartMetricValues
	//	*MetricValues_TextMetricValues
	MetricValues isMetricValues_MetricValues `protobuf_oneof:"metric_values"`
}

func (x *MetricValues) Reset() {
	*x = MetricValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricValues) ProtoMessage() {}

func (x *MetricValues) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricValues.ProtoReflect.Descriptor instead.
func (*MetricValues) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{18}
}

func (m *MetricValues) GetMetricValues() isMetricValues_MetricValues {
	if m != nil {
		return m.MetricValues
	}
	return nil
}

func (x *MetricValues) GetDoubleMetricValues() *DoubleSummaryMetricValues {
	if x, ok := x.GetMetricValues().(*MetricValues_DoubleMetricValues); ok {
		return x.DoubleMetricValues
	}
	return nil
}

func (x *MetricValues) GetDoubleOverTimeMetricValues() *DoubleOverTimeMetricValues {
	if x, ok := x.GetMetricValues().(*MetricValues_DoubleOverTimeMetricValues); ok {
		return x.DoubleOverTimeMetricValues
	}
	return nil
}

func (x *MetricValues) GetLinePlotMetricValues() *LinePlotMetricValues {
	if x, ok := x.GetMetricValues().(*MetricValues_LinePlotMetricValues); ok {
		return x.LinePlotMetricValues
	}
	return nil
}

func (x *MetricValues) GetBarChartMetricValues() *BarChartMetricValues {
	if x, ok := x.GetMetricValues().(*MetricValues_BarChartMetricValues); ok {
		return x.BarChartMetricValues
	}
	return nil
}

func (x *MetricValues) GetStatesOverTimeMetricValues() *StatesOverTimeMetricValues {
	if x, ok := x.GetMetricValues().(*MetricValues_StatesOverTimeMetricValues); ok {
		return x.StatesOverTimeMetricValues
	}
	return nil
}

func (x *MetricValues) GetHistogramMetricValues() *HistogramMetricValues {
	if x, ok := x.GetMetricValues().(*MetricValues_HistogramMetricValues); ok {
		return x.HistogramMetricValues
	}
	return nil
}

func (x *MetricValues) GetScalarMetricValues() *ScalarMetricValues {
	if x, ok := x.GetMetricValues().(*MetricValues_ScalarMetricValues); ok {
		return x.ScalarMetricValues
	}
	return nil
}

func (x *MetricValues) GetPlotlyMetricValues() *PlotlyMetricValues {
	if x, ok := x.GetMetricValues().(*MetricValues_PlotlyMetricValues); ok {
		return x.PlotlyMetricValues
	}
	return nil
}

func (x *MetricValues) GetImageMetricValues() *ImageMetricValues {
	if x, ok := x.GetMetricValues().(*MetricValues_ImageMetricValues); ok {
		return x.ImageMetricValues
	}
	return nil
}

func (x *MetricValues) GetBatchwiseBarChartMetricValues() *BatchwiseBarChartMetricValues {
	if x, ok := x.GetMetricValues().(*MetricValues_BatchwiseBarChartMetricValues); ok {
		return x.BatchwiseBarChartMetricValues
	}
	return nil
}

func (x *MetricValues) GetTextMetricValues() *TextMetricValues {
	if x, ok := x.GetMetricValues().(*MetricValues_TextMetricValues); ok {
		return x.TextMetricValues
	}
	return nil
}

type isMetricValues_MetricValues interface {
	isMetricValues_MetricValues()
}

type MetricValues_DoubleMetricValues struct {
	DoubleMetricValues *DoubleSummaryMetricValues `protobuf:"bytes,1,opt,name=double_metric_values,json=doubleMetricValues,proto3,oneof"`
}

type MetricValues_DoubleOverTimeMetricValues struct {
	DoubleOverTimeMetricValues *DoubleOverTimeMetricValues `protobuf:"bytes,2,opt,name=double_over_time_metric_values,json=doubleOverTimeMetricValues,proto3,oneof"`
}

type MetricValues_LinePlotMetricValues struct {
	LinePlotMetricValues *LinePlotMetricValues `protobuf:"bytes,3,opt,name=line_plot_metric_values,json=linePlotMetricValues,proto3,oneof"`
}

type MetricValues_BarChartMetricValues struct {
	BarChartMetricValues *BarChartMetricValues `protobuf:"bytes,4,opt,name=bar_chart_metric_values,json=barChartMetricValues,proto3,oneof"`
}

type MetricValues_StatesOverTimeMetricValues struct {
	StatesOverTimeMetricValues *StatesOverTimeMetricValues `protobuf:"bytes,5,opt,name=states_over_time_metric_values,json=statesOverTimeMetricValues,proto3,oneof"`
}

type MetricValues_HistogramMetricValues struct {
	HistogramMetricValues *HistogramMetricValues `protobuf:"bytes,6,opt,name=histogram_metric_values,json=histogramMetricValues,proto3,oneof"`
}

type MetricValues_ScalarMetricValues struct {
	ScalarMetricValues *ScalarMetricValues `protobuf:"bytes,7,opt,name=scalar_metric_values,json=scalarMetricValues,proto3,oneof"`
}

type MetricValues_PlotlyMetricValues struct {
	PlotlyMetricValues *PlotlyMetricValues `protobuf:"bytes,8,opt,name=plotly_metric_values,json=plotlyMetricValues,proto3,oneof"`
}

type MetricValues_ImageMetricValues struct {
	ImageMetricValues *ImageMetricValues `protobuf:"bytes,9,opt,name=image_metric_values,json=imageMetricValues,proto3,oneof"`
}

type MetricValues_BatchwiseBarChartMetricValues struct {
	BatchwiseBarChartMetricValues *BatchwiseBarChartMetricValues `protobuf:"bytes,10,opt,name=batchwise_bar_chart_metric_values,json=batchwiseBarChartMetricValues,proto3,oneof"`
}

type MetricValues_TextMetricValues struct {
	TextMetricValues *TextMetricValues `protobuf:"bytes,11,opt,name=text_metric_values,json=textMetricValues,proto3,oneof"`
}

func (*MetricValues_DoubleMetricValues) isMetricValues_MetricValues() {}

func (*MetricValues_DoubleOverTimeMetricValues) isMetricValues_MetricValues() {}

func (*MetricValues_LinePlotMetricValues) isMetricValues_MetricValues() {}

func (*MetricValues_BarChartMetricValues) isMetricValues_MetricValues() {}

func (*MetricValues_StatesOverTimeMetricValues) isMetricValues_MetricValues() {}

func (*MetricValues_HistogramMetricValues) isMetricValues_MetricValues() {}

func (*MetricValues_ScalarMetricValues) isMetricValues_MetricValues() {}

func (*MetricValues_PlotlyMetricValues) isMetricValues_MetricValues() {}

func (*MetricValues_ImageMetricValues) isMetricValues_MetricValues() {}

func (*MetricValues_BatchwiseBarChartMetricValues) isMetricValues_MetricValues() {}

func (*MetricValues_TextMetricValues) isMetricValues_MetricValues() {}

type DoubleFailureDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailsAbove *float64 `protobuf:"fixed64,1,opt,name=fails_above,json=failsAbove,proto3,oneof" json:"fails_above,omitempty"`
	FailsBelow *float64 `protobuf:"fixed64,2,opt,name=fails_below,json=failsBelow,proto3,oneof" json:"fails_below,omitempty"`
}

func (x *DoubleFailureDefinition) Reset() {
	*x = DoubleFailureDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleFailureDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleFailureDefinition) ProtoMessage() {}

func (x *DoubleFailureDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleFailureDefinition.ProtoReflect.Descriptor instead.
func (*DoubleFailureDefinition) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{19}
}

func (x *DoubleFailureDefinition) GetFailsAbove() float64 {
	if x != nil && x.FailsAbove != nil {
		return *x.FailsAbove
	}
	return 0
}

func (x *DoubleFailureDefinition) GetFailsBelow() float64 {
	if x != nil && x.FailsBelow != nil {
		return *x.FailsBelow
	}
	return 0
}

type DoubleSummaryMetricValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueDataId  *MetricsDataId `protobuf:"bytes,1,opt,name=value_data_id,json=valueDataId,proto3" json:"value_data_id,omitempty"`
	StatusDataId *MetricsDataId `protobuf:"bytes,2,opt,name=status_data_id,json=statusDataId,proto3" json:"status_data_id,omitempty"`
	// Types that are assignable to Index:
	//
	//	*DoubleSummaryMetricValues_SeriesIndex
	//	*DoubleSummaryMetricValues_TimestampIndex
	//	*DoubleSummaryMetricValues_UuidIndex
	//	*DoubleSummaryMetricValues_StringIndex
	Index             isDoubleSummaryMetricValues_Index `protobuf_oneof:"index"`
	FailureDefinition *DoubleFailureDefinition          `protobuf:"bytes,7,opt,name=failure_definition,json=failureDefinition,proto3" json:"failure_definition,omitempty"`
}

func (x *DoubleSummaryMetricValues) Reset() {
	*x = DoubleSummaryMetricValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleSummaryMetricValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleSummaryMetricValues) ProtoMessage() {}

func (x *DoubleSummaryMetricValues) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleSummaryMetricValues.ProtoReflect.Descriptor instead.
func (*DoubleSummaryMetricValues) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{20}
}

func (x *DoubleSummaryMetricValues) GetValueDataId() *MetricsDataId {
	if x != nil {
		return x.ValueDataId
	}
	return nil
}

func (x *DoubleSummaryMetricValues) GetStatusDataId() *MetricsDataId {
	if x != nil {
		return x.StatusDataId
	}
	return nil
}

func (m *DoubleSummaryMetricValues) GetIndex() isDoubleSummaryMetricValues_Index {
	if m != nil {
		return m.Index
	}
	return nil
}

func (x *DoubleSummaryMetricValues) GetSeriesIndex() uint32 {
	if x, ok := x.GetIndex().(*DoubleSummaryMetricValues_SeriesIndex); ok {
		return x.SeriesIndex
	}
	return 0
}

func (x *DoubleSummaryMetricValues) GetTimestampIndex() *timestamppb.Timestamp {
	if x, ok := x.GetIndex().(*DoubleSummaryMetricValues_TimestampIndex); ok {
		return x.TimestampIndex
	}
	return nil
}

func (x *DoubleSummaryMetricValues) GetUuidIndex() *uuid_proto.UUID {
	if x, ok := x.GetIndex().(*DoubleSummaryMetricValues_UuidIndex); ok {
		return x.UuidIndex
	}
	return nil
}

func (x *DoubleSummaryMetricValues) GetStringIndex() string {
	if x, ok := x.GetIndex().(*DoubleSummaryMetricValues_StringIndex); ok {
		return x.StringIndex
	}
	return ""
}

func (x *DoubleSummaryMetricValues) GetFailureDefinition() *DoubleFailureDefinition {
	if x != nil {
		return x.FailureDefinition
	}
	return nil
}

type isDoubleSummaryMetricValues_Index interface {
	isDoubleSummaryMetricValues_Index()
}

type DoubleSummaryMetricValues_SeriesIndex struct {
	SeriesIndex uint32 `protobuf:"varint,3,opt,name=series_index,json=seriesIndex,proto3,oneof"`
}

type DoubleSummaryMetricValues_TimestampIndex struct {
	TimestampIndex *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp_index,json=timestampIndex,proto3,oneof"`
}

type DoubleSummaryMetricValues_UuidIndex struct {
	UuidIndex *uuid_proto.UUID `protobuf:"bytes,5,opt,name=uuid_index,json=uuidIndex,proto3,oneof"`
}

type DoubleSummaryMetricValues_StringIndex struct {
	StringIndex string `protobuf:"bytes,6,opt,name=string_index,json=stringIndex,proto3,oneof"`
}

func (*DoubleSummaryMetricValues_SeriesIndex) isDoubleSummaryMetricValues_Index() {}

func (*DoubleSummaryMetricValues_TimestampIndex) isDoubleSummaryMetricValues_Index() {}

func (*DoubleSummaryMetricValues_UuidIndex) isDoubleSummaryMetricValues_Index() {}

func (*DoubleSummaryMetricValues_StringIndex) isDoubleSummaryMetricValues_Index() {}

type DoubleOverTimeMetricValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoublesOverTimeDataId  []*MetricsDataId           `protobuf:"bytes,1,rep,name=doubles_over_time_data_id,json=doublesOverTimeDataId,proto3" json:"doubles_over_time_data_id,omitempty"`
	StatusesOverTimeDataId []*MetricsDataId           `protobuf:"bytes,2,rep,name=statuses_over_time_data_id,json=statusesOverTimeDataId,proto3" json:"statuses_over_time_data_id,omitempty"`
	FailureDefinition      []*DoubleFailureDefinition `protobuf:"bytes,3,rep,name=failure_definition,json=failureDefinition,proto3" json:"failure_definition,omitempty"`
	StartTime              *timestamppb.Timestamp     `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime                *timestamppb.Timestamp     `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	YAxisName              *string                    `protobuf:"bytes,6,opt,name=y_axis_name,json=yAxisName,proto3,oneof" json:"y_axis_name,omitempty"`
	LegendSeriesNames      []string                   `protobuf:"bytes,7,rep,name=legend_series_names,json=legendSeriesNames,proto3" json:"legend_series_names,omitempty"`
}

func (x *DoubleOverTimeMetricValues) Reset() {
	*x = DoubleOverTimeMetricValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleOverTimeMetricValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleOverTimeMetricValues) ProtoMessage() {}

func (x *DoubleOverTimeMetricValues) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleOverTimeMetricValues.ProtoReflect.Descriptor instead.
func (*DoubleOverTimeMetricValues) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{21}
}

func (x *DoubleOverTimeMetricValues) GetDoublesOverTimeDataId() []*MetricsDataId {
	if x != nil {
		return x.DoublesOverTimeDataId
	}
	return nil
}

func (x *DoubleOverTimeMetricValues) GetStatusesOverTimeDataId() []*MetricsDataId {
	if x != nil {
		return x.StatusesOverTimeDataId
	}
	return nil
}

func (x *DoubleOverTimeMetricValues) GetFailureDefinition() []*DoubleFailureDefinition {
	if x != nil {
		return x.FailureDefinition
	}
	return nil
}

func (x *DoubleOverTimeMetricValues) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *DoubleOverTimeMetricValues) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *DoubleOverTimeMetricValues) GetYAxisName() string {
	if x != nil && x.YAxisName != nil {
		return *x.YAxisName
	}
	return ""
}

func (x *DoubleOverTimeMetricValues) GetLegendSeriesNames() []string {
	if x != nil {
		return x.LegendSeriesNames
	}
	return nil
}

type LinePlotMetricValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDoublesDataId    []*MetricsDataId `protobuf:"bytes,1,rep,name=x_doubles_data_id,json=xDoublesDataId,proto3" json:"x_doubles_data_id,omitempty"`
	YDoublesDataId    []*MetricsDataId `protobuf:"bytes,2,rep,name=y_doubles_data_id,json=yDoublesDataId,proto3" json:"y_doubles_data_id,omitempty"`
	StatusesDataId    []*MetricsDataId `protobuf:"bytes,3,rep,name=statuses_data_id,json=statusesDataId,proto3" json:"statuses_data_id,omitempty"`
	XAxisName         *string          `protobuf:"bytes,4,opt,name=x_axis_name,json=xAxisName,proto3,oneof" json:"x_axis_name,omitempty"`
	YAxisName         *string          `protobuf:"bytes,5,opt,name=y_axis_name,json=yAxisName,proto3,oneof" json:"y_axis_name,omitempty"`
	LegendSeriesNames []string         `protobuf:"bytes,6,rep,name=legend_series_names,json=legendSeriesNames,proto3" json:"legend_series_names,omitempty"`
}

func (x *LinePlotMetricValues) Reset() {
	*x = LinePlotMetricValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinePlotMetricValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinePlotMetricValues) ProtoMessage() {}

func (x *LinePlotMetricValues) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinePlotMetricValues.ProtoReflect.Descriptor instead.
func (*LinePlotMetricValues) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{22}
}

func (x *LinePlotMetricValues) GetXDoublesDataId() []*MetricsDataId {
	if x != nil {
		return x.XDoublesDataId
	}
	return nil
}

func (x *LinePlotMetricValues) GetYDoublesDataId() []*MetricsDataId {
	if x != nil {
		return x.YDoublesDataId
	}
	return nil
}

func (x *LinePlotMetricValues) GetStatusesDataId() []*MetricsDataId {
	if x != nil {
		return x.StatusesDataId
	}
	return nil
}

func (x *LinePlotMetricValues) GetXAxisName() string {
	if x != nil && x.XAxisName != nil {
		return *x.XAxisName
	}
	return ""
}

func (x *LinePlotMetricValues) GetYAxisName() string {
	if x != nil && x.YAxisName != nil {
		return *x.YAxisName
	}
	return ""
}

func (x *LinePlotMetricValues) GetLegendSeriesNames() []string {
	if x != nil {
		return x.LegendSeriesNames
	}
	return nil
}

type BarChartMetricValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValuesDataId      []*MetricsDataId `protobuf:"bytes,1,rep,name=values_data_id,json=valuesDataId,proto3" json:"values_data_id,omitempty"`
	StatusesDataId    []*MetricsDataId `protobuf:"bytes,2,rep,name=statuses_data_id,json=statusesDataId,proto3" json:"statuses_data_id,omitempty"`
	LegendSeriesNames []string         `protobuf:"bytes,3,rep,name=legend_series_names,json=legendSeriesNames,proto3" json:"legend_series_names,omitempty"`
	XAxisName         *string          `protobuf:"bytes,4,opt,name=x_axis_name,json=xAxisName,proto3,oneof" json:"x_axis_name,omitempty"`
	YAxisName         *string          `protobuf:"bytes,5,opt,name=y_axis_name,json=yAxisName,proto3,oneof" json:"y_axis_name,omitempty"`
	StackBars         *bool            `protobuf:"varint,6,opt,name=stack_bars,json=stackBars,proto3,oneof" json:"stack_bars,omitempty"`
}

func (x *BarChartMetricValues) Reset() {
	*x = BarChartMetricValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarChartMetricValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarChartMetricValues) ProtoMessage() {}

func (x *BarChartMetricValues) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarChartMetricValues.ProtoReflect.Descriptor instead.
func (*BarChartMetricValues) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{23}
}

func (x *BarChartMetricValues) GetValuesDataId() []*MetricsDataId {
	if x != nil {
		return x.ValuesDataId
	}
	return nil
}

func (x *BarChartMetricValues) GetStatusesDataId() []*MetricsDataId {
	if x != nil {
		return x.StatusesDataId
	}
	return nil
}

func (x *BarChartMetricValues) GetLegendSeriesNames() []string {
	if x != nil {
		return x.LegendSeriesNames
	}
	return nil
}

func (x *BarChartMetricValues) GetXAxisName() string {
	if x != nil && x.XAxisName != nil {
		return *x.XAxisName
	}
	return ""
}

func (x *BarChartMetricValues) GetYAxisName() string {
	if x != nil && x.YAxisName != nil {
		return *x.YAxisName
	}
	return ""
}

func (x *BarChartMetricValues) GetStackBars() bool {
	if x != nil && x.StackBars != nil {
		return *x.StackBars
	}
	return false
}

type BatchwiseBarChartMetricValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimesDataId    []*MetricsDataId `protobuf:"bytes,1,rep,name=times_data_id,json=timesDataId,proto3" json:"times_data_id,omitempty"`
	ValuesDataId   []*MetricsDataId `protobuf:"bytes,2,rep,name=values_data_id,json=valuesDataId,proto3" json:"values_data_id,omitempty"`
	StatusesDataId []*MetricsDataId `protobuf:"bytes,3,rep,name=statuses_data_id,json=statusesDataId,proto3" json:"statuses_data_id,omitempty"`
	Categories     []string         `protobuf:"bytes,4,rep,name=categories,proto3" json:"categories,omitempty"`
	Colors         []string         `protobuf:"bytes,5,rep,name=colors,proto3" json:"colors,omitempty"`
	XAxisName      *string          `protobuf:"bytes,6,opt,name=x_axis_name,json=xAxisName,proto3,oneof" json:"x_axis_name,omitempty"`
	YAxisName      *string          `protobuf:"bytes,7,opt,name=y_axis_name,json=yAxisName,proto3,oneof" json:"y_axis_name,omitempty"`
	StackBars      *bool            `protobuf:"varint,8,opt,name=stack_bars,json=stackBars,proto3,oneof" json:"stack_bars,omitempty"`
	ProjectId      *uuid_proto.UUID `protobuf:"bytes,9,opt,name=project_id,json=projectId,proto3,oneof" json:"project_id,omitempty"`
}

func (x *BatchwiseBarChartMetricValues) Reset() {
	*x = BatchwiseBarChartMetricValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchwiseBarChartMetricValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchwiseBarChartMetricValues) ProtoMessage() {}

func (x *BatchwiseBarChartMetricValues) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchwiseBarChartMetricValues.ProtoReflect.Descriptor instead.
func (*BatchwiseBarChartMetricValues) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{24}
}

func (x *BatchwiseBarChartMetricValues) GetTimesDataId() []*MetricsDataId {
	if x != nil {
		return x.TimesDataId
	}
	return nil
}

func (x *BatchwiseBarChartMetricValues) GetValuesDataId() []*MetricsDataId {
	if x != nil {
		return x.ValuesDataId
	}
	return nil
}

func (x *BatchwiseBarChartMetricValues) GetStatusesDataId() []*MetricsDataId {
	if x != nil {
		return x.StatusesDataId
	}
	return nil
}

func (x *BatchwiseBarChartMetricValues) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *BatchwiseBarChartMetricValues) GetColors() []string {
	if x != nil {
		return x.Colors
	}
	return nil
}

func (x *BatchwiseBarChartMetricValues) GetXAxisName() string {
	if x != nil && x.XAxisName != nil {
		return *x.XAxisName
	}
	return ""
}

func (x *BatchwiseBarChartMetricValues) GetYAxisName() string {
	if x != nil && x.YAxisName != nil {
		return *x.YAxisName
	}
	return ""
}

func (x *BatchwiseBarChartMetricValues) GetStackBars() bool {
	if x != nil && x.StackBars != nil {
		return *x.StackBars
	}
	return false
}

func (x *BatchwiseBarChartMetricValues) GetProjectId() *uuid_proto.UUID {
	if x != nil {
		return x.ProjectId
	}
	return nil
}

type StatesOverTimeMetricValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatesOverTimeDataId   []*MetricsDataId `protobuf:"bytes,1,rep,name=states_over_time_data_id,json=statesOverTimeDataId,proto3" json:"states_over_time_data_id,omitempty"`
	StatusesOverTimeDataId []*MetricsDataId `protobuf:"bytes,2,rep,name=statuses_over_time_data_id,json=statusesOverTimeDataId,proto3" json:"statuses_over_time_data_id,omitempty"`
	StatesSet              []string         `protobuf:"bytes,3,rep,name=states_set,json=statesSet,proto3" json:"states_set,omitempty"`
	FailureStates          []string         `protobuf:"bytes,4,rep,name=failure_states,json=failureStates,proto3" json:"failure_states,omitempty"`
	LegendSeriesNames      []string         `protobuf:"bytes,5,rep,name=legend_series_names,json=legendSeriesNames,proto3" json:"legend_series_names,omitempty"`
}

func (x *StatesOverTimeMetricValues) Reset() {
	*x = StatesOverTimeMetricValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatesOverTimeMetricValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatesOverTimeMetricValues) ProtoMessage() {}

func (x *StatesOverTimeMetricValues) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatesOverTimeMetricValues.ProtoReflect.Descriptor instead.
func (*StatesOverTimeMetricValues) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{25}
}

func (x *StatesOverTimeMetricValues) GetStatesOverTimeDataId() []*MetricsDataId {
	if x != nil {
		return x.StatesOverTimeDataId
	}
	return nil
}

func (x *StatesOverTimeMetricValues) GetStatusesOverTimeDataId() []*MetricsDataId {
	if x != nil {
		return x.StatusesOverTimeDataId
	}
	return nil
}

func (x *StatesOverTimeMetricValues) GetStatesSet() []string {
	if x != nil {
		return x.StatesSet
	}
	return nil
}

func (x *StatesOverTimeMetricValues) GetFailureStates() []string {
	if x != nil {
		return x.FailureStates
	}
	return nil
}

func (x *StatesOverTimeMetricValues) GetLegendSeriesNames() []string {
	if x != nil {
		return x.LegendSeriesNames
	}
	return nil
}

type HistogramMetricValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValuesDataId   *MetricsDataId                  `protobuf:"bytes,1,opt,name=values_data_id,json=valuesDataId,proto3" json:"values_data_id,omitempty"`
	StatusesDataId *MetricsDataId                  `protobuf:"bytes,2,opt,name=statuses_data_id,json=statusesDataId,proto3" json:"statuses_data_id,omitempty"`
	Buckets        []*HistogramMetricValues_Bucket `protobuf:"bytes,3,rep,name=buckets,proto3" json:"buckets,omitempty"`
	LowerBound     *float64                        `protobuf:"fixed64,4,opt,name=lower_bound,json=lowerBound,proto3,oneof" json:"lower_bound,omitempty"`
	UpperBound     *float64                        `protobuf:"fixed64,5,opt,name=upper_bound,json=upperBound,proto3,oneof" json:"upper_bound,omitempty"`
	XAxisName      *string                         `protobuf:"bytes,6,opt,name=x_axis_name,json=xAxisName,proto3,oneof" json:"x_axis_name,omitempty"`
}

func (x *HistogramMetricValues) Reset() {
	*x = HistogramMetricValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistogramMetricValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramMetricValues) ProtoMessage() {}

func (x *HistogramMetricValues) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramMetricValues.ProtoReflect.Descriptor instead.
func (*HistogramMetricValues) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{26}
}

func (x *HistogramMetricValues) GetValuesDataId() *MetricsDataId {
	if x != nil {
		return x.ValuesDataId
	}
	return nil
}

func (x *HistogramMetricValues) GetStatusesDataId() *MetricsDataId {
	if x != nil {
		return x.StatusesDataId
	}
	return nil
}

func (x *HistogramMetricValues) GetBuckets() []*HistogramMetricValues_Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *HistogramMetricValues) GetLowerBound() float64 {
	if x != nil && x.LowerBound != nil {
		return *x.LowerBound
	}
	return 0
}

func (x *HistogramMetricValues) GetUpperBound() float64 {
	if x != nil && x.UpperBound != nil {
		return *x.UpperBound
	}
	return 0
}

func (x *HistogramMetricValues) GetXAxisName() string {
	if x != nil && x.XAxisName != nil {
		return *x.XAxisName
	}
	return ""
}

type ScalarMetricValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value             *float64                 `protobuf:"fixed64,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
	FailureDefinition *DoubleFailureDefinition `protobuf:"bytes,2,opt,name=failure_definition,json=failureDefinition,proto3,oneof" json:"failure_definition,omitempty"`
	Unit              *string                  `protobuf:"bytes,3,opt,name=unit,proto3,oneof" json:"unit,omitempty"`
}

func (x *ScalarMetricValues) Reset() {
	*x = ScalarMetricValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarMetricValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarMetricValues) ProtoMessage() {}

func (x *ScalarMetricValues) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarMetricValues.ProtoReflect.Descriptor instead.
func (*ScalarMetricValues) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{27}
}

func (x *ScalarMetricValues) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *ScalarMetricValues) GetFailureDefinition() *DoubleFailureDefinition {
	if x != nil {
		return x.FailureDefinition
	}
	return nil
}

func (x *ScalarMetricValues) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

type PlotlyMetricValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Json *structpb.Struct `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *PlotlyMetricValues) Reset() {
	*x = PlotlyMetricValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlotlyMetricValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlotlyMetricValues) ProtoMessage() {}

func (x *PlotlyMetricValues) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlotlyMetricValues.ProtoReflect.Descriptor instead.
func (*PlotlyMetricValues) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{28}
}

func (x *PlotlyMetricValues) GetJson() *structpb.Struct {
	if x != nil {
		return x.Json
	}
	return nil
}

type ImageMetricValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageDataId *MetricsDataId `protobuf:"bytes,1,opt,name=image_data_id,json=imageDataId,proto3" json:"image_data_id,omitempty"`
}

func (x *ImageMetricValues) Reset() {
	*x = ImageMetricValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageMetricValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMetricValues) ProtoMessage() {}

func (x *ImageMetricValues) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMetricValues.ProtoReflect.Descriptor instead.
func (*ImageMetricValues) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{29}
}

func (x *ImageMetricValues) GetImageDataId() *MetricsDataId {
	if x != nil {
		return x.ImageDataId
	}
	return nil
}

type TextMetricValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TextMetricValues) Reset() {
	*x = TextMetricValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextMetricValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextMetricValues) ProtoMessage() {}

func (x *TextMetricValues) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextMetricValues.ProtoReflect.Descriptor instead.
func (*TextMetricValues) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{30}
}

func (x *TextMetricValues) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type HistogramMetricValues_Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lower *float64 `protobuf:"fixed64,1,opt,name=lower,proto3,oneof" json:"lower,omitempty"`
	Upper *float64 `protobuf:"fixed64,2,opt,name=upper,proto3,oneof" json:"upper,omitempty"`
}

func (x *HistogramMetricValues_Bucket) Reset() {
	*x = HistogramMetricValues_Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resim_metrics_proto_metrics_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistogramMetricValues_Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramMetricValues_Bucket) ProtoMessage() {}

func (x *HistogramMetricValues_Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_resim_metrics_proto_metrics_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramMetricValues_Bucket.ProtoReflect.Descriptor instead.
func (*HistogramMetricValues_Bucket) Descriptor() ([]byte, []int) {
	return file_resim_metrics_proto_metrics_proto_rawDescGZIP(), []int{26, 0}
}

func (x *HistogramMetricValues_Bucket) GetLower() float64 {
	if x != nil && x.Lower != nil {
		return *x.Lower
	}
	return 0
}

func (x *HistogramMetricValues_Bucket) GetUpper() float64 {
	if x != nil && x.Upper != nil {
		return *x.Upper
	}
	return 0
}

var File_resim_metrics_proto_metrics_proto protoreflect.FileDescriptor

var file_resim_metrics_proto_metrics_proto_rawDesc = []byte{
	0x0a, 0x21, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2f, 0x75,
	0x74, 0x69, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x75, 0x75, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x0c, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x22, 0x45, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x37, 0x0a, 0x0a, 0x55, 0x55, 0x49, 0x44,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x22, 0x26, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x12, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x39, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0xd8, 0x02, 0x0a, 0x06, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x07, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x37, 0x0a, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65,
	0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x50, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x6a, 0x0a, 0x12, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x50, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54,
	0x6f, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x60, 0x0a, 0x15, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xab, 0x05,
	0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a,
	0x0f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x72,
	0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x50, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x64, 0x12, 0x46, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x69,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x52, 0x0b, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x58, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72,
	0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x65,
	0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x0d, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2d, 0x0a, 0x08, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x05, 0x4a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xd5, 0x02, 0x0a, 0x0a, 0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x52,
	0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x11, 0x6a, 0x6f, 0x62, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6a, 0x6f, 0x62, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48,
	0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x93, 0x01, 0x0a,
	0x10, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xb4, 0x05, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x3a, 0x0a,
	0x09, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x72, 0x65,
	0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2a, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0d, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65,
	0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x48, 0x00, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x04, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x42, 0x0b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0x2d, 0x0a, 0x03, 0x54, 0x61, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xca, 0x03, 0x0a, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x49, 0x64, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x39,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x49, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x72, 0x65,
	0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45,
	0x0a, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x8a, 0x09, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x14, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x12, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x1e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x1a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x62, 0x0a, 0x17, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6c, 0x6f, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x6f,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x14, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x17, 0x62, 0x61, 0x72, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x72,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x14, 0x62, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x1e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x76,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x64, 0x0a, 0x17, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x15, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x14, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x12, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x14, 0x70, 0x6c, 0x6f, 0x74, 0x6c, 0x79, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x6f, 0x74, 0x6c, 0x79, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x12, 0x70, 0x6c,
	0x6f, 0x74, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x58, 0x0a, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x7e, 0x0a, 0x21, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x77, 0x69, 0x73, 0x65, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x77, 0x69, 0x73, 0x65, 0x42, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x1d, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x77, 0x69, 0x73, 0x65, 0x42, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x12, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x10, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x41, 0x62, 0x6f, 0x76,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x62, 0x65,
	0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x0a, 0x66, 0x61, 0x69,
	0x6c, 0x73, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x73, 0x5f, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x73, 0x5f, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x22, 0xd8, 0x03, 0x0a, 0x19, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x64, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64,
	0x12, 0x48, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x45, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x0a, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x73,
	0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x48, 0x00, 0x52,
	0x09, 0x75, 0x75, 0x69, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x5b, 0x0a, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x65,
	0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb4, 0x04, 0x0a, 0x1a, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x19, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x52, 0x15, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x64, 0x12, 0x5e, 0x0a, 0x1a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x52, 0x16, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x64, 0x12, 0x5b, 0x0a, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x79,
	0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x09, 0x79, 0x41, 0x78, 0x69, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6c,
	0x65, 0x67, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x79, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9c, 0x03, 0x0a,
	0x14, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x11, 0x78, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x64, 0x52, 0x0e, 0x78, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x11, 0x79, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x64, 0x52, 0x0e, 0x79, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x64, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0b, 0x78, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x78, 0x41, 0x78, 0x69, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x79, 0x5f, 0x61, 0x78, 0x69, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x79,
	0x41, 0x78, 0x69, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x13, 0x6c,
	0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x78, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x79, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xfb, 0x02, 0x0a, 0x14,
	0x42, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72,
	0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64,
	0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x4c,
	0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x65, 0x67, 0x65, 0x6e,
	0x64, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0b,
	0x78, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x78, 0x41, 0x78, 0x69, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0b, 0x79, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x79, 0x41, 0x78, 0x69, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f,
	0x62, 0x61, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x42, 0x61, 0x72, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x78,
	0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x79,
	0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x5f, 0x62, 0x61, 0x72, 0x73, 0x22, 0x9a, 0x04, 0x0a, 0x1d, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x77, 0x69, 0x73, 0x65, 0x42, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65,
	0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x52,
	0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x4c, 0x0a,
	0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x52, 0x0e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0b, 0x78, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x78, 0x41, 0x78, 0x69,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x79, 0x5f, 0x61, 0x78,
	0x69, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x09, 0x79, 0x41, 0x78, 0x69, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x62, 0x61, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x61, 0x72, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x48, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x78, 0x5f, 0x61,
	0x78, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x79, 0x5f, 0x61,
	0x78, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x5f, 0x62, 0x61, 0x72, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xce, 0x02, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x52, 0x14, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x64, 0x12, 0x5e, 0x0a, 0x1a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x52, 0x16, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x53, 0x65, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x65, 0x67, 0x65, 0x6e,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xf1, 0x03, 0x0a, 0x15, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x48, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x69,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x52, 0x0c, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x10, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x07, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x65, 0x73,
	0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x78, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x78, 0x41, 0x78, 0x69, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x52, 0x0a, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x00, 0x52, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x05, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x78, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x12,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a,
	0x12, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x73, 0x69,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x22, 0x41, 0x0a, 0x12, 0x50, 0x6c, 0x6f, 0x74, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x11, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x64, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x64, 0x22, 0x26, 0x0a, 0x10, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x2a, 0x9a, 0x03, 0x0a, 0x0f, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45,
	0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45,
	0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x55, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x52, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x44,
	0x45, 0x58, 0x45, 0x44, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x49,
	0x45, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x06, 0x12, 0x26,
	0x0a, 0x22, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54,
	0x41, 0x4d, 0x50, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x45,
	0x44, 0x5f, 0x55, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x44,
	0x45, 0x58, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x52, 0x49,
	0x45, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x09, 0x12, 0x2a,
	0x0a, 0x26, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x58,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0b, 0x2a, 0xb2, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x5f, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x41, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x41, 0x49, 0x4c,
	0x5f, 0x57, 0x41, 0x52, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x41, 0x57, 0x5f, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x04, 0x12, 0x1c,
	0x0a, 0x18, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x05, 0x2a, 0x9d, 0x01, 0x0a,
	0x10, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x44, 0x49, 0x55,
	0x4d, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f,
	0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x05, 0x2a, 0xd7, 0x02, 0x0a,
	0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4e,
	0x4f, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12,
	0x1e, 0x0a, 0x1a, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52,
	0x59, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12,
	0x20, 0x0a, 0x1c, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x50, 0x4c, 0x4f, 0x54, 0x5f, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15,
	0x42, 0x41, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x53, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x49, 0x53,
	0x54, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x4c, 0x4f, 0x54, 0x4c, 0x59, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x42,
	0x41, 0x54, 0x43, 0x48, 0x57, 0x49, 0x53, 0x45, 0x5f, 0x42, 0x41, 0x52, 0x5f, 0x43, 0x48, 0x41,
	0x52, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0a,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x0b, 0x2a, 0x4c, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41,
	0x4d, 0x50, 0x10, 0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_resim_metrics_proto_metrics_proto_rawDescOnce sync.Once
	file_resim_metrics_proto_metrics_proto_rawDescData = file_resim_metrics_proto_metrics_proto_rawDesc
)

func file_resim_metrics_proto_metrics_proto_rawDescGZIP() []byte {
	file_resim_metrics_proto_metrics_proto_rawDescOnce.Do(func() {
		file_resim_metrics_proto_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(file_resim_metrics_proto_metrics_proto_rawDescData)
	})
	return file_resim_metrics_proto_metrics_proto_rawDescData
}

var file_resim_metrics_proto_metrics_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_resim_metrics_proto_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_resim_metrics_proto_metrics_proto_goTypes = []interface{}{
	(MetricsDataType)(0),                  // 0: resim.metrics.proto.MetricsDataType
	(MetricStatus)(0),                     // 1: resim.metrics.proto.MetricStatus
	(MetricImportance)(0),                 // 2: resim.metrics.proto.MetricImportance
	(MetricType)(0),                       // 3: resim.metrics.proto.MetricType
	(TimestampType)(0),                    // 4: resim.metrics.proto.TimestampType
	(*MetricsDataId)(nil),                 // 5: resim.metrics.proto.MetricsDataId
	(*DoubleSeries)(nil),                  // 6: resim.metrics.proto.DoubleSeries
	(*TimestampSeries)(nil),               // 7: resim.metrics.proto.TimestampSeries
	(*UUIDSeries)(nil),                    // 8: resim.metrics.proto.UUIDSeries
	(*StringSeries)(nil),                  // 9: resim.metrics.proto.StringSeries
	(*MetricStatusSeries)(nil),            // 10: resim.metrics.proto.MetricStatusSeries
	(*Series)(nil),                        // 11: resim.metrics.proto.Series
	(*SeriesPerCategory)(nil),             // 12: resim.metrics.proto.SeriesPerCategory
	(*ExternalFile)(nil),                  // 13: resim.metrics.proto.ExternalFile
	(*MetricsData)(nil),                   // 14: resim.metrics.proto.MetricsData
	(*MetricId)(nil),                      // 15: resim.metrics.proto.MetricId
	(*JobId)(nil),                         // 16: resim.metrics.proto.JobId
	(*EventId)(nil),                       // 17: resim.metrics.proto.EventId
	(*JobMetrics)(nil),                    // 18: resim.metrics.proto.JobMetrics
	(*MetricCollection)(nil),              // 19: resim.metrics.proto.MetricCollection
	(*Metric)(nil),                        // 20: resim.metrics.proto.Metric
	(*Tag)(nil),                           // 21: resim.metrics.proto.Tag
	(*Event)(nil),                         // 22: resim.metrics.proto.Event
	(*MetricValues)(nil),                  // 23: resim.metrics.proto.MetricValues
	(*DoubleFailureDefinition)(nil),       // 24: resim.metrics.proto.DoubleFailureDefinition
	(*DoubleSummaryMetricValues)(nil),     // 25: resim.metrics.proto.DoubleSummaryMetricValues
	(*DoubleOverTimeMetricValues)(nil),    // 26: resim.metrics.proto.DoubleOverTimeMetricValues
	(*LinePlotMetricValues)(nil),          // 27: resim.metrics.proto.LinePlotMetricValues
	(*BarChartMetricValues)(nil),          // 28: resim.metrics.proto.BarChartMetricValues
	(*BatchwiseBarChartMetricValues)(nil), // 29: resim.metrics.proto.BatchwiseBarChartMetricValues
	(*StatesOverTimeMetricValues)(nil),    // 30: resim.metrics.proto.StatesOverTimeMetricValues
	(*HistogramMetricValues)(nil),         // 31: resim.metrics.proto.HistogramMetricValues
	(*ScalarMetricValues)(nil),            // 32: resim.metrics.proto.ScalarMetricValues
	(*PlotlyMetricValues)(nil),            // 33: resim.metrics.proto.PlotlyMetricValues
	(*ImageMetricValues)(nil),             // 34: resim.metrics.proto.ImageMetricValues
	(*TextMetricValues)(nil),              // 35: resim.metrics.proto.TextMetricValues
	nil,                                   // 36: resim.metrics.proto.SeriesPerCategory.CategoryToSeriesEntry
	(*HistogramMetricValues_Bucket)(nil),  // 37: resim.metrics.proto.HistogramMetricValues.Bucket
	(*uuid_proto.UUID)(nil),               // 38: resim.proto.UUID
	(*timestamppb.Timestamp)(nil),         // 39: google.protobuf.Timestamp
	(*structpb.Struct)(nil),               // 40: google.protobuf.Struct
}
var file_resim_metrics_proto_metrics_proto_depIdxs = []int32{
	38, // 0: resim.metrics.proto.MetricsDataId.id:type_name -> resim.proto.UUID
	39, // 1: resim.metrics.proto.TimestampSeries.series:type_name -> google.protobuf.Timestamp
	38, // 2: resim.metrics.proto.UUIDSeries.series:type_name -> resim.proto.UUID
	1,  // 3: resim.metrics.proto.MetricStatusSeries.series:type_name -> resim.metrics.proto.MetricStatus
	6,  // 4: resim.metrics.proto.Series.doubles:type_name -> resim.metrics.proto.DoubleSeries
	7,  // 5: resim.metrics.proto.Series.timestamps:type_name -> resim.metrics.proto.TimestampSeries
	8,  // 6: resim.metrics.proto.Series.uuids:type_name -> resim.metrics.proto.UUIDSeries
	9,  // 7: resim.metrics.proto.Series.strings:type_name -> resim.metrics.proto.StringSeries
	10, // 8: resim.metrics.proto.Series.statuses:type_name -> resim.metrics.proto.MetricStatusSeries
	36, // 9: resim.metrics.proto.SeriesPerCategory.category_to_series:type_name -> resim.metrics.proto.SeriesPerCategory.CategoryToSeriesEntry
	5,  // 10: resim.metrics.proto.MetricsData.metrics_data_id:type_name -> resim.metrics.proto.MetricsDataId
	0,  // 11: resim.metrics.proto.MetricsData.data_type:type_name -> resim.metrics.proto.MetricsDataType
	5,  // 12: resim.metrics.proto.MetricsData.index_data_id:type_name -> resim.metrics.proto.MetricsDataId
	0,  // 13: resim.metrics.proto.MetricsData.index_data_type:type_name -> resim.metrics.proto.MetricsDataType
	11, // 14: resim.metrics.proto.MetricsData.series:type_name -> resim.metrics.proto.Series
	12, // 15: resim.metrics.proto.MetricsData.series_per_category:type_name -> resim.metrics.proto.SeriesPerCategory
	13, // 16: resim.metrics.proto.MetricsData.external_file:type_name -> resim.metrics.proto.ExternalFile
	38, // 17: resim.metrics.proto.MetricId.id:type_name -> resim.proto.UUID
	38, // 18: resim.metrics.proto.JobId.id:type_name -> resim.proto.UUID
	38, // 19: resim.metrics.proto.EventId.id:type_name -> resim.proto.UUID
	16, // 20: resim.metrics.proto.JobMetrics.job_id:type_name -> resim.metrics.proto.JobId
	19, // 21: resim.metrics.proto.JobMetrics.job_level_metrics:type_name -> resim.metrics.proto.MetricCollection
	14, // 22: resim.metrics.proto.JobMetrics.metrics_data:type_name -> resim.metrics.proto.MetricsData
	1,  // 23: resim.metrics.proto.JobMetrics.metrics_status:type_name -> resim.metrics.proto.MetricStatus
	22, // 24: resim.metrics.proto.JobMetrics.events:type_name -> resim.metrics.proto.Event
	20, // 25: resim.metrics.proto.MetricCollection.metrics:type_name -> resim.metrics.proto.Metric
	1,  // 26: resim.metrics.proto.MetricCollection.metrics_status:type_name -> resim.metrics.proto.MetricStatus
	15, // 27: resim.metrics.proto.Metric.metric_id:type_name -> resim.metrics.proto.MetricId
	3,  // 28: resim.metrics.proto.Metric.type:type_name -> resim.metrics.proto.MetricType
	1,  // 29: resim.metrics.proto.Metric.status:type_name -> resim.metrics.proto.MetricStatus
	23, // 30: resim.metrics.proto.Metric.metric_values:type_name -> resim.metrics.proto.MetricValues
	2,  // 31: resim.metrics.proto.Metric.importance:type_name -> resim.metrics.proto.MetricImportance
	16, // 32: resim.metrics.proto.Metric.job_id:type_name -> resim.metrics.proto.JobId
	21, // 33: resim.metrics.proto.Metric.tags:type_name -> resim.metrics.proto.Tag
	17, // 34: resim.metrics.proto.Event.event_id:type_name -> resim.metrics.proto.EventId
	15, // 35: resim.metrics.proto.Event.metrics:type_name -> resim.metrics.proto.MetricId
	1,  // 36: resim.metrics.proto.Event.status:type_name -> resim.metrics.proto.MetricStatus
	39, // 37: resim.metrics.proto.Event.timestamp:type_name -> google.protobuf.Timestamp
	4,  // 38: resim.metrics.proto.Event.timestamp_type:type_name -> resim.metrics.proto.TimestampType
	2,  // 39: resim.metrics.proto.Event.importance:type_name -> resim.metrics.proto.MetricImportance
	25, // 40: resim.metrics.proto.MetricValues.double_metric_values:type_name -> resim.metrics.proto.DoubleSummaryMetricValues
	26, // 41: resim.metrics.proto.MetricValues.double_over_time_metric_values:type_name -> resim.metrics.proto.DoubleOverTimeMetricValues
	27, // 42: resim.metrics.proto.MetricValues.line_plot_metric_values:type_name -> resim.metrics.proto.LinePlotMetricValues
	28, // 43: resim.metrics.proto.MetricValues.bar_chart_metric_values:type_name -> resim.metrics.proto.BarChartMetricValues
	30, // 44: resim.metrics.proto.MetricValues.states_over_time_metric_values:type_name -> resim.metrics.proto.StatesOverTimeMetricValues
	31, // 45: resim.metrics.proto.MetricValues.histogram_metric_values:type_name -> resim.metrics.proto.HistogramMetricValues
	32, // 46: resim.metrics.proto.MetricValues.scalar_metric_values:type_name -> resim.metrics.proto.ScalarMetricValues
	33, // 47: resim.metrics.proto.MetricValues.plotly_metric_values:type_name -> resim.metrics.proto.PlotlyMetricValues
	34, // 48: resim.metrics.proto.MetricValues.image_metric_values:type_name -> resim.metrics.proto.ImageMetricValues
	29, // 49: resim.metrics.proto.MetricValues.batchwise_bar_chart_metric_values:type_name -> resim.metrics.proto.BatchwiseBarChartMetricValues
	35, // 50: resim.metrics.proto.MetricValues.text_metric_values:type_name -> resim.metrics.proto.TextMetricValues
	5,  // 51: resim.metrics.proto.DoubleSummaryMetricValues.value_data_id:type_name -> resim.metrics.proto.MetricsDataId
	5,  // 52: resim.metrics.proto.DoubleSummaryMetricValues.status_data_id:type_name -> resim.metrics.proto.MetricsDataId
	39, // 53: resim.metrics.proto.DoubleSummaryMetricValues.timestamp_index:type_name -> google.protobuf.Timestamp
	38, // 54: resim.metrics.proto.DoubleSummaryMetricValues.uuid_index:type_name -> resim.proto.UUID
	24, // 55: resim.metrics.proto.DoubleSummaryMetricValues.failure_definition:type_name -> resim.metrics.proto.DoubleFailureDefinition
	5,  // 56: resim.metrics.proto.DoubleOverTimeMetricValues.doubles_over_time_data_id:type_name -> resim.metrics.proto.MetricsDataId
	5,  // 57: resim.metrics.proto.DoubleOverTimeMetricValues.statuses_over_time_data_id:type_name -> resim.metrics.proto.MetricsDataId
	24, // 58: resim.metrics.proto.DoubleOverTimeMetricValues.failure_definition:type_name -> resim.metrics.proto.DoubleFailureDefinition
	39, // 59: resim.metrics.proto.DoubleOverTimeMetricValues.start_time:type_name -> google.protobuf.Timestamp
	39, // 60: resim.metrics.proto.DoubleOverTimeMetricValues.end_time:type_name -> google.protobuf.Timestamp
	5,  // 61: resim.metrics.proto.LinePlotMetricValues.x_doubles_data_id:type_name -> resim.metrics.proto.MetricsDataId
	5,  // 62: resim.metrics.proto.LinePlotMetricValues.y_doubles_data_id:type_name -> resim.metrics.proto.MetricsDataId
	5,  // 63: resim.metrics.proto.LinePlotMetricValues.statuses_data_id:type_name -> resim.metrics.proto.MetricsDataId
	5,  // 64: resim.metrics.proto.BarChartMetricValues.values_data_id:type_name -> resim.metrics.proto.MetricsDataId
	5,  // 65: resim.metrics.proto.BarChartMetricValues.statuses_data_id:type_name -> resim.metrics.proto.MetricsDataId
	5,  // 66: resim.metrics.proto.BatchwiseBarChartMetricValues.times_data_id:type_name -> resim.metrics.proto.MetricsDataId
	5,  // 67: resim.metrics.proto.BatchwiseBarChartMetricValues.values_data_id:type_name -> resim.metrics.proto.MetricsDataId
	5,  // 68: resim.metrics.proto.BatchwiseBarChartMetricValues.statuses_data_id:type_name -> resim.metrics.proto.MetricsDataId
	38, // 69: resim.metrics.proto.BatchwiseBarChartMetricValues.project_id:type_name -> resim.proto.UUID
	5,  // 70: resim.metrics.proto.StatesOverTimeMetricValues.states_over_time_data_id:type_name -> resim.metrics.proto.MetricsDataId
	5,  // 71: resim.metrics.proto.StatesOverTimeMetricValues.statuses_over_time_data_id:type_name -> resim.metrics.proto.MetricsDataId
	5,  // 72: resim.metrics.proto.HistogramMetricValues.values_data_id:type_name -> resim.metrics.proto.MetricsDataId
	5,  // 73: resim.metrics.proto.HistogramMetricValues.statuses_data_id:type_name -> resim.metrics.proto.MetricsDataId
	37, // 74: resim.metrics.proto.HistogramMetricValues.buckets:type_name -> resim.metrics.proto.HistogramMetricValues.Bucket
	24, // 75: resim.metrics.proto.ScalarMetricValues.failure_definition:type_name -> resim.metrics.proto.DoubleFailureDefinition
	40, // 76: resim.metrics.proto.PlotlyMetricValues.json:type_name -> google.protobuf.Struct
	5,  // 77: resim.metrics.proto.ImageMetricValues.image_data_id:type_name -> resim.metrics.proto.MetricsDataId
	11, // 78: resim.metrics.proto.SeriesPerCategory.CategoryToSeriesEntry.value:type_name -> resim.metrics.proto.Series
	79, // [79:79] is the sub-list for method output_type
	79, // [79:79] is the sub-list for method input_type
	79, // [79:79] is the sub-list for extension type_name
	79, // [79:79] is the sub-list for extension extendee
	0,  // [0:79] is the sub-list for field type_name
}

func init() { file_resim_metrics_proto_metrics_proto_init() }
func file_resim_metrics_proto_metrics_proto_init() {
	if File_resim_metrics_proto_metrics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_resim_metrics_proto_metrics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsDataId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUIDSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricStatusSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Series); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeriesPerCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleFailureDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleSummaryMetricValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleOverTimeMetricValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinePlotMetricValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarChartMetricValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchwiseBarChartMetricValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatesOverTimeMetricValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistogramMetricValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarMetricValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlotlyMetricValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageMetricValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextMetricValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resim_metrics_proto_metrics_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistogramMetricValues_Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_resim_metrics_proto_metrics_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Series_Doubles)(nil),
		(*Series_Timestamps)(nil),
		(*Series_Uuids)(nil),
		(*Series_Strings)(nil),
		(*Series_Statuses)(nil),
	}
	file_resim_metrics_proto_metrics_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*MetricsData_Series)(nil),
		(*MetricsData_SeriesPerCategory)(nil),
		(*MetricsData_ExternalFile)(nil),
	}
	file_resim_metrics_proto_metrics_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Metric_JobId)(nil),
	}
	file_resim_metrics_proto_metrics_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*MetricValues_DoubleMetricValues)(nil),
		(*MetricValues_DoubleOverTimeMetricValues)(nil),
		(*MetricValues_LinePlotMetricValues)(nil),
		(*MetricValues_BarChartMetricValues)(nil),
		(*MetricValues_StatesOverTimeMetricValues)(nil),
		(*MetricValues_HistogramMetricValues)(nil),
		(*MetricValues_ScalarMetricValues)(nil),
		(*MetricValues_PlotlyMetricValues)(nil),
		(*MetricValues_ImageMetricValues)(nil),
		(*MetricValues_BatchwiseBarChartMetricValues)(nil),
		(*MetricValues_TextMetricValues)(nil),
	}
	file_resim_metrics_proto_metrics_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_resim_metrics_proto_metrics_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*DoubleSummaryMetricValues_SeriesIndex)(nil),
		(*DoubleSummaryMetricValues_TimestampIndex)(nil),
		(*DoubleSummaryMetricValues_UuidIndex)(nil),
		(*DoubleSummaryMetricValues_StringIndex)(nil),
	}
	file_resim_metrics_proto_metrics_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_resim_metrics_proto_metrics_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_resim_metrics_proto_metrics_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_resim_metrics_proto_metrics_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_resim_metrics_proto_metrics_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_resim_metrics_proto_metrics_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_resim_metrics_proto_metrics_proto_msgTypes[32].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_resim_metrics_proto_metrics_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_resim_metrics_proto_metrics_proto_goTypes,
		DependencyIndexes: file_resim_metrics_proto_metrics_proto_depIdxs,
		EnumInfos:         file_resim_metrics_proto_metrics_proto_enumTypes,
		MessageInfos:      file_resim_metrics_proto_metrics_proto_msgTypes,
	}.Build()
	File_resim_metrics_proto_metrics_proto = out.File
	file_resim_metrics_proto_metrics_proto_rawDesc = nil
	file_resim_metrics_proto_metrics_proto_goTypes = nil
	file_resim_metrics_proto_metrics_proto_depIdxs = nil
}
