import numpy
import resim.transforms.python.quaternion
from typing import ClassVar, overload

class SO3:
    DIMS: ClassVar[int] = ...  # read-only
    DOF: ClassVar[int] = ...  # read-only
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, quaternion: resim.transforms.python.quaternion.Quaternion) -> None: ...
    def exp(self) -> SO3: ...
    def identity(self) -> SO3: ...
    def interp(self, fraction: float) -> SO3: ...
    def inverse(self) -> SO3: ...
    def is_approx(self, other: SO3, precision: float = ...) -> bool: ...
    def log(self) -> numpy.ndarray[numpy.float64[3, 1]]: ...
    def quaternion(self) -> resim.transforms.python.quaternion.Quaternion: ...
    def rotate(self, source_vector: numpy.ndarray[numpy.float64[3, 1]]) -> numpy.ndarray[numpy.float64[3, 1]]: ...
    def rotation_matrix(self) -> numpy.ndarray[numpy.float64[3, 3]]: ...
    @overload
    def __mul__(self, arg0: SO3) -> SO3: ...
    @overload
    def __mul__(self, arg0: numpy.ndarray[numpy.float64[3, 1]]) -> numpy.ndarray[numpy.float64[3, 1]]: ...
