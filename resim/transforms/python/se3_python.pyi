from __future__ import annotations
import typing
__all__ = ['SE3']
class SE3:
    DIMS: typing.ClassVar[int] = 3
    DOF: typing.ClassVar[int] = 6
    @staticmethod
    def identity() -> SE3:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, rotation: ...) -> None:
        ...
    @typing.overload
    def __init__(self, translation: numpy.ndarray[numpy.float64[3, 1]]) -> None:
        ...
    @typing.overload
    def __init__(self, rotation: ..., translation: numpy.ndarray[numpy.float64[3, 1]]) -> None:
        ...
    @typing.overload
    def __mul__(self, arg0: SE3) -> SE3:
        ...
    @typing.overload
    def __mul__(self, arg0: numpy.ndarray[numpy.float64[3, 1]]) -> numpy.ndarray[numpy.float64[3, 1]]:
        ...
    def arc_length(self) -> float:
        ...
    def exp(self: numpy.ndarray[numpy.float64[6, 1]]) -> SE3:
        ...
    def interp(self, fraction: float) -> SE3:
        ...
    def inverse(self) -> SE3:
        ...
    def is_approx(self, other: SE3, precision: float = 1e-12) -> bool:
        ...
    def log(self) -> numpy.ndarray[numpy.float64[6, 1]]:
        ...
    def rotate(self, source_vector: numpy.ndarray[numpy.float64[3, 1]]) -> numpy.ndarray[numpy.float64[3, 1]]:
        ...
    def rotation(self) -> ...:
        ...
    def translation(self) -> numpy.ndarray[numpy.float64[3, 1]]:
        ...
