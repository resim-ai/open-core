// Copyright 2023 ReSim, Inc.
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

#include "resim/dynamics/aerodynamics/airfoil.hh"

#include <gtest/gtest.h>

#include <cmath>

#include "resim/assert/assert.hh"
#include "resim/dynamics/aerodynamics/rigid_body_aerodynamics.hh"

namespace resim::dynamics::aerodynamics {

namespace {
using transforms::SE3;
using Frame = transforms::Frame<SE3::DIMS>;
using RigidBodyState = actor::state::RigidBodyState<SE3>;
using Control = Eigen::VectorXd;
const Frame COM_FRAME = Frame::new_frame();
const Frame COP_FRAME = Frame::new_frame();
const Frame REF_FRAME = Frame::new_frame();
using FramedVector = transforms::FramedVector<SE3::DIMS>;

constexpr double DEG_TO_RAD = (1.0 / 360.0) * 2.0 * M_PI;
constexpr int NINETY_DEG = 90;
constexpr int TEST_COUNT = NINETY_DEG * 2 + 1;

constexpr double LIFT_CURVE_SLOPE_COEFF = 2.0 * M_PI;
constexpr double SKIN_FRICTION_COEFF = 0.02;
constexpr double ZERO_LIFT_ANGLE_DEG = 0.0;
constexpr double STALL_ANGLE_POS_DEG = 10.0;
constexpr double STALL_ANGLE_NEG_DEG = -10.0;
constexpr double TOTAL_CHORD_M = 5.0;
constexpr double FLAP_CHORD_M = 2.0;
constexpr double SPAN_M = 25.0;
constexpr AirfoilFlapType FLAP_TYPE = AirfoilFlapType::PLAIN;

constexpr double AREA_M_SQ = SPAN_M * TOTAL_CHORD_M;

AirfoilElement make_test_airfoil() {
  return AirfoilElement(
      SE3::identity(COM_FRAME, COP_FRAME),
      AirfoilElementConfig(
          LIFT_CURVE_SLOPE_COEFF,
          SKIN_FRICTION_COEFF,
          ZERO_LIFT_ANGLE_DEG * DEG_TO_RAD,
          STALL_ANGLE_POS_DEG * DEG_TO_RAD,
          STALL_ANGLE_NEG_DEG * DEG_TO_RAD,
          TOTAL_CHORD_M,
          FLAP_CHORD_M,
          SPAN_M,
          FLAP_TYPE));
}
}  // namespace

// Note: reference values used in these tests are obtained by running the code,
// and approximately comparing to the plots given in the original paper this
// model is based on. Any commits which update the data in these tests should
// include plots of these coefficients, for comparison against the paper.

TEST(AirfoilTests, LiftAndDragNoDeflection) {
  // SETUP
  AirfoilElement test_airfoil = make_test_airfoil();
  AirfoilElementState test_element_state{0.0};
  RigidBodyState test_state{SE3::identity(REF_FRAME, COM_FRAME)};

  constexpr std::array<double, TEST_COUNT> test_lift_coeffs = {
      -3.35766e-16, -0.0213682, -0.042724, -0.0640548, -0.0853482, -0.106591,
      -0.127772,    -0.148877,  -0.169894, -0.19081,   -0.211611,  -0.232285,
      -0.252818,    -0.273197,  -0.293408, -0.313437,  -0.333269,  -0.352891,
      -0.372287,    -0.391443,  -0.410344, -0.428975,  -0.447318,  -0.465359,
      -0.483081,    -0.500467,  -0.517501, -0.534164,  -0.55044,   -0.56631,
      -0.581756,    -0.596758,  -0.611299, -0.625357,  -0.638914,  -0.651949,
      -0.664442,    -0.67637,   -0.687714, -0.698451,  -0.708558,  -0.718014,
      -0.726796,    -0.73488,   -0.742242, -0.748859,  -0.754706,  -0.759759,
      -0.763992,    -0.767381,  -0.769899, -0.771521,  -0.772221,  -0.771973,
      -0.770749,    -0.768523,  -0.765267, -0.760956,  -0.75556,   -0.749053,
      -0.741408,    -0.732595,  -0.722588, -0.711359,  -0.69888,   -0.685123,
      -0.670061,    -0.653666,  -0.63591,  -0.616766,  -0.596208,  -0.600784,
      -0.614495,    -0.628206,  -0.641918, -0.655629,  -0.66934,   -0.683051,
      -0.696762,    -0.710474,  -0.724185, -0.651766,  -0.579348,  -0.506929,
      -0.434511,    -0.362092,  -0.289674, -0.217255,  -0.144837,  -0.0724185,
      -0,           0.0724185,  0.144837,  0.217255,   0.289674,   0.362092,
      0.434511,     0.506929,   0.579348,  0.651766,   0.724185,   0.710474,
      0.696762,     0.683051,   0.66934,   0.655629,   0.641918,   0.628206,
      0.614495,     0.600784,   0.596208,  0.616766,   0.63591,    0.653666,
      0.670061,     0.685123,   0.69888,   0.711359,   0.722588,   0.732595,
      0.741408,     0.749053,   0.75556,   0.760956,   0.765267,   0.768523,
      0.770749,     0.771973,   0.772221,  0.771521,   0.769899,   0.767381,
      0.763992,     0.759759,   0.754706,  0.748859,   0.742242,   0.73488,
      0.726796,     0.718014,   0.708558,  0.698451,   0.687714,   0.67637,
      0.664442,     0.651949,   0.638914,  0.625357,   0.611299,   0.596758,
      0.581756,     0.56631,    0.55044,   0.534164,   0.517501,   0.500467,
      0.483081,     0.465359,   0.447318,  0.428975,   0.410344,   0.391443,
      0.372287,     0.352891,   0.333269,  0.313437,   0.293408,   0.273197,
      0.252818,     0.232285,   0.211611,  0.19081,    0.169894,   0.148877,
      0.127772,     0.106591,   0.0853482, 0.0640548,  0.042724,   0.0213682,
      3.35766e-16};

  constexpr std::array<double, TEST_COUNT> test_drag_coeffs = {
      1.19529,   1.19505,   1.19432,   1.1931,    1.19139,   1.1892,
      1.18652,   1.18336,   1.1797,    1.17557,   1.17094,   1.16584,
      1.16025,   1.15417,   1.14761,   1.14058,   1.13306,   1.12506,
      1.11659,   1.10764,   1.09822,   1.08833,   1.07797,   1.06714,
      1.05584,   1.04409,   1.03188,   1.01922,   1.00611,   0.992558,
      0.978565,  0.964139,  0.949284,  0.934009,  0.91832,   0.902223,
      0.885729,  0.868844,  0.851578,  0.833942,  0.815946,  0.797601,
      0.77892,   0.759916,  0.740601,  0.720992,  0.701104,  0.680952,
      0.660555,  0.639932,  0.619101,  0.598083,  0.576901,  0.555576,
      0.534134,  0.5126,    0.491,     0.469363,  0.447717,  0.426094,
      0.404527,  0.383048,  0.361694,  0.340501,  0.319508,  0.298756,
      0.278287,  0.258144,  0.238374,  0.219024,  0.200144,  0.189107,
      0.180709,  0.17231,   0.163912,  0.155514,  0.147115,  0.138717,
      0.130318,  0.12192,   0.113522,  0.095673,  0.0797348, 0.0656966,
      0.0535489, 0.0432838, 0.0348942, 0.0283748, 0.0237211, 0.0209301,
      0.02,      0.0209301, 0.0237211, 0.0283748, 0.0348942, 0.0432838,
      0.0535489, 0.0656966, 0.0797348, 0.095673,  0.113522,  0.12192,
      0.130318,  0.138717,  0.147115,  0.155514,  0.163912,  0.17231,
      0.180709,  0.189107,  0.200144,  0.219024,  0.238374,  0.258144,
      0.278287,  0.298756,  0.319508,  0.340501,  0.361694,  0.383048,
      0.404527,  0.426094,  0.447717,  0.469363,  0.491,     0.5126,
      0.534134,  0.555576,  0.576901,  0.598083,  0.619101,  0.639932,
      0.660555,  0.680952,  0.701104,  0.720992,  0.740601,  0.759916,
      0.77892,   0.797601,  0.815946,  0.833942,  0.851578,  0.868844,
      0.885729,  0.902223,  0.91832,   0.934009,  0.949284,  0.964139,
      0.978565,  0.992558,  1.00611,   1.01922,   1.03188,   1.04409,
      1.05584,   1.06714,   1.07797,   1.08833,   1.09822,   1.10764,
      1.11659,   1.12506,   1.13306,   1.14058,   1.14761,   1.15417,
      1.16025,   1.16584,   1.17094,   1.17557,   1.1797,    1.18336,
      1.18652,   1.1892,    1.19139,   1.1931,    1.19432,   1.19505,
      1.19529};

  for (int a = -NINETY_DEG, i = 0; a <= NINETY_DEG; ++a, ++i) {
    // ACTION
    double angle = std::nextafter(DEG_TO_RAD * a, 0.0);
    FramedVector local_wind{
        Eigen::Vector3d(-std::cos(angle), 0.0, -std::sin(angle)),
        REF_FRAME};
    FramedVector force = test_airfoil.cop_local_force(
        test_state,
        local_wind,
        test_element_state);

    // VERIFICATION
    EXPECT_NEAR(
        force.dot(
            local_wind /
            (AREA_M_SQ * 0.5 * AirfoilElement::AIR_DENSITY_KG_PER_M_CUBED)),
        test_lift_coeffs.at(i),
        1e-5);

    EXPECT_NEAR(
        force.dot(
            local_wind.cross(Eigen::Vector3d::UnitY()) /
            (AREA_M_SQ * 0.5 * AirfoilElement::AIR_DENSITY_KG_PER_M_CUBED)),
        test_drag_coeffs.at(i),
        1e-5);
  }
}

TEST(AirfoilTests, LiftAndDragPosDeflection) {
  // SETUP
  AirfoilElement test_airfoil = make_test_airfoil();
  constexpr double TEST_ANGLE_DEG = 25.0;
  AirfoilElementState test_element_state{TEST_ANGLE_DEG * DEG_TO_RAD};
  RigidBodyState test_state{SE3::identity(REF_FRAME, COM_FRAME)};

  constexpr std::array<double, TEST_COUNT> test_lift_coeffs = {
      -0.160916,  -0.182382,  -0.203744, -0.224988,  -0.246101,  -0.267071,
      -0.287883,  -0.308525,  -0.328982, -0.349241,  -0.369288,  -0.389107,
      -0.408685,  -0.428006,  -0.447055, -0.465816,  -0.484275,  -0.502414,
      -0.520218,  -0.537669,  -0.554751, -0.571446,  -0.587737,  -0.603605,
      -0.619032,  -0.633999,  -0.648487, -0.662477,  -0.675948,  -0.688881,
      -0.701255,  -0.713049,  -0.724241, -0.734811,  -0.744735,  -0.753992,
      -0.762558,  -0.770411,  -0.777527, -0.783883,  -0.789454,  -0.794216,
      -0.798144,  -0.801214,  -0.803399, -0.804675,  -0.805015,  -0.804394,
      -0.802785,  -0.800161,  -0.796497, -0.791766,  -0.785939,  -0.778991,
      -0.770894,  -0.761621,  -0.751144, -0.739436,  -0.72647,   -0.712219,
      -0.696655,  -0.679752,  -0.661481, -0.641817,  -0.620734,  -0.598203,
      -0.5742,    -0.550052,  -0.527122, -0.504193,  -0.481264,  -0.458335,
      -0.435406,  -0.412476,  -0.389547, -0.366618,  -0.343689,  -0.32076,
      -0.29783,   -0.253485,  -0.181066, -0.108648,  -0.0362295, 0.036189,
      0.108607,   0.181026,   0.253444,  0.325863,   0.398281,   0.4707,
      0.543118,   0.615537,   0.687955,  0.760374,   0.832792,   0.905211,
      0.977629,   1.05005,    1.12247,   1.13441,    1.06709,    0.999774,
      0.932455,   0.865135,   0.797816,  0.730496,   0.663177,   0.679777,
      0.6973,     0.713381,   0.728048,  0.741332,   0.753265,   0.763876,
      0.773196,   0.781256,   0.788086,  0.793717,   0.798179,   0.801501,
      0.803715,   0.804849,   0.804934,  0.803998,   0.802071,   0.799181,
      0.795357,   0.790626,   0.785017,  0.778557,   0.771272,   0.763191,
      0.754338,   0.74474,    0.734422,  0.723409,   0.711727,   0.699398,
      0.686448,   0.672899,   0.658775,  0.644097,   0.628889,   0.613171,
      0.596965,   0.580292,   0.563173,  0.545627,   0.527674,   0.509333,
      0.490623,   0.471563,   0.452171,  0.432464,   0.412461,   0.392177,
      0.371631,   0.350837,   0.329814,  0.308575,   0.287138,   0.265517,
      0.243728,   0.221786,   0.199704,  0.177499,   0.155184,   0.132774,
      0.110282,   0.0877228,  0.0651103, 0.0424582,  0.0197805,  -0.0029093,
      -0.0255973, -0.0482698, -0.070913, -0.0935131, -0.116056,  -0.138529,
      -0.160916};

  constexpr std::array<double, TEST_COUNT> test_drag_coeffs = {
      1.23232,   1.22846,   1.22412,   1.21928,   1.21397,   1.20816,
      1.20187,   1.1951,    1.18785,   1.18011,   1.17189,   1.1632,
      1.15403,   1.14438,   1.13426,   1.12368,   1.11262,   1.1011,
      1.08911,   1.07667,   1.06378,   1.05043,   1.03664,   1.0224,
      1.00773,   0.992632,  0.977108,  0.961168,  0.944817,  0.928064,
      0.910918,  0.893387,  0.875481,  0.85721,   0.838585,  0.819618,
      0.800321,  0.780708,  0.760792,  0.740588,  0.720113,  0.699383,
      0.678416,  0.65723,   0.635845,  0.614282,  0.592563,  0.57071,
      0.548749,  0.526704,  0.504603,  0.482472,  0.460343,  0.438244,
      0.416209,  0.394272,  0.372467,  0.350831,  0.329402,  0.308222,
      0.28733,   0.266771,  0.24659,   0.226834,  0.207552,  0.188796,
      0.170617,  0.156169,  0.145642,  0.135115,  0.124588,  0.114061,
      0.103534,  0.0930065, 0.0824793, 0.0719522, 0.0614251, 0.0508979,
      0.0403708, 0.0314029, 0.0258162, 0.0220937, 0.0202328, 0.0202323,
      0.0220921, 0.0258136, 0.0313992, 0.0388526, 0.0481786, 0.0593836,
      0.0724749, 0.0874613, 0.104353,  0.123161,  0.143898,  0.166578,
      0.191217,  0.217832,  0.24644,   0.262568,  0.260271,  0.257973,
      0.255676,  0.253378,  0.251081,  0.248783,  0.246486,  0.2668,
      0.288156,  0.309868,  0.331889,  0.354171,  0.376671,  0.399346,
      0.422154,  0.445057,  0.468018,  0.491001,  0.513972,  0.536899,
      0.559752,  0.5825,    0.605117,  0.627576,  0.649852,  0.671921,
      0.693761,  0.71535,   0.736669,  0.757698,  0.778419,  0.798816,
      0.818873,  0.838575,  0.857909,  0.87686,   0.895416,  0.913567,
      0.931302,  0.948611,  0.965483,  0.981912,  0.997889,  1.01341,
      1.02846,   1.04304,   1.05714,   1.07076,   1.08389,   1.09652,
      1.10866,   1.1203,    1.13144,   1.14207,   1.15219,   1.1618,
      1.1709,    1.17948,   1.18754,   1.19508,   1.20211,   1.20861,
      1.21459,   1.22005,   1.22498,   1.22939,   1.23327,   1.23663,
      1.23946,   1.24176,   1.24354,   1.24479,   1.24551,   1.24571,
      1.24538,   1.24452,   1.24313,   1.24122,   1.23878,   1.23582,
      1.23232};

  for (int a = -NINETY_DEG, i = 0; a <= NINETY_DEG; ++a, ++i) {
    // ACTION
    double angle = std::nextafter(DEG_TO_RAD * a, 0.0);
    FramedVector local_wind{
        Eigen::Vector3d(-std::cos(angle), 0.0, -std::sin(angle)),
        REF_FRAME};
    FramedVector force = test_airfoil.cop_local_force(
        test_state,
        local_wind,
        test_element_state);

    // VERIFICATION
    EXPECT_NEAR(
        force.dot(
            local_wind /
            (AREA_M_SQ * 0.5 * AirfoilElement::AIR_DENSITY_KG_PER_M_CUBED)),
        test_lift_coeffs.at(i),
        1e-5);

    EXPECT_NEAR(
        force.dot(
            local_wind.cross(Eigen::Vector3d::UnitY()) /
            (AREA_M_SQ * 0.5 * AirfoilElement::AIR_DENSITY_KG_PER_M_CUBED)),
        test_drag_coeffs.at(i),
        1e-5);
  }
}

TEST(AirfoilTests, LiftAndDragNegDeflection) {
  // SETUP
  AirfoilElement test_airfoil = make_test_airfoil();
  constexpr double TEST_ANGLE_DEG = -25.0;
  AirfoilElementState test_element_state{TEST_ANGLE_DEG * DEG_TO_RAD};
  RigidBodyState test_state{SE3::identity(REF_FRAME, COM_FRAME)};

  constexpr std::array<double, TEST_COUNT> test_lift_coeffs = {
      0.14651,   0.126127,   0.105666,   0.0851412, 0.0645644,  0.0439483,
      0.0233056, 0.00264883, -0.0180096, -0.038657, -0.0592811, -0.0798692,
      -0.100409, -0.120887,  -0.141291,  -0.161609, -0.181827,  -0.201932,
      -0.22191,  -0.241749,  -0.261435,  -0.280954, -0.300292,  -0.319435,
      -0.338369, -0.357077,  -0.375547,  -0.393761, -0.411706,  -0.429364,
      -0.446721, -0.463758,  -0.48046,   -0.496809, -0.512787,  -0.528378,
      -0.543562, -0.55832,   -0.572635,  -0.586486, -0.599854,  -0.612719,
      -0.62506,  -0.636856,  -0.648085,  -0.658727, -0.668759,  -0.678158,
      -0.686903, -0.694969,  -0.702332,  -0.70897,  -0.714857,  -0.71997,
      -0.724283, -0.72777,   -0.730407,  -0.732167, -0.733024,  -0.732952,
      -0.731924, -0.729913,  -0.726892,  -0.722834, -0.717711,  -0.711496,
      -0.70416,  -0.695677,  -0.686018,  -0.675156, -0.663062,  -0.649709,
      -0.635068, -0.619113,  -0.604381,  -0.679611, -0.754841,  -0.830071,
      -0.905301, -0.980531,  -1.05576,   -1.13099,  -1.12247,   -1.05005,
      -0.977629, -0.905211,  -0.832792,  -0.760374, -0.687955,  -0.615537,
      -0.543118, -0.4707,    -0.398281,  -0.325863, -0.253444,  -0.181026,
      -0.108607, -0.036189,  0.0362295,  0.108648,  0.181066,   0.253485,
      0.295471,  0.314241,   0.333011,   0.351781,  0.370551,   0.389321,
      0.408091,  0.426861,   0.445631,   0.464401,  0.483171,   0.501941,
      0.522976,  0.544834,   0.56535,    0.584549,  0.602454,   0.61909,
      0.634481,  0.648651,   0.661626,   0.67343,   0.684088,   0.693625,
      0.702065,  0.709435,   0.715757,   0.721059,  0.725363,   0.728695,
      0.731079,  0.732539,   0.7331,     0.732786,  0.731619,   0.729624,
      0.726825,  0.723243,   0.718902,   0.713824,  0.708032,   0.701547,
      0.694392,  0.686587,   0.678154,   0.669113,  0.659485,   0.64929,
      0.638547,  0.627276,   0.615496,   0.603226,  0.590485,   0.577289,
      0.563658,  0.549608,   0.535157,   0.520322,  0.505118,   0.489562,
      0.47367,   0.457458,   0.44094,    0.424131,  0.407047,   0.389701,
      0.372108,  0.354282,   0.336235,   0.317982,  0.299536,   0.280909,
      0.262114,  0.243164,   0.224071,   0.204847,  0.185504,   0.166055,
      0.14651};

  constexpr std::array<double, TEST_COUNT> test_drag_coeffs = {
      1.1229,    1.12607,   1.12877,   1.13099,   1.13273,   1.13399,
      1.13478,   1.13508,   1.1349,    1.13424,   1.1331,    1.13149,
      1.12939,   1.12681,   1.12376,   1.12022,   1.11621,   1.11172,
      1.10676,   1.10132,   1.0954,    1.08901,   1.08214,   1.0748,
      1.06699,   1.05871,   1.04997,   1.04076,   1.03108,   1.02095,
      1.01035,   0.999301,  0.987799,  0.975849,  0.963454,  0.950619,
      0.937349,  0.923648,  0.909524,  0.89498,   0.880026,  0.864667,
      0.848911,  0.832767,  0.816244,  0.799351,  0.782099,  0.764499,
      0.746563,  0.728303,  0.709734,  0.690869,  0.671724,  0.652315,
      0.632659,  0.612775,  0.592682,  0.5724,    0.551952,  0.531359,
      0.510646,  0.489838,  0.468961,  0.448045,  0.427117,  0.40621,
      0.385354,  0.364585,  0.343937,  0.323448,  0.303157,  0.283104,
      0.263331,  0.243883,  0.225467,  0.230592,  0.235717,  0.240843,
      0.245968,  0.251093,  0.256219,  0.261344,  0.24644,   0.217832,
      0.191217,  0.166578,  0.143898,  0.123161,  0.104353,  0.0874613,
      0.0724749, 0.0593836, 0.0481786, 0.0388526, 0.0313992, 0.0258136,
      0.0220921, 0.0202323, 0.0202328, 0.0220937, 0.0258162, 0.0314029,
      0.0397354, 0.0491423, 0.0585493, 0.0679563, 0.0773632, 0.0867702,
      0.0961772, 0.105584,  0.114991,  0.124398,  0.133805,  0.143212,
      0.156288,  0.172844,  0.189926,  0.207486,  0.225478,  0.243856,
      0.262579,  0.281604,  0.300893,  0.320406,  0.340109,  0.359965,
      0.379941,  0.400006,  0.420128,  0.440279,  0.46043,   0.480555,
      0.500627,  0.520624,  0.54052,   0.560296,  0.579929,  0.599399,
      0.618688,  0.637778,  0.656651,  0.675293,  0.693686,  0.711817,
      0.729673,  0.747241,  0.764508,  0.781463,  0.798096,  0.814396,
      0.830355,  0.845964,  0.861213,  0.876097,  0.890607,  0.904738,
      0.918483,  0.931836,  0.944792,  0.957346,  0.969495,  0.981233,
      0.992558,  1.00346,   1.01395,   1.02401,   1.03365,   1.04286,
      1.05164,   1.05999,   1.0679,    1.07538,   1.08242,   1.08902,
      1.09518,   1.10091,   1.10619,   1.11103,   1.11543,   1.11938,
      1.1229};

  for (int a = -NINETY_DEG, i = 0; a <= NINETY_DEG; ++a, ++i) {
    // ACTION
    double angle = std::nextafter(DEG_TO_RAD * a, 0.0);
    FramedVector local_wind{
        Eigen::Vector3d(-std::cos(angle), 0.0, -std::sin(angle)),
        REF_FRAME};
    FramedVector force = test_airfoil.cop_local_force(
        test_state,
        local_wind,
        test_element_state);

    // VERIFICATION
    EXPECT_NEAR(
        force.dot(
            local_wind /
            (AREA_M_SQ * 0.5 * AirfoilElement::AIR_DENSITY_KG_PER_M_CUBED)),
        test_lift_coeffs.at(i),
        1e-5);

    EXPECT_NEAR(
        force.dot(
            local_wind.cross(Eigen::Vector3d::UnitY()) /
            (AREA_M_SQ * 0.5 * AirfoilElement::AIR_DENSITY_KG_PER_M_CUBED)),
        test_drag_coeffs.at(i),
        1e-5);
  }
}

}  // namespace resim::dynamics::aerodynamics
