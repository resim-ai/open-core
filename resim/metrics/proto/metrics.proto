// Copyright 2023 ReSim, Inc.
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

syntax = "proto3";

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "resim/utils/proto/uuid.proto";

package resim.metrics.proto;

// -------------------
// Data Representation
// -------------------

enum MetricsDataType {
    NO_DATA_TYPE = 0;

    // Regular series:
    DOUBLE_SERIES_DATA_TYPE        = 1;
    TIMESTAMP_SERIES_DATA_TYPE     = 2;
    UUID_SERIES_DATA_TYPE          = 3;
    STRING_SERIES_DATA_TYPE        = 4;
    METRIC_STATUS_SERIES_DATA_TYPE = 5;

    // Indexed series:
    INDEXED_DOUBLE_SERIES_DATA_TYPE        = 6;
    INDEXED_TIMESTAMP_SERIES_DATA_TYPE     = 7;
    INDEXED_UUID_SERIES_DATA_TYPE          = 8;
    INDEXED_STRING_SERIES_DATA_TYPE        = 9;
    INDEXED_METRIC_STATUS_SERIES_DATA_TYPE = 10;

    // External Files are a special type of metrics
    // data, which are most often not reused.
    EXTERNAL_FILE_DATA_TYPE = 11;
}

message MetricsDataId {
    resim.proto.UUID id = 1;
}

message DoubleSeries {
    repeated double series = 1;
}

message TimestampSeries {
    repeated google.protobuf.Timestamp series = 1;
}

message UUIDSeries {
    repeated resim.proto.UUID series = 1;
}

message StringSeries {
    repeated string series = 1;
}

message MetricStatusSeries {
    repeated MetricStatus series = 1;
}

message Series {
    oneof series {
        DoubleSeries       doubles    = 1;
        TimestampSeries    timestamps = 2;
        UUIDSeries         uuids      = 3;
        StringSeries       strings    = 4;
        MetricStatusSeries statuses   = 5;
    }
}

// This represents a related list of series, each associated with a string. The
// main purpose of this is to enable one chart per string within a single
// metric, without making tons of different MetricsData objects. For example,
// this might be used to generate one StatesPerTime chart per actor, or one
// LinePlot (such as a precision-recall curve) per perception category.
//
// This differs from INDEXED_ series in that these are almost always intended to
// represent the axes of a single chart, when one series is the "axis" on which
// to plot another arrray. Note that because of this, per-category MetricsData
// can be indexed, and should always be indexed by another per-category
// MetricsData with the same categories.
//
// In the future, we expect we may make some of these categorization systems
// more first-class in our metrics reporting and UI. A good example might be
// per-actor metrics - but implementing that will rely on a single common
// representation of actors and actor IDs.
message SeriesPerCategory {
    map<string, Series> category_to_series = 1;
}

// This Metrics Data enables the passing through of an external file to a ReSim
// metrics card. The path is expected to be relative to the metrics.binproto
message ExternalFile {
    string path = 1;
}

message MetricsData {
    // Generic metrics data fields
    MetricsDataId   metrics_data_id = 1;
    MetricsDataType data_type       = 2;
    string          name            = 3;
    string          unit            = 4;

    // Fields for categorized data only
    bool            is_per_category = 5;
    repeated string category_names  = 6;

    // Fields for indexed data only
    bool            is_indexed      = 7;
    MetricsDataId   index_data_id   = 8;
    MetricsDataType index_data_type = 9;

    // Data fields
    oneof data {
        Series            series              = 10;
        SeriesPerCategory series_per_category = 11;
        ExternalFile      external_file       = 12;
    }
}

// ---------------------
// Metric representation
// ---------------------

enum MetricStatus {
    NO_METRIC_STATUS             = 0;
    PASSED_METRIC_STATUS         = 1;
    FAIL_WARN_METRIC_STATUS      = 2;
    NOT_APPLICABLE_METRIC_STATUS = 3;
    RAW_METRIC_STATUS            = 4;
    FAIL_BLOCK_METRIC_STATUS     = 5;
}

enum MetricImportance {
    NO_SPECIFIED_IMPORTANCE = 0;
    ZERO_IMPORTANCE         = 1;
    LOW_IMPORTANCE          = 2;
    MEDIUM_IMPORTANCE       = 3;
    HIGH_IMPORTANCE         = 4;
    CRITICAL_IMPORTANCE     = 5;
}

enum MetricType {
    NO_METRIC_TYPE                  = 0;
    DOUBLE_SUMMARY_METRIC_TYPE      = 1;
    DOUBLE_OVER_TIME_METRIC_TYPE    = 2;
    LINE_PLOT_METRIC_TYPE           = 3;
    BAR_CHART_METRIC_TYPE           = 4;
    STATES_OVER_TIME_METRIC_TYPE    = 5;
    HISTOGRAM_METRIC_TYPE           = 6;
    SCALAR_METRIC_TYPE              = 7;
    PLOTLY_METRIC_TYPE              = 8;
    IMAGE_METRIC_TYPE               = 9;
    BATCHWISE_BAR_CHART_METRIC_TYPE = 10;
}

message MetricId {
    resim.proto.UUID id = 1;
}

message JobId {
    resim.proto.UUID id = 1;
}

message EventId {
    resim.proto.UUID id = 1;
}

// All metrics associated with a given job.
// This is the type output by metrics scripts for validation.
message JobMetrics {
    JobId job_id = 1;

    MetricCollection job_level_metrics = 2;

    repeated MetricsData metrics_data = 3;

    MetricStatus metrics_status = 4;

    repeated Event events = 5;
}

// Top-level generic metric collection within JobMetrics.
// NB: This is separated out in order to allow metrics that are specifically
// associated with higher-level concepts like batches, or lower-level constructs
// like actors, which may (for example) PASS, even though the job-level metrics
// FAIL.
message MetricCollection {
    repeated Metric metrics = 1;

    MetricStatus metrics_status = 2;
}

// A single metric to be shown within on a page (such as the job-level insights
// page)
message Metric {
    MetricId metric_id = 1;

    string name = 2;

    MetricType type = 3;

    string description = 4;

    MetricStatus status = 5;

    optional bool should_display = 6;

    MetricValues metric_values = 7;

    optional bool blocking =
        8;  // DEPRECATED - use FAIL_BLOCK_METRIC_STATUS instead

    MetricImportance importance = 9;

    oneof parent_id {
        JobId job_id = 10;
    }

    // An optional float allowing for the user to indicate a numeric order for
    // metrics in any ordering context.
    //
    // If explicitly set (even as 0) the implied ordering semantics are via '<'
    // and alphabetically if '=='.
    //
    // If not explicitly set, it is assumed to be greater than MAX_FLOAT and
    // therefore ordered (alphabetically in the case of multiple) after any set
    // fields.
    optional float order = 11;

    // An optional boolean to be set to true in the case that this metric
    // should not be displayed outside the context of the event.
    optional bool event_metric = 12;

    // Key value tags
    repeated Tag tags = 13;
}

message Tag {
    string key   = 1;
    string value = 2;
}

enum TimestampType {
    NO_TYPE = 0;
    // An absolute timestamp refers to a date-time
    ABSOLUTE_TIMESTAMP = 1;
    // A relative timestamp refers to the duration into an experience the event
    // occurred
    RELATIVE_TIMESTAMP = 2;
}

// An event is a tagged timestamp, reflecting, well, what it sounds like:
// something happened. That event could be good, bad, neutral (and thus contains
// the usual statuses), but by definition is something worth looking at, at
// provides an insight. Thus, events provide a way to index into the experience
// to find what matters.
//
// Events are associated with metrics, and these metrics can be used to provide
// insight into the nature of the event.
//
// We allow events to be given names (not required unique in a job) and a list
// of tags.
message Event {
    EventId event_id = 1;

    string name = 2;

    string description = 3;

    repeated string tags = 4;

    repeated MetricId metrics = 5;

    MetricStatus status = 6;

    google.protobuf.Timestamp timestamp = 7;

    TimestampType timestamp_type = 9;

    MetricImportance importance = 8;
}

message MetricValues {
    oneof metric_values {
        DoubleSummaryMetricValues     double_metric_values              = 1;
        DoubleOverTimeMetricValues    double_over_time_metric_values    = 2;
        LinePlotMetricValues          line_plot_metric_values           = 3;
        BarChartMetricValues          bar_chart_metric_values           = 4;
        StatesOverTimeMetricValues    states_over_time_metric_values    = 5;
        HistogramMetricValues         histogram_metric_values           = 6;
        ScalarMetricValues            scalar_metric_values              = 7;
        PlotlyMetricValues            plotly_metric_values              = 8;
        ImageMetricValues             image_metric_values               = 9;
        BatchwiseBarChartMetricValues batchwise_bar_chart_metric_values = 10;
    }
}

message DoubleFailureDefinition {
    optional double fails_above = 1;
    optional double fails_below = 2;
}

message DoubleSummaryMetricValues {
    MetricsDataId value_data_id = 1;  // DOUBLE series, optionally indexed
    MetricsDataId status_data_id =
        2;  // METRIC_STATUS series, optionally indexed

    oneof index {
        // Optional select index
        uint32 series_index = 3;

        // Optional select timestamp from timestamp-indexed data
        google.protobuf.Timestamp timestamp_index = 4;

        // Optional select actor from UUID-indexed data
        resim.proto.UUID uuid_index = 5;

        // Optional select string from string-indexed data
        string string_index = 6;
    }

    DoubleFailureDefinition failure_definition = 7;
}

message DoubleOverTimeMetricValues {
    repeated MetricsDataId doubles_over_time_data_id =
        1;  // INDEXED_DOUBLE_SERIES_DATA_TYPE, indexed by TIMESTAMP
    repeated MetricsDataId statuses_over_time_data_id =
        2;  // INDEXED_METRIC_STATUS_SERIES_DATA_TYPE, indexed by TIMESTAMP

    repeated DoubleFailureDefinition failure_definition = 3;
    optional google.protobuf.Timestamp start_time       = 4;
    optional google.protobuf.Timestamp end_time         = 5;

    optional string y_axis_name         = 6;
    repeated string legend_series_names = 7;
}

message LinePlotMetricValues {
    repeated MetricsDataId x_doubles_data_id = 1;  // DOUBLE_SERIES_DATA_TYPE
    repeated MetricsDataId y_doubles_data_id = 2;  // DOUBLE_SERIES_DATA_TYPE

    repeated MetricsDataId statuses_data_id = 3;

    optional string x_axis_name         = 4;
    optional string y_axis_name         = 5;
    repeated string legend_series_names = 6;
}

message BarChartMetricValues {
    repeated MetricsDataId values_data_id =
        1;  // INDEXED_DOUBLE_SERIES_DATA_TYPE, indexed by STRING
    repeated MetricsDataId statuses_data_id =
        2;  // INDEXED_METRIC_STATUS_SERIES_DATA_TYPE, indexed by STRING

    repeated string legend_series_names =
        3;  // One name per INDEXED_DOUBLE_SERIES

    optional string x_axis_name = 4;
    optional string y_axis_name = 5;

    optional bool stack_bars = 6;  // Whether series should be stacked, as
                                   // opposed to next to each other
}

message BatchwiseBarChartMetricValues {
    // This is effectively multi-indexed on (batch id, category). We accomplish
    // this by using the index_data feature in each metrics data to reference a
    // series of batch ids, and by using the repeated nature of the metrics data
    // fields herein for the category index. Therefore, for each category, we
    // add a times data Series, a values data Series, and a statuses data
    // Series, all three of which index into a uuid data Series. Grouped
    // together, these series for a given category can be interpreted as a frame
    // like so:
    //
    // SeriesDatas for category "FAIL_BLOCK"
    //
    // +-----------++------------+-------+---------------+
    // | batch_id  || batch_time | value | metric_status |
    // +-----------++------------+-------+---------------+
    // | 9d5711-...|| ...        | 3     | ...           |
    // | b2c8ce-...|| ...        | 4     | ...           |
    // | a14421-...|| ...        | 0     | ...           |
    // | ...       || ...        | ...   | ...           |
    // +-----------++------------+-------+---------------+
    //
    // Where the first column is the index referred to by the remianing columns.
    //
    repeated MetricsDataId times_data_id =
        1;  // INDEXED_TIMESTAMP_SERIES_DATA_TYPE, indexed by UUID
    repeated MetricsDataId values_data_id =
        2;  // INDEXED_DOUBLE_SERIES_DATA_TYPE, indexed by UUID
    repeated MetricsDataId statuses_data_id =
        3;  // INDEXED_METRIC_STATUS_SERIES_DATA_TYPE, indexed by UUID

    repeated string categories = 4;  // A list of possible categories

    // An optional list of colors in hex format. These colors will be
    // applied in order to the categories listed above until we run out
    // of colors, or we run out of categories.
    repeated string colors = 5;

    optional string x_axis_name = 6;
    optional string y_axis_name = 7;

    optional bool stack_bars = 8;  // Whether series should be stacked, as
                                   // opposed to next to each other
}

message StatesOverTimeMetricValues {
    repeated MetricsDataId states_over_time_data_id =
        1;  // INDEXED_STRING_SERIES_DATA_TYPE, indexed by TIMESTAMP
    repeated MetricsDataId statuses_over_time_data_id =
        2;  // INDEXED_METRIC_STATUS_SERIES_DATA_TYPE, indexed by TIMESTAMP

    repeated string states_set     = 3;
    repeated string failure_states = 4;

    repeated string legend_series_names = 5;
}

message HistogramMetricValues {
    MetricsDataId values_data_id =
        1;  // DOUBLE_SERIES_DATA_TYPE, can be INDEXED but INDEX is ignored.
    MetricsDataId statuses_data_id = 2;  // METRIC_STATUS_SERIES_DATA_TYPE, can
                                         // be INDEXED but INDEX is ignored.

    repeated Bucket buckets = 3;

    optional double lower_bound = 4;
    optional double upper_bound = 5;

    optional string x_axis_name = 6;

    message Bucket {
        optional double lower = 1;
        optional double upper = 2;
    }
}

message ScalarMetricValues {
    optional double value = 1;

    optional DoubleFailureDefinition failure_definition = 2;

    optional string unit =
        3;  // Unit is stored in metric here, as no data series are used.
}

message PlotlyMetricValues {
    google.protobuf.Struct json = 1;
}

message ImageMetricValues {
    MetricsDataId image_data_id = 1;
}
