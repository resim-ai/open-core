name: Draft Release
on:
  workflow_dispatch:
    inputs:
      tag:
        type: string
        description: "Release Tag"
jobs:
  pre_release_checks:
    name: Pre-release checks
    runs-on: ubuntu-22.04
    container:
      image: public.ecr.aws/resim/core:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Workaround for Custom Docker Image
        # Trunk makes use of git and we will get permissions issues (i.e.
        # detected dubious ownership) if we don't make the repo a safe
        # directory.
        run: git config --global --add safe.directory /__w/open-core/open-core

      - name: Check tag availability
        if: "${{ github.event.inputs.tag != '' }}"
        env:
          RESIM_VERSION: ${{ github.event.inputs.tag }}
        run: ./.github/workflows/check_tags_available.sh

      - name: Cache Bazel
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/bazel
          key: ${{ runner.os }}-bazel-${{ hashFiles('.bazelversion', '.bazelrc', 'WORKSPACE') }}
          restore-keys: |
            ${{ runner.os }}-bazel-

      - name: Setup Bazel Cache Auth
        uses: ./.github/actions/setup-bazel-cache-auth
        with:
          bazel_cache_auth_string: ${{ secrets.BAZEL_CACHE_AUTH_STRING }}

      - name: Build `compile_commands.json` database
        run: bazel run @hedron_compile_commands//:refresh_all


      - name: Generate Coverage Report
        run: bazel coverage ... --combined_report=lcov --java_runtime_version=remotejdk_11 --nocache_test_results --test_tag_filters="-integration" --remote_download_all

      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Trunk Check
        uses: trunk-io/trunk-action@v1

      - name: Build Go Bindings
        if: "${{ github.event.inputs.tag != '' }}"
        env:
          RESIM_VERSION: ${{ github.event.inputs.tag }}
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "github-action@github.com"
          ./.github/workflows/add_go_bindings.sh

      - name: Clean Old Wheels
        run: |
          BAZELBIN=$(bazel info --repo_env="RESIM_VERSION=$RESIM_VERSION" bazel-bin)
          rm -rf $BAZELBIN/pkg/*

        # Here, we build all the wheels in //pkg/... to be placed on the release as artifacts,
        # instead of simply relying on build_push_wheels below to put them on PyPI. We do this for
        # now, since not all the wheels our customers depend on are currently available on
        # PyPI. Eventually when all of them are available there we can remove this.
      - name: Build Wheels
        env:
          RESIM_VERSION: ${{ github.event.inputs.tag }}
        run: |
          bazel build //pkg/... --repo_env="RESIM_VERSION=$RESIM_VERSION"

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels
          path: bazel-bin/pkg/*.whl

  build_push_wheels:
    needs: pre_release_checks
    uses: ./.github/workflows/build-push-wheels.yml
    with:
      resim_version: ${{ github.event.inputs.tag }}
    secrets: inherit

  do_release:
    needs: [build_push_wheels, pre_release_checks]
    name: Release
    runs-on: ubuntu-22.04
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: python-wheels

      - name: Draft Release
        if: "${{ github.event.inputs.tag != '' }}"
        uses: ncipollo/release-action@v1
        with:
          artifacts: "*.whl"
          generateReleaseNotes: true
          tag: ${{ github.event.inputs.tag }}
